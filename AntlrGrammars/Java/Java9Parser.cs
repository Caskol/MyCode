//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Java9Parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Java9Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXPORTS=17, EXTENDS=18, FINAL=19, FINALLY=20, FLOAT=21, FOR=22, 
		IF=23, GOTO=24, IMPLEMENTS=25, IMPORT=26, INSTANCEOF=27, INT=28, INTERFACE=29, 
		LONG=30, MODULE=31, NATIVE=32, NEW=33, OPEN=34, OPERNS=35, PACKAGE=36, 
		PRIVATE=37, PROTECTED=38, PROVIDES=39, PUBLIC=40, REQUIRES=41, RETURN=42, 
		SHORT=43, STATIC=44, STRICTFP=45, SUPER=46, SWITCH=47, SYNCHRONIZED=48, 
		THIS=49, THROW=50, THROWS=51, TO=52, TRANSIENT=53, TRANSITIVE=54, TRY=55, 
		USES=56, VOID=57, VOLATILE=58, WHILE=59, WITH=60, UNDER_SCORE=61, IntegerLiteral=62, 
		FloatingPointLiteral=63, BooleanLiteral=64, CharacterLiteral=65, StringLiteral=66, 
		NullLiteral=67, LPAREN=68, RPAREN=69, LBRACE=70, RBRACE=71, LBRACK=72, 
		RBRACK=73, SEMI=74, COMMA=75, DOT=76, ELLIPSIS=77, AT=78, COLONCOLON=79, 
		ASSIGN=80, GT=81, LT=82, BANG=83, TILDE=84, QUESTION=85, COLON=86, ARROW=87, 
		EQUAL=88, LE=89, GE=90, NOTEQUAL=91, AND=92, OR=93, INC=94, DEC=95, ADD=96, 
		SUB=97, MUL=98, DIV=99, BITAND=100, BITOR=101, CARET=102, MOD=103, ADD_ASSIGN=104, 
		SUB_ASSIGN=105, MUL_ASSIGN=106, DIV_ASSIGN=107, AND_ASSIGN=108, OR_ASSIGN=109, 
		XOR_ASSIGN=110, MOD_ASSIGN=111, LSHIFT_ASSIGN=112, RSHIFT_ASSIGN=113, 
		URSHIFT_ASSIGN=114, Identifier=115, WS=116, COMMENT=117, LINE_COMMENT=118;
	public const int
		RULE_literal = 0, RULE_primitiveType = 1, RULE_numericType = 2, RULE_integralType = 3, 
		RULE_floatingPointType = 4, RULE_referenceType = 5, RULE_classOrInterfaceType = 6, 
		RULE_classType = 7, RULE_classType_lf_classOrInterfaceType = 8, RULE_classType_lfno_classOrInterfaceType = 9, 
		RULE_interfaceType = 10, RULE_interfaceType_lf_classOrInterfaceType = 11, 
		RULE_interfaceType_lfno_classOrInterfaceType = 12, RULE_typeVariable = 13, 
		RULE_arrayType = 14, RULE_dims = 15, RULE_typeParameter = 16, RULE_typeParameterModifier = 17, 
		RULE_typeBound = 18, RULE_additionalBound = 19, RULE_typeArguments = 20, 
		RULE_typeArgumentList = 21, RULE_typeArgument = 22, RULE_wildcard = 23, 
		RULE_wildcardBounds = 24, RULE_moduleName = 25, RULE_packageName = 26, 
		RULE_typeName = 27, RULE_packageOrTypeName = 28, RULE_expressionName = 29, 
		RULE_methodName = 30, RULE_ambiguousName = 31, RULE_compilationUnit = 32, 
		RULE_ordinaryCompilation = 33, RULE_modularCompilation = 34, RULE_packageDeclaration = 35, 
		RULE_packageModifier = 36, RULE_importDeclaration = 37, RULE_singleTypeImportDeclaration = 38, 
		RULE_typeImportOnDemandDeclaration = 39, RULE_singleStaticImportDeclaration = 40, 
		RULE_staticImportOnDemandDeclaration = 41, RULE_typeDeclaration = 42, 
		RULE_moduleDeclaration = 43, RULE_moduleDirective = 44, RULE_requiresModifier = 45, 
		RULE_classDeclaration = 46, RULE_normalClassDeclaration = 47, RULE_classModifier = 48, 
		RULE_typeParameters = 49, RULE_typeParameterList = 50, RULE_superclass = 51, 
		RULE_superinterfaces = 52, RULE_interfaceTypeList = 53, RULE_classBody = 54, 
		RULE_classBodyDeclaration = 55, RULE_classMemberDeclaration = 56, RULE_fieldDeclaration = 57, 
		RULE_fieldModifier = 58, RULE_variableDeclaratorList = 59, RULE_variableDeclarator = 60, 
		RULE_variableDeclaratorId = 61, RULE_variableInitializer = 62, RULE_unannType = 63, 
		RULE_unannPrimitiveType = 64, RULE_unannReferenceType = 65, RULE_unannClassOrInterfaceType = 66, 
		RULE_unannClassType = 67, RULE_unannClassType_lf_unannClassOrInterfaceType = 68, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 69, RULE_unannInterfaceType = 70, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 71, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 72, 
		RULE_unannTypeVariable = 73, RULE_unannArrayType = 74, RULE_methodDeclaration = 75, 
		RULE_methodModifier = 76, RULE_methodHeader = 77, RULE_result = 78, RULE_methodDeclarator = 79, 
		RULE_formalParameterList = 80, RULE_formalParameters = 81, RULE_formalParameter = 82, 
		RULE_variableModifier = 83, RULE_lastFormalParameter = 84, RULE_receiverParameter = 85, 
		RULE_throws_ = 86, RULE_exceptionTypeList = 87, RULE_exceptionType = 88, 
		RULE_methodBody = 89, RULE_instanceInitializer = 90, RULE_staticInitializer = 91, 
		RULE_constructorDeclaration = 92, RULE_constructorModifier = 93, RULE_constructorDeclarator = 94, 
		RULE_simpleTypeName = 95, RULE_constructorBody = 96, RULE_explicitConstructorInvocation = 97, 
		RULE_enumDeclaration = 98, RULE_enumBody = 99, RULE_enumConstantList = 100, 
		RULE_enumConstant = 101, RULE_enumConstantModifier = 102, RULE_enumBodyDeclarations = 103, 
		RULE_interfaceDeclaration = 104, RULE_normalInterfaceDeclaration = 105, 
		RULE_interfaceModifier = 106, RULE_extendsInterfaces = 107, RULE_interfaceBody = 108, 
		RULE_interfaceMemberDeclaration = 109, RULE_constantDeclaration = 110, 
		RULE_constantModifier = 111, RULE_interfaceMethodDeclaration = 112, RULE_interfaceMethodModifier = 113, 
		RULE_annotationTypeDeclaration = 114, RULE_annotationTypeBody = 115, RULE_annotationTypeMemberDeclaration = 116, 
		RULE_annotationTypeElementDeclaration = 117, RULE_annotationTypeElementModifier = 118, 
		RULE_defaultValue = 119, RULE_annotation = 120, RULE_normalAnnotation = 121, 
		RULE_elementValuePairList = 122, RULE_elementValuePair = 123, RULE_elementValue = 124, 
		RULE_elementValueArrayInitializer = 125, RULE_elementValueList = 126, 
		RULE_markerAnnotation = 127, RULE_singleElementAnnotation = 128, RULE_arrayInitializer = 129, 
		RULE_variableInitializerList = 130, RULE_block = 131, RULE_blockStatements = 132, 
		RULE_blockStatement = 133, RULE_localVariableDeclarationStatement = 134, 
		RULE_localVariableDeclaration = 135, RULE_statement = 136, RULE_statementNoShortIf = 137, 
		RULE_statementWithoutTrailingSubstatement = 138, RULE_emptyStatement_ = 139, 
		RULE_labeledStatement = 140, RULE_labeledStatementNoShortIf = 141, RULE_expressionStatement = 142, 
		RULE_statementExpression = 143, RULE_ifThenStatement = 144, RULE_ifThenElseStatement = 145, 
		RULE_ifThenElseStatementNoShortIf = 146, RULE_assertStatement = 147, RULE_switchStatement = 148, 
		RULE_switchBlock = 149, RULE_switchBlockStatementGroup = 150, RULE_switchLabels = 151, 
		RULE_switchLabel = 152, RULE_enumConstantName = 153, RULE_whileStatement = 154, 
		RULE_whileStatementNoShortIf = 155, RULE_doStatement = 156, RULE_forStatement = 157, 
		RULE_forStatementNoShortIf = 158, RULE_basicForStatement = 159, RULE_basicForStatementNoShortIf = 160, 
		RULE_forInit = 161, RULE_forUpdate = 162, RULE_statementExpressionList = 163, 
		RULE_enhancedForStatement = 164, RULE_enhancedForStatementNoShortIf = 165, 
		RULE_breakStatement = 166, RULE_continueStatement = 167, RULE_returnStatement = 168, 
		RULE_throwStatement = 169, RULE_synchronizedStatement = 170, RULE_tryStatement = 171, 
		RULE_catches = 172, RULE_catchClause = 173, RULE_catchFormalParameter = 174, 
		RULE_catchType = 175, RULE_finally_ = 176, RULE_tryWithResourcesStatement = 177, 
		RULE_resourceSpecification = 178, RULE_resourceList = 179, RULE_resource = 180, 
		RULE_variableAccess = 181, RULE_primary = 182, RULE_primaryNoNewArray = 183, 
		RULE_primaryNoNewArray_lf_arrayAccess = 184, RULE_primaryNoNewArray_lfno_arrayAccess = 185, 
		RULE_primaryNoNewArray_lf_primary = 186, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 187, 
		RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 188, RULE_primaryNoNewArray_lfno_primary = 189, 
		RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 190, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 191, 
		RULE_classLiteral = 192, RULE_classInstanceCreationExpression = 193, RULE_classInstanceCreationExpression_lf_primary = 194, 
		RULE_classInstanceCreationExpression_lfno_primary = 195, RULE_typeArgumentsOrDiamond = 196, 
		RULE_fieldAccess = 197, RULE_fieldAccess_lf_primary = 198, RULE_fieldAccess_lfno_primary = 199, 
		RULE_arrayAccess = 200, RULE_arrayAccess_lf_primary = 201, RULE_arrayAccess_lfno_primary = 202, 
		RULE_methodInvocation = 203, RULE_methodInvocation_lf_primary = 204, RULE_methodInvocation_lfno_primary = 205, 
		RULE_argumentList = 206, RULE_methodReference = 207, RULE_methodReference_lf_primary = 208, 
		RULE_methodReference_lfno_primary = 209, RULE_arrayCreationExpression = 210, 
		RULE_dimExprs = 211, RULE_dimExpr = 212, RULE_constantExpression = 213, 
		RULE_expression = 214, RULE_lambdaExpression = 215, RULE_lambdaParameters = 216, 
		RULE_inferredFormalParameterList = 217, RULE_lambdaBody = 218, RULE_assignmentExpression = 219, 
		RULE_assignment = 220, RULE_leftHandSide = 221, RULE_assignmentOperator = 222, 
		RULE_conditionalExpression = 223, RULE_conditionalOrExpression = 224, 
		RULE_conditionalAndExpression = 225, RULE_inclusiveOrExpression = 226, 
		RULE_exclusiveOrExpression = 227, RULE_andExpression = 228, RULE_equalityExpression = 229, 
		RULE_relationalExpression = 230, RULE_shiftExpression = 231, RULE_additiveExpression = 232, 
		RULE_multiplicativeExpression = 233, RULE_unaryExpression = 234, RULE_preIncrementExpression = 235, 
		RULE_preDecrementExpression = 236, RULE_unaryExpressionNotPlusMinus = 237, 
		RULE_postfixExpression = 238, RULE_postIncrementExpression = 239, RULE_postIncrementExpression_lf_postfixExpression = 240, 
		RULE_postDecrementExpression = 241, RULE_postDecrementExpression_lf_postfixExpression = 242, 
		RULE_castExpression = 243, RULE_identifier = 244;
	public static readonly string[] ruleNames = {
		"literal", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"moduleName", "packageName", "typeName", "packageOrTypeName", "expressionName", 
		"methodName", "ambiguousName", "compilationUnit", "ordinaryCompilation", 
		"modularCompilation", "packageDeclaration", "packageModifier", "importDeclaration", 
		"singleTypeImportDeclaration", "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
		"staticImportOnDemandDeclaration", "typeDeclaration", "moduleDeclaration", 
		"moduleDirective", "requiresModifier", "classDeclaration", "normalClassDeclaration", 
		"classModifier", "typeParameters", "typeParameterList", "superclass", 
		"superinterfaces", "interfaceTypeList", "classBody", "classBodyDeclaration", 
		"classMemberDeclaration", "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
		"variableDeclarator", "variableDeclaratorId", "variableInitializer", "unannType", 
		"unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
		"unannClassType", "unannClassType_lf_unannClassOrInterfaceType", "unannClassType_lfno_unannClassOrInterfaceType", 
		"unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType", 
		"unannInterfaceType_lfno_unannClassOrInterfaceType", "unannTypeVariable", 
		"unannArrayType", "methodDeclaration", "methodModifier", "methodHeader", 
		"result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement_", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "variableAccess", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classLiteral", 
		"classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
		"classInstanceCreationExpression_lfno_primary", "typeArgumentsOrDiamond", 
		"fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", "arrayAccess", 
		"arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "preIncrementExpression", "preDecrementExpression", 
		"unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
		"postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
		"postDecrementExpression_lf_postfixExpression", "castExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'exports'", "'extends'", "'final'", 
		"'finally'", "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
		"'instanceof'", "'int'", "'interface'", "'long'", "'module'", "'native'", 
		"'new'", "'open'", "'opens'", "'package'", "'private'", "'protected'", 
		"'provides'", "'public'", "'requires'", "'return'", "'short'", "'static'", 
		"'strictfp'", "'super'", "'switch'", "'synchronized'", "'this'", "'throw'", 
		"'throws'", "'to'", "'transient'", "'transitive'", "'try'", "'uses'", 
		"'void'", "'volatile'", "'while'", "'with'", "'_'", null, null, null, 
		null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'...'", "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", 
		"'?'", "':'", "'->'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", 
		"'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
		"'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
		"'>>='", "'>>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXPORTS", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
		"GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", 
		"MODULE", "NATIVE", "NEW", "OPEN", "OPERNS", "PACKAGE", "PRIVATE", "PROTECTED", 
		"PROVIDES", "PUBLIC", "REQUIRES", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TO", "TRANSIENT", 
		"TRANSITIVE", "TRY", "USES", "VOID", "VOLATILE", "WHILE", "WITH", "UNDER_SCORE", 
		"IntegerLiteral", "FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", 
		"StringLiteral", "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ELLIPSIS", "AT", "COLONCOLON", 
		"ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "ARROW", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
		"LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", "WS", 
		"COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java9Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Java9Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Java9Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Java9Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(Java9Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPointLiteral() { return GetToken(Java9Parser.FloatingPointLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(Java9Parser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(Java9Parser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(Java9Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(Java9Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java9Parser.BOOLEAN, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_primitiveType);
		int _la;
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 492;
					annotation();
					}
					}
					State = 497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 498;
				numericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 499;
					annotation();
					}
					}
					State = 504;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 505;
				Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_numericType);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(Java9Parser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(Java9Parser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(Java9Parser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(Java9Parser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(Java9Parser.CHAR, 0); }
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8797435199776L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(Java9Parser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(Java9Parser.DOUBLE, 0); }
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_referenceType);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				classOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517;
				typeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 521;
				classType_lfno_classOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 522;
				interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 527;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 525;
						classType_lf_classOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 526;
						interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_classType);
		int _la;
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 532;
					annotation();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 538;
				identifier();
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 539;
					typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				classOrInterfaceType();
				State = 543;
				Match(DOT);
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 544;
					annotation();
					}
					}
					State = 549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 550;
				identifier();
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 551;
					typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(DOT);
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 557;
				annotation();
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 563;
			identifier();
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 564;
				typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 567;
				annotation();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 573;
			identifier();
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 574;
				typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 583;
				annotation();
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 589;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayType);
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591;
				primitiveType();
				State = 592;
				dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				classOrInterfaceType();
				State = 595;
				dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 597;
				typeVariable();
				State = 598;
				dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(Context, State);
		EnterRule(_localctx, 30, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 602;
				annotation();
				}
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 608;
			Match(LBRACK);
			State = 609;
			Match(RBRACK);
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 610;
						annotation();
						}
						}
						State = 615;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 616;
					Match(LBRACK);
					State = 617;
					Match(RBRACK);
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 623;
				typeParameterModifier();
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 629;
			identifier();
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 630;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java9Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeBound);
		int _la;
		try {
			State = 645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				Match(EXTENDS);
				State = 636;
				typeVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 637;
				Match(EXTENDS);
				State = 638;
				classOrInterfaceType();
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 639;
					additionalBound();
					}
					}
					State = 644;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(Java9Parser.BITAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(Context, State);
		EnterRule(_localctx, 38, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(BITAND);
			State = 648;
			interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java9Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java9Parser.GT, 0); }
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(LT);
			State = 651;
			typeArgumentList();
			State = 652;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			typeArgument();
			State = 659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 655;
				Match(COMMA);
				State = 656;
				typeArgument();
				}
				}
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeArgument);
		try {
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662;
				referenceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663;
				wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(Java9Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 46, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 666;
				annotation();
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 672;
			Match(QUESTION);
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 673;
				wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java9Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(Context, State);
		EnterRule(_localctx, 48, RULE_wildcardBounds);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676;
				Match(EXTENDS);
				State = 677;
				referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				Match(SUPER);
				State = 679;
				referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		return moduleName(0);
	}

	private ModuleNameContext moduleName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ModuleNameContext _localctx = new ModuleNameContext(Context, _parentState);
		ModuleNameContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_moduleName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 683;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ModuleNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_moduleName);
					State = 685;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 686;
					Match(DOT);
					State = 687;
					identifier();
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(Context, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 694;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 701;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 696;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 697;
					Match(DOT);
					State = 698;
					identifier();
					}
					} 
				}
				State = 703;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				packageOrTypeName(0);
				State = 706;
				Match(DOT);
				State = 707;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(Context, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 712;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 719;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 714;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 715;
					Match(DOT);
					State = 716;
					identifier();
					}
					} 
				}
				State = 721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 722;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				ambiguousName(0);
				State = 724;
				Match(DOT);
				State = 725;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(Context, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 732;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 734;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 735;
					Match(DOT);
					State = 736;
					identifier();
					}
					} 
				}
				State = 741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Java9Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrdinaryCompilationContext ordinaryCompilation() {
			return GetRuleContext<OrdinaryCompilationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModularCompilationContext modularCompilation() {
			return GetRuleContext<ModularCompilationContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 742;
				ordinaryCompilation();
				}
				break;
			case 2:
				{
				State = 743;
				modularCompilation();
				}
				break;
			}
			State = 746;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinaryCompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Java9Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public OrdinaryCompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinaryCompilation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterOrdinaryCompilation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitOrdinaryCompilation(this);
		}
	}

	[RuleVersion(0)]
	public OrdinaryCompilationContext ordinaryCompilation() {
		OrdinaryCompilationContext _localctx = new OrdinaryCompilationContext(Context, State);
		EnterRule(_localctx, 66, RULE_ordinaryCompilation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 748;
				packageDeclaration();
				}
				break;
			}
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 751;
				importDeclaration();
				}
				}
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54288924082690L) != 0) || _la==SEMI || _la==AT) {
				{
				{
				State = 757;
				typeDeclaration();
				}
				}
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 763;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModularCompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ModularCompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modularCompilation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterModularCompilation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitModularCompilation(this);
		}
	}

	[RuleVersion(0)]
	public ModularCompilationContext modularCompilation() {
		ModularCompilationContext _localctx = new ModularCompilationContext(Context, State);
		EnterRule(_localctx, 68, RULE_modularCompilation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 765;
				importDeclaration();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 771;
			moduleDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(Java9Parser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 773;
				packageModifier();
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 779;
			Match(PACKAGE);
			State = 780;
			packageName(0);
			State = 781;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_importDeclaration);
		try {
			State = 789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				singleTypeImportDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				typeImportOnDemandDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				singleStaticImportDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java9Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(IMPORT);
			State = 792;
			typeName();
			State = 793;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java9Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java9Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			Match(IMPORT);
			State = 796;
			packageOrTypeName(0);
			State = 797;
			Match(DOT);
			State = 798;
			Match(MUL);
			State = 799;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java9Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(IMPORT);
			State = 802;
			Match(STATIC);
			State = 803;
			typeName();
			State = 804;
			Match(DOT);
			State = 805;
			identifier();
			State = 806;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Java9Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java9Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(IMPORT);
			State = 809;
			Match(STATIC);
			State = 810;
			typeName();
			State = 811;
			Match(DOT);
			State = 812;
			Match(MUL);
			State = 813;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeDeclaration);
		try {
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				interfaceDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 817;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Java9Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(Java9Parser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext[] moduleDirective() {
			return GetRuleContexts<ModuleDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext moduleDirective(int i) {
			return GetRuleContext<ModuleDirectiveContext>(i);
		}
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 820;
				annotation();
				}
				}
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 826;
				Match(OPEN);
				}
			}

			State = 829;
			Match(MODULE);
			State = 830;
			moduleName(0);
			State = 831;
			Match(LBRACE);
			State = 835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72060377176866816L) != 0)) {
				{
				{
				State = 832;
				moduleDirective();
				}
				}
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 838;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(Java9Parser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext[] moduleName() {
			return GetRuleContexts<ModuleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName(int i) {
			return GetRuleContext<ModuleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext[] requiresModifier() {
			return GetRuleContexts<RequiresModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext requiresModifier(int i) {
			return GetRuleContext<RequiresModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORTS() { return GetToken(Java9Parser.EXPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Java9Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERNS() { return GetToken(Java9Parser.OPERNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(Java9Parser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDES() { return GetToken(Java9Parser.PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(Java9Parser.WITH, 0); }
		public ModuleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitModuleDirective(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDirectiveContext moduleDirective() {
		ModuleDirectiveContext _localctx = new ModuleDirectiveContext(Context, State);
		EnterRule(_localctx, 88, RULE_moduleDirective);
		int _la;
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				Match(REQUIRES);
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STATIC || _la==TRANSITIVE) {
					{
					{
					State = 841;
					requiresModifier();
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 847;
				moduleName(0);
				State = 848;
				Match(SEMI);
				}
				break;
			case EXPORTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 850;
				Match(EXPORTS);
				State = 851;
				packageName(0);
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 852;
					Match(TO);
					State = 853;
					moduleName(0);
					State = 858;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 854;
						Match(COMMA);
						State = 855;
						moduleName(0);
						}
						}
						State = 860;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 863;
				Match(SEMI);
				}
				break;
			case OPERNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 865;
				Match(OPERNS);
				State = 866;
				packageName(0);
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 867;
					Match(TO);
					State = 868;
					moduleName(0);
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 869;
						Match(COMMA);
						State = 870;
						moduleName(0);
						}
						}
						State = 875;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 878;
				Match(SEMI);
				}
				break;
			case USES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 880;
				Match(USES);
				State = 881;
				typeName();
				State = 882;
				Match(SEMI);
				}
				break;
			case PROVIDES:
				EnterOuterAlt(_localctx, 5);
				{
				State = 884;
				Match(PROVIDES);
				State = 885;
				typeName();
				State = 886;
				Match(WITH);
				State = 887;
				typeName();
				State = 892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 888;
					Match(COMMA);
					State = 889;
					typeName();
					}
					}
					State = 894;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 895;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiresModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSITIVE() { return GetToken(Java9Parser.TRANSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		public RequiresModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiresModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterRequiresModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitRequiresModifier(this);
		}
	}

	[RuleVersion(0)]
	public RequiresModifierContext requiresModifier() {
		RequiresModifierContext _localctx = new RequiresModifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_requiresModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			_la = TokenStream.LA(1);
			if ( !(_la==STATIC || _la==TRANSITIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_classDeclaration);
		try {
			State = 903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 901;
				normalClassDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 902;
				enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java9Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54288387145730L) != 0) || _la==AT) {
				{
				{
				State = 905;
				classModifier();
				}
				}
				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 911;
			Match(CLASS);
			State = 912;
			identifier();
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 913;
				typeParameters();
				}
			}

			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 916;
				superclass();
				}
			}

			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 919;
				superinterfaces();
				}
			}

			State = 922;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java9Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java9Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java9Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java9Parser.STRICTFP, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 96, RULE_classModifier);
		try {
			State = 932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 926;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 927;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 928;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 929;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 930;
				Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 931;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java9Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java9Parser.GT, 0); }
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(LT);
			State = 935;
			typeParameterList();
			State = 936;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			typeParameter();
			State = 943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 939;
				Match(COMMA);
				State = 940;
				typeParameter();
				}
				}
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java9Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(Context, State);
		EnterRule(_localctx, 102, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(EXTENDS);
			State = 947;
			classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(Java9Parser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(Context, State);
		EnterRule(_localctx, 104, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			Match(IMPLEMENTS);
			State = 950;
			interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 106, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			interfaceType();
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 953;
				Match(COMMA);
				State = 954;
				interfaceType();
				}
				}
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 108, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			Match(LBRACE);
			State = 964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1671182829853819690L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 35184372093201L) != 0)) {
				{
				{
				State = 961;
				classBodyDeclaration();
				}
				}
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 967;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_classBodyDeclaration);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 969;
				classMemberDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 970;
				instanceInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 971;
				staticInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 972;
				constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_classMemberDeclaration);
		try {
			State = 980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975;
				fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976;
				methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 977;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 978;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 979;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & 576461319275544577L) != 0)) {
				{
				{
				State = 982;
				fieldModifier();
				}
				}
				State = 987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 988;
			unannType();
			State = 989;
			variableDeclaratorList();
			State = 990;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java9Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java9Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSIENT() { return GetToken(Java9Parser.TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(Java9Parser.VOLATILE, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_fieldModifier);
		try {
			State = 1000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 993;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 994;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 995;
				Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 996;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 997;
				Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 998;
				Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 999;
				Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(Context, State);
		EnterRule(_localctx, 118, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			variableDeclarator();
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1003;
				Match(COMMA);
				State = 1004;
				variableDeclarator();
				}
				}
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java9Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 120, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			variableDeclaratorId();
			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1011;
				Match(ASSIGN);
				State = 1012;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 122, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			identifier();
			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1016;
				dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 124, RULE_variableInitializer);
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case NEW:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case SUPER:
			case THIS:
			case TO:
			case USES:
			case VOID:
			case WITH:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1019;
				expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020;
				arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_unannType);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023;
				unannPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024;
				unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java9Parser.BOOLEAN, 0); }
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_unannPrimitiveType);
		try {
			State = 1029;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1028;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_unannReferenceType);
		try {
			State = 1034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1031;
				unannClassOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				unannTypeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1033;
				unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1036;
				unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 1037;
				unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 1044;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1042;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						State = 1040;
						unannClassType_lf_unannClassOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 1041;
						unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 1046;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_unannClassType);
		int _la;
		try {
			State = 1063;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047;
				identifier();
				State = 1049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1048;
					typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1051;
				unannClassOrInterfaceType();
				State = 1052;
				Match(DOT);
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1053;
					annotation();
					}
					}
					State = 1058;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1059;
				identifier();
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1060;
					typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			Match(DOT);
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1066;
				annotation();
				}
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1072;
			identifier();
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1073;
				typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1076;
			identifier();
			State = 1078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1077;
				typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(Context, State);
		EnterRule(_localctx, 146, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(Context, State);
		EnterRule(_localctx, 148, RULE_unannArrayType);
		try {
			State = 1097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1088;
				unannPrimitiveType();
				State = 1089;
				dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1091;
				unannClassOrInterfaceType();
				State = 1092;
				dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1094;
				unannTypeVariable();
				State = 1095;
				dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 335767658823682L) != 0) || _la==AT) {
				{
				{
				State = 1099;
				methodModifier();
				}
				}
				State = 1104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1105;
			methodHeader();
			State = 1106;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java9Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java9Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java9Parser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(Java9Parser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(Java9Parser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java9Parser.STRICTFP, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_methodModifier);
		try {
			State = 1118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1110;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1111;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1112;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1113;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1114;
				Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1115;
				Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1116;
				Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1117;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(Context, State);
		EnterRule(_localctx, 154, RULE_methodHeader);
		int _la;
		try {
			State = 1137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case TO:
			case USES:
			case VOID:
			case WITH:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120;
				result();
				State = 1121;
				methodDeclarator();
				State = 1123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 1122;
					throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				typeParameters();
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1126;
					annotation();
					}
					}
					State = 1131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1132;
				result();
				State = 1133;
				methodDeclarator();
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 1134;
					throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java9Parser.VOID, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 156, RULE_result);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case TO:
			case USES:
			case WITH:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1139;
				unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1140;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(Context, State);
		EnterRule(_localctx, 158, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			identifier();
			State = 1144;
			Match(LPAREN);
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229494298176274728L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1145;
				formalParameterList();
				}
			}

			State = 1148;
			Match(RPAREN);
			State = 1150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1149;
				dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java9Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 160, RULE_formalParameterList);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152;
				formalParameters();
				State = 1153;
				Match(COMMA);
				State = 1154;
				lastFormalParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1156;
				lastFormalParameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1157;
				receiverParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 162, RULE_formalParameters);
		try {
			int _alt;
			State = 1176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160;
				formalParameter();
				State = 1165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1161;
						Match(COMMA);
						State = 1162;
						formalParameter();
						}
						} 
					}
					State = 1167;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1168;
				receiverParameter();
				State = 1173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1169;
						Match(COMMA);
						State = 1170;
						formalParameter();
						}
						} 
					}
					State = 1175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 164, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1178;
				variableModifier();
				}
				}
				State = 1183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1184;
			unannType();
			State = 1185;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java9Parser.FINAL, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_variableModifier);
		try {
			State = 1189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1187;
				annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1188;
				Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(Java9Parser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 168, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1191;
					variableModifier();
					}
					}
					State = 1196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1197;
				unannType();
				State = 1201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1198;
					annotation();
					}
					}
					State = 1203;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1204;
				Match(ELLIPSIS);
				State = 1205;
				variableDeclaratorId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1207;
				formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 170, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1210;
				annotation();
				}
				}
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1216;
			unannType();
			State = 1220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==Identifier) {
				{
				State = 1217;
				identifier();
				State = 1218;
				Match(DOT);
				}
			}

			State = 1222;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(Java9Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(Context, State);
		EnterRule(_localctx, 172, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224;
			Match(THROWS);
			State = 1225;
			exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(Context, State);
		EnterRule(_localctx, 174, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			exceptionType();
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1228;
				Match(COMMA);
				State = 1229;
				exceptionType();
				}
				}
				State = 1234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_exceptionType);
		try {
			State = 1237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1235;
				classType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1236;
				typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 178, RULE_methodBody);
		try {
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1239;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1240;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(Context, State);
		EnterRule(_localctx, 180, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(Context, State);
		EnterRule(_localctx, 182, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			Match(STATIC);
			State = 1246;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 2199023255563L) != 0)) {
				{
				{
				State = 1248;
				constructorModifier();
				}
				}
				State = 1253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1254;
			constructorDeclarator();
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 1255;
				throws_();
				}
			}

			State = 1258;
			constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java9Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(Context, State);
		EnterRule(_localctx, 186, RULE_constructorModifier);
		try {
			State = 1264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1261;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1262;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1263;
				Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(Context, State);
		EnterRule(_localctx, 188, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1266;
				typeParameters();
				}
			}

			State = 1269;
			simpleTypeName();
			State = 1270;
			Match(LPAREN);
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229494298176274728L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1271;
				formalParameterList();
				}
			}

			State = 1274;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 190, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(Context, State);
		EnterRule(_localctx, 192, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			Match(LBRACE);
			State = 1280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1279;
				explicitConstructorInvocation();
				}
				break;
			}
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2623346856747635906L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034928223L) != 0)) {
				{
				State = 1282;
				blockStatements();
				}
			}

			State = 1285;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 194, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1287;
					typeArguments();
					}
				}

				State = 1290;
				Match(THIS);
				State = 1291;
				Match(LPAREN);
				State = 1293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 1292;
					argumentList();
					}
				}

				State = 1295;
				Match(RPAREN);
				State = 1296;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1297;
					typeArguments();
					}
				}

				State = 1300;
				Match(SUPER);
				State = 1301;
				Match(LPAREN);
				State = 1303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 1302;
					argumentList();
					}
				}

				State = 1305;
				Match(RPAREN);
				State = 1306;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1307;
				expressionName();
				State = 1308;
				Match(DOT);
				State = 1310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1309;
					typeArguments();
					}
				}

				State = 1312;
				Match(SUPER);
				State = 1313;
				Match(LPAREN);
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 1314;
					argumentList();
					}
				}

				State = 1317;
				Match(RPAREN);
				State = 1318;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1320;
				primary();
				State = 1321;
				Match(DOT);
				State = 1323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1322;
					typeArguments();
					}
				}

				State = 1325;
				Match(SUPER);
				State = 1326;
				Match(LPAREN);
				State = 1328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 1327;
					argumentList();
					}
				}

				State = 1330;
				Match(RPAREN);
				State = 1331;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(Java9Parser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54288387145730L) != 0) || _la==AT) {
				{
				{
				State = 1335;
				classModifier();
				}
				}
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1341;
			Match(ENUM);
			State = 1342;
			identifier();
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1343;
				superinterfaces();
				}
			}

			State = 1346;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java9Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 198, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			Match(LBRACE);
			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==AT || _la==Identifier) {
				{
				State = 1349;
				enumConstantList();
				}
			}

			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1352;
				Match(COMMA);
				}
			}

			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1355;
				enumBodyDeclarations();
				}
			}

			State = 1358;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(Context, State);
		EnterRule(_localctx, 200, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			enumConstant();
			State = 1365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1361;
					Match(COMMA);
					State = 1362;
					enumConstant();
					}
					} 
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 202, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1368;
				enumConstantModifier();
				}
				}
				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1374;
			identifier();
			State = 1380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1375;
				Match(LPAREN);
				State = 1377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 1376;
					argumentList();
					}
				}

				State = 1379;
				Match(RPAREN);
				}
			}

			State = 1383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 1382;
				classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(Context, State);
		EnterRule(_localctx, 204, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 206, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			Match(SEMI);
			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1671182829853819690L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 35184372093201L) != 0)) {
				{
				{
				State = 1388;
				classBodyDeclaration();
				}
				}
				State = 1393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_interfaceDeclaration);
		try {
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1394;
				normalInterfaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1395;
				annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Java9Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54288386621442L) != 0) || _la==AT) {
				{
				{
				State = 1398;
				interfaceModifier();
				}
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1404;
			Match(INTERFACE);
			State = 1405;
			identifier();
			State = 1407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1406;
				typeParameters();
				}
			}

			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1409;
				extendsInterfaces();
				}
			}

			State = 1412;
			interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(Java9Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java9Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java9Parser.STRICTFP, 0); }
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_interfaceModifier);
		try {
			State = 1421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1414;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1415;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1416;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1417;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1418;
				Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1419;
				Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1420;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(Java9Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(Context, State);
		EnterRule(_localctx, 214, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			Match(EXTENDS);
			State = 1424;
			interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 216, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			Match(LBRACE);
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1373663775175693098L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 2199023255825L) != 0)) {
				{
				{
				State = 1427;
				interfaceMemberDeclaration();
				}
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1433;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_interfaceMemberDeclaration);
		try {
			State = 1440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435;
				constantDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1436;
				interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1437;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1438;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1439;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 220, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & 576460752339075073L) != 0)) {
				{
				{
				State = 1442;
				constantModifier();
				}
				}
				State = 1447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1448;
			unannType();
			State = 1449;
			variableDeclaratorList();
			State = 1450;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(Java9Parser.FINAL, 0); }
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(Context, State);
		EnterRule(_localctx, 222, RULE_constantModifier);
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1452;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1453;
				Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1454;
				Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1455;
				Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54013508718594L) != 0) || _la==AT) {
				{
				{
				State = 1458;
				interfaceMethodModifier();
				}
				}
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1464;
			methodHeader();
			State = 1465;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Java9Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java9Parser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java9Parser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(Java9Parser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(Java9Parser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 226, RULE_interfaceMethodModifier);
		try {
			State = 1474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1468;
				Match(PUBLIC);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1469;
				Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1470;
				Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1471;
				Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1472;
				Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1473;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java9Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Java9Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 228, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1476;
					interfaceModifier();
					}
					} 
				}
				State = 1481;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			State = 1482;
			Match(AT);
			State = 1483;
			Match(INTERFACE);
			State = 1484;
			identifier();
			State = 1485;
			annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 230, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487;
			Match(LBRACE);
			State = 1491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229548587099833130L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 2199023255569L) != 0)) {
				{
				{
				State = 1488;
				annotationTypeMemberDeclaration();
				}
				}
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1494;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 232, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1496;
				annotationTypeElementDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1497;
				constantDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1498;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1499;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1500;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 234, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1503;
				annotationTypeElementModifier();
				}
				}
				State = 1508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1509;
			unannType();
			State = 1510;
			identifier();
			State = 1511;
			Match(LPAREN);
			State = 1512;
			Match(RPAREN);
			State = 1514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1513;
				dims();
				}
			}

			State = 1517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1516;
				defaultValue();
				}
			}

			State = 1519;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(Java9Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(Java9Parser.ABSTRACT, 0); }
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(Context, State);
		EnterRule(_localctx, 236, RULE_annotationTypeElementModifier);
		try {
			State = 1524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1522;
				Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1523;
				Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java9Parser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 238, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526;
			Match(DEFAULT);
			State = 1527;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 240, RULE_annotation);
		try {
			State = 1532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1529;
				normalAnnotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1530;
				markerAnnotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1531;
				singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java9Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(Context, State);
		EnterRule(_localctx, 242, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534;
			Match(AT);
			State = 1535;
			typeName();
			State = 1536;
			Match(LPAREN);
			State = 1538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==Identifier) {
				{
				State = 1537;
				elementValuePairList();
				}
			}

			State = 1540;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(Context, State);
		EnterRule(_localctx, 244, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1542;
			elementValuePair();
			State = 1547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1543;
				Match(COMMA);
				State = 1544;
				elementValuePair();
				}
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java9Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 246, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550;
			identifier();
			State = 1551;
			Match(ASSIGN);
			State = 1552;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 248, RULE_elementValue);
		try {
			State = 1557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1554;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1555;
				elementValueArrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1556;
				annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java9Parser.COMMA, 0); }
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 250, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			Match(LBRACE);
			State = 1561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401951L) != 0)) {
				{
				State = 1560;
				elementValueList();
				}
			}

			State = 1564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1563;
				Match(COMMA);
				}
			}

			State = 1566;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(Context, State);
		EnterRule(_localctx, 252, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			elementValue();
			State = 1573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1569;
					Match(COMMA);
					State = 1570;
					elementValue();
					}
					} 
				}
				State = 1575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java9Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(Context, State);
		EnterRule(_localctx, 254, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			Match(AT);
			State = 1577;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Java9Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(Context, State);
		EnterRule(_localctx, 256, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			Match(AT);
			State = 1580;
			typeName();
			State = 1581;
			Match(LPAREN);
			State = 1582;
			elementValue();
			State = 1583;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Java9Parser.COMMA, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 258, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585;
			Match(LBRACE);
			State = 1587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401951L) != 0)) {
				{
				State = 1586;
				variableInitializerList();
				}
			}

			State = 1590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1589;
				Match(COMMA);
				}
			}

			State = 1592;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(Context, State);
		EnterRule(_localctx, 260, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594;
			variableInitializer();
			State = 1599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1595;
					Match(COMMA);
					State = 1596;
					variableInitializer();
					}
					} 
				}
				State = 1601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 262, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			Match(LBRACE);
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2623346856747635906L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034928223L) != 0)) {
				{
				State = 1603;
				blockStatements();
				}
			}

			State = 1606;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(Context, State);
		EnterRule(_localctx, 264, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1608;
				blockStatement();
				}
				}
				State = 1611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -2623346856747635906L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034928223L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_blockStatement);
		try {
			State = 1616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1613;
				localVariableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614;
				classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1615;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			localVariableDeclaration();
			State = 1619;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 270, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1621;
				variableModifier();
				}
				}
				State = 1626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1627;
			unannType();
			State = 1628;
			variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_statement);
		try {
			State = 1636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1630;
				statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1631;
				labeledStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1632;
				ifThenStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1633;
				ifThenElseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1634;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1635;
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 274, RULE_statementNoShortIf);
		try {
			State = 1643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1638;
				statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1639;
				labeledStatementNoShortIf();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1640;
				ifThenElseStatementNoShortIf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1641;
				whileStatementNoShortIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1642;
				forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(Context, State);
		EnterRule(_localctx, 276, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1645;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1646;
				emptyStatement_();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case NEW:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case SUPER:
			case THIS:
			case TO:
			case USES:
			case VOID:
			case WITH:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case AT:
			case INC:
			case DEC:
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1647;
				expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1648;
				assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1649;
				switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1650;
				doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1651;
				breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1652;
				continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1653;
				returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1654;
				synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1655;
				throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1656;
				tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 278, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 280, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			identifier();
			State = 1662;
			Match(COLON);
			State = 1663;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 282, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			identifier();
			State = 1666;
			Match(COLON);
			State = 1667;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 284, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			statementExpression();
			State = 1670;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_statementExpression);
		try {
			State = 1679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1672;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1673;
				preIncrementExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1674;
				preDecrementExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1675;
				postIncrementExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1676;
				postDecrementExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1677;
				methodInvocation();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1678;
				classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java9Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(Context, State);
		EnterRule(_localctx, 288, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681;
			Match(IF);
			State = 1682;
			Match(LPAREN);
			State = 1683;
			expression();
			State = 1684;
			Match(RPAREN);
			State = 1685;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java9Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Java9Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(Context, State);
		EnterRule(_localctx, 290, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687;
			Match(IF);
			State = 1688;
			Match(LPAREN);
			State = 1689;
			expression();
			State = 1690;
			Match(RPAREN);
			State = 1691;
			statementNoShortIf();
			State = 1692;
			Match(ELSE);
			State = 1693;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Java9Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Java9Parser.ELSE, 0); }
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 292, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			Match(IF);
			State = 1696;
			Match(LPAREN);
			State = 1697;
			expression();
			State = 1698;
			Match(RPAREN);
			State = 1699;
			statementNoShortIf();
			State = 1700;
			Match(ELSE);
			State = 1701;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(Java9Parser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 294, RULE_assertStatement);
		try {
			State = 1713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1703;
				Match(ASSERT);
				State = 1704;
				expression();
				State = 1705;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1707;
				Match(ASSERT);
				State = 1708;
				expression();
				State = 1709;
				Match(COLON);
				State = 1710;
				expression();
				State = 1711;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(Java9Parser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			Match(SWITCH);
			State = 1716;
			Match(LPAREN);
			State = 1717;
			expression();
			State = 1718;
			Match(RPAREN);
			State = 1719;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(Java9Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(Java9Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 298, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			Match(LBRACE);
			State = 1725;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1722;
					switchBlockStatementGroup();
					}
					} 
				}
				State = 1727;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1728;
				switchLabel();
				}
				}
				State = 1733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1734;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 300, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			switchLabels();
			State = 1737;
			blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(Context, State);
		EnterRule(_localctx, 302, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1739;
				switchLabel();
				}
				}
				State = 1742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Java9Parser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Java9Parser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 304, RULE_switchLabel);
		try {
			State = 1754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1744;
				Match(CASE);
				State = 1745;
				constantExpression();
				State = 1746;
				Match(COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1748;
				Match(CASE);
				State = 1749;
				enumConstantName();
				State = 1750;
				Match(COLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1752;
				Match(DEFAULT);
				State = 1753;
				Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(Context, State);
		EnterRule(_localctx, 306, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java9Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			Match(WHILE);
			State = 1759;
			Match(LPAREN);
			State = 1760;
			expression();
			State = 1761;
			Match(RPAREN);
			State = 1762;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java9Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 310, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764;
			Match(WHILE);
			State = 1765;
			Match(LPAREN);
			State = 1766;
			expression();
			State = 1767;
			Match(RPAREN);
			State = 1768;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Java9Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Java9Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 312, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770;
			Match(DO);
			State = 1771;
			statement();
			State = 1772;
			Match(WHILE);
			State = 1773;
			Match(LPAREN);
			State = 1774;
			expression();
			State = 1775;
			Match(RPAREN);
			State = 1776;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 314, RULE_forStatement);
		try {
			State = 1780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1778;
				basicForStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1779;
				enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 316, RULE_forStatementNoShortIf);
		try {
			State = 1784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1782;
				basicForStatementNoShortIf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1783;
				enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java9Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java9Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java9Parser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			Match(FOR);
			State = 1787;
			Match(LPAREN);
			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204887723736L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034927135L) != 0)) {
				{
				State = 1788;
				forInit();
				}
			}

			State = 1791;
			Match(SEMI);
			State = 1793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
				{
				State = 1792;
				expression();
				}
			}

			State = 1795;
			Match(SEMI);
			State = 1797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034927135L) != 0)) {
				{
				State = 1796;
				forUpdate();
				}
			}

			State = 1799;
			Match(RPAREN);
			State = 1800;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java9Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java9Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java9Parser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 320, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802;
			Match(FOR);
			State = 1803;
			Match(LPAREN);
			State = 1805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204887723736L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034927135L) != 0)) {
				{
				State = 1804;
				forInit();
				}
			}

			State = 1807;
			Match(SEMI);
			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
				{
				State = 1808;
				expression();
				}
			}

			State = 1811;
			Match(SEMI);
			State = 1813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251803034927135L) != 0)) {
				{
				State = 1812;
				forUpdate();
				}
			}

			State = 1815;
			Match(RPAREN);
			State = 1816;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 322, RULE_forInit);
		try {
			State = 1820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1818;
				statementExpressionList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1819;
				localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 324, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822;
			statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(Context, State);
		EnterRule(_localctx, 326, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824;
			statementExpression();
			State = 1829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1825;
				Match(COMMA);
				State = 1826;
				statementExpression();
				}
				}
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java9Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832;
			Match(FOR);
			State = 1833;
			Match(LPAREN);
			State = 1837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1834;
				variableModifier();
				}
				}
				State = 1839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1840;
			unannType();
			State = 1841;
			variableDeclaratorId();
			State = 1842;
			Match(COLON);
			State = 1843;
			expression();
			State = 1844;
			Match(RPAREN);
			State = 1845;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Java9Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 330, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847;
			Match(FOR);
			State = 1848;
			Match(LPAREN);
			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1849;
				variableModifier();
				}
				}
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1855;
			unannType();
			State = 1856;
			variableDeclaratorId();
			State = 1857;
			Match(COLON);
			State = 1858;
			expression();
			State = 1859;
			Match(RPAREN);
			State = 1860;
			statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Java9Parser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 332, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			Match(BREAK);
			State = 1864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==Identifier) {
				{
				State = 1863;
				identifier();
				}
			}

			State = 1866;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Java9Parser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 334, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868;
			Match(CONTINUE);
			State = 1870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==Identifier) {
				{
				State = 1869;
				identifier();
				}
			}

			State = 1872;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Java9Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			Match(RETURN);
			State = 1876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
				{
				State = 1875;
				expression();
				}
			}

			State = 1878;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(Java9Parser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 338, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880;
			Match(THROW);
			State = 1881;
			expression();
			State = 1882;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(Java9Parser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(Context, State);
		EnterRule(_localctx, 340, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884;
			Match(SYNCHRONIZED);
			State = 1885;
			Match(LPAREN);
			State = 1886;
			expression();
			State = 1887;
			Match(RPAREN);
			State = 1888;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Java9Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 342, RULE_tryStatement);
		int _la;
		try {
			State = 1902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1890;
				Match(TRY);
				State = 1891;
				block();
				State = 1892;
				catches();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1894;
				Match(TRY);
				State = 1895;
				block();
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1896;
					catches();
					}
				}

				State = 1899;
				finally_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1901;
				tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(Context, State);
		EnterRule(_localctx, 344, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1904;
				catchClause();
				}
				}
				State = 1907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CATCH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(Java9Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 346, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909;
			Match(CATCH);
			State = 1910;
			Match(LPAREN);
			State = 1911;
			catchFormalParameter();
			State = 1912;
			Match(RPAREN);
			State = 1913;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(Context, State);
		EnterRule(_localctx, 348, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1915;
				variableModifier();
				}
				}
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1921;
			catchType();
			State = 1922;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITOR() { return GetTokens(Java9Parser.BITOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR(int i) {
			return GetToken(Java9Parser.BITOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 350, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924;
			unannClassType();
			State = 1929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 1925;
				Match(BITOR);
				State = 1926;
				classType();
				}
				}
				State = 1931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(Java9Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(Context, State);
		EnterRule(_localctx, 352, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932;
			Match(FINALLY);
			State = 1933;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Java9Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(Context, State);
		EnterRule(_localctx, 354, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1935;
			Match(TRY);
			State = 1936;
			resourceSpecification();
			State = 1937;
			block();
			State = 1939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 1938;
				catches();
				}
			}

			State = 1942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 1941;
				finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Java9Parser.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 356, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			Match(LPAREN);
			State = 1945;
			resourceList();
			State = 1947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1946;
				Match(SEMI);
				}
			}

			State = 1949;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(Java9Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(Java9Parser.SEMI, i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(Context, State);
		EnterRule(_localctx, 358, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951;
			resource();
			State = 1956;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1952;
					Match(SEMI);
					State = 1953;
					resource();
					}
					} 
				}
				State = 1958;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java9Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 360, RULE_resource);
		int _la;
		try {
			State = 1971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1959;
					variableModifier();
					}
					}
					State = 1964;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1965;
				unannType();
				State = 1966;
				variableDeclaratorId();
				State = 1967;
				Match(ASSIGN);
				State = 1968;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970;
				variableAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterVariableAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitVariableAccess(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 362, RULE_variableAccess);
		try {
			State = 1975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1973;
				expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1974;
				fieldAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 364, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 1977;
				primaryNoNewArray_lfno_primary();
				}
				break;
			case 2:
				{
				State = 1978;
				arrayCreationExpression();
				}
				break;
			}
			State = 1984;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1981;
					primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLiteralContext classLiteral() {
			return GetRuleContext<ClassLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(Context, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray);
		try {
			State = 2003;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1987;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1988;
				classLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1989;
				Match(THIS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1990;
				typeName();
				State = 1991;
				Match(DOT);
				State = 1992;
				Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1994;
				Match(LPAREN);
				State = 1995;
				expression();
				State = 1996;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1998;
				classInstanceCreationExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1999;
				fieldAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2000;
				arrayAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2001;
				methodInvocation();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2002;
				methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(Context, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java9Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java9Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(Context, State);
		EnterRule(_localctx, 370, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 2035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2008;
				typeName();
				State = 2013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2009;
					Match(LBRACK);
					State = 2010;
					Match(RBRACK);
					}
					}
					State = 2015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2016;
				Match(DOT);
				State = 2017;
				Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2019;
				Match(VOID);
				State = 2020;
				Match(DOT);
				State = 2021;
				Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2022;
				Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2023;
				typeName();
				State = 2024;
				Match(DOT);
				State = 2025;
				Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2027;
				Match(LPAREN);
				State = 2028;
				expression();
				State = 2029;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2031;
				classInstanceCreationExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2032;
				fieldAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2033;
				methodInvocation();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2034;
				methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(Context, State);
		EnterRule(_localctx, 372, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 2042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2037;
				classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2038;
				fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2039;
				arrayAccess_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2040;
				methodInvocation_lf_primary();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2041;
				methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 374, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 376, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 2050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2046;
				classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2047;
				fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2048;
				methodInvocation_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2049;
				methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java9Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java9Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 378, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 2092;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2052;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2053;
				typeName();
				State = 2058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2054;
					Match(LBRACK);
					State = 2055;
					Match(RBRACK);
					}
					}
					State = 2060;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2061;
				Match(DOT);
				State = 2062;
				Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2064;
				unannPrimitiveType();
				State = 2069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2065;
					Match(LBRACK);
					State = 2066;
					Match(RBRACK);
					}
					}
					State = 2071;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2072;
				Match(DOT);
				State = 2073;
				Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2075;
				Match(VOID);
				State = 2076;
				Match(DOT);
				State = 2077;
				Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2078;
				Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2079;
				typeName();
				State = 2080;
				Match(DOT);
				State = 2081;
				Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2083;
				Match(LPAREN);
				State = 2084;
				expression();
				State = 2085;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2087;
				classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2088;
				fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2089;
				arrayAccess_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2090;
				methodInvocation_lfno_primary();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2091;
				methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 380, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java9Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java9Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(Java9Parser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 382, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2096;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2097;
				typeName();
				State = 2102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2098;
					Match(LBRACK);
					State = 2099;
					Match(RBRACK);
					}
					}
					State = 2104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2105;
				Match(DOT);
				State = 2106;
				Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2108;
				unannPrimitiveType();
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2109;
					Match(LBRACK);
					State = 2110;
					Match(RBRACK);
					}
					}
					State = 2115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2116;
				Match(DOT);
				State = 2117;
				Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2119;
				Match(VOID);
				State = 2120;
				Match(DOT);
				State = 2121;
				Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2122;
				Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2123;
				typeName();
				State = 2124;
				Match(DOT);
				State = 2125;
				Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2127;
				Match(LPAREN);
				State = 2128;
				expression();
				State = 2129;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2131;
				classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2132;
				fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2133;
				methodInvocation_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2134;
				methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Java9Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Java9Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Java9Parser.VOID, 0); }
		public ClassLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ClassLiteralContext classLiteral() {
		ClassLiteralContext _localctx = new ClassLiteralContext(Context, State);
		EnterRule(_localctx, 384, RULE_classLiteral);
		int _la;
		try {
			State = 2154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case TO:
			case USES:
			case WITH:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2140;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXPORTS:
				case MODULE:
				case OPEN:
				case OPERNS:
				case PROVIDES:
				case REQUIRES:
				case TO:
				case USES:
				case WITH:
				case Identifier:
					{
					State = 2137;
					typeName();
					}
					break;
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					State = 2138;
					numericType();
					}
					break;
				case BOOLEAN:
					{
					State = 2139;
					Match(BOOLEAN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2142;
					Match(LBRACK);
					State = 2143;
					Match(RBRACK);
					}
					}
					State = 2148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2149;
				Match(DOT);
				State = 2150;
				Match(CLASS);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2151;
				Match(VOID);
				State = 2152;
				Match(DOT);
				State = 2153;
				Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2156;
				Match(NEW);
				State = 2158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2157;
					typeArguments();
					}
				}

				State = 2163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2160;
					annotation();
					}
					}
					State = 2165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2166;
				identifier();
				State = 2177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2167;
					Match(DOT);
					State = 2171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2168;
						annotation();
						}
						}
						State = 2173;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2174;
					identifier();
					}
					}
					State = 2179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2180;
					typeArgumentsOrDiamond();
					}
				}

				State = 2183;
				Match(LPAREN);
				State = 2185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2184;
					argumentList();
					}
				}

				State = 2187;
				Match(RPAREN);
				State = 2189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2188;
					classBody();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2191;
				expressionName();
				State = 2192;
				Match(DOT);
				State = 2193;
				Match(NEW);
				State = 2195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2194;
					typeArguments();
					}
				}

				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2197;
					annotation();
					}
					}
					State = 2202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2203;
				identifier();
				State = 2205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2204;
					typeArgumentsOrDiamond();
					}
				}

				State = 2207;
				Match(LPAREN);
				State = 2209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2208;
					argumentList();
					}
				}

				State = 2211;
				Match(RPAREN);
				State = 2213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2212;
					classBody();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2215;
				primary();
				State = 2216;
				Match(DOT);
				State = 2217;
				Match(NEW);
				State = 2219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2218;
					typeArguments();
					}
				}

				State = 2224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2221;
					annotation();
					}
					}
					State = 2226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2227;
				identifier();
				State = 2229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2228;
					typeArgumentsOrDiamond();
					}
				}

				State = 2231;
				Match(LPAREN);
				State = 2233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2232;
					argumentList();
					}
				}

				State = 2235;
				Match(RPAREN);
				State = 2237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2236;
					classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(Context, State);
		EnterRule(_localctx, 388, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2241;
			Match(DOT);
			State = 2242;
			Match(NEW);
			State = 2244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2243;
				typeArguments();
				}
			}

			State = 2249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2246;
				annotation();
				}
				}
				State = 2251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2252;
			identifier();
			State = 2254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2253;
				typeArgumentsOrDiamond();
				}
			}

			State = 2256;
			Match(LPAREN);
			State = 2258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
				{
				State = 2257;
				argumentList();
				}
			}

			State = 2260;
			Match(RPAREN);
			State = 2262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 2261;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 390, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2264;
				Match(NEW);
				State = 2266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2265;
					typeArguments();
					}
				}

				State = 2271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2268;
					annotation();
					}
					}
					State = 2273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2274;
				identifier();
				State = 2285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2275;
					Match(DOT);
					State = 2279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2276;
						annotation();
						}
						}
						State = 2281;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2282;
					identifier();
					}
					}
					State = 2287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2288;
					typeArgumentsOrDiamond();
					}
				}

				State = 2291;
				Match(LPAREN);
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2292;
					argumentList();
					}
				}

				State = 2295;
				Match(RPAREN);
				State = 2297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 2296;
					classBody();
					}
					break;
				}
				}
				break;
			case EXPORTS:
			case MODULE:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case TO:
			case USES:
			case WITH:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2299;
				expressionName();
				State = 2300;
				Match(DOT);
				State = 2301;
				Match(NEW);
				State = 2303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2302;
					typeArguments();
					}
				}

				State = 2308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2305;
					annotation();
					}
					}
					State = 2310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2311;
				identifier();
				State = 2313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2312;
					typeArgumentsOrDiamond();
					}
				}

				State = 2315;
				Match(LPAREN);
				State = 2317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2316;
					argumentList();
					}
				}

				State = 2319;
				Match(RPAREN);
				State = 2321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2320;
					classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java9Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java9Parser.GT, 0); }
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 392, RULE_typeArgumentsOrDiamond);
		try {
			State = 2328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2325;
				typeArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2326;
				Match(LT);
				State = 2327;
				Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 394, RULE_fieldAccess);
		try {
			State = 2343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2330;
				primary();
				State = 2331;
				Match(DOT);
				State = 2332;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2334;
				Match(SUPER);
				State = 2335;
				Match(DOT);
				State = 2336;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2337;
				typeName();
				State = 2338;
				Match(DOT);
				State = 2339;
				Match(SUPER);
				State = 2340;
				Match(DOT);
				State = 2341;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 396, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			Match(DOT);
			State = 2346;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 398, RULE_fieldAccess_lfno_primary);
		try {
			State = 2357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348;
				Match(SUPER);
				State = 2349;
				Match(DOT);
				State = 2350;
				identifier();
				}
				break;
			case EXPORTS:
			case MODULE:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case TO:
			case USES:
			case WITH:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2351;
				typeName();
				State = 2352;
				Match(DOT);
				State = 2353;
				Match(SUPER);
				State = 2354;
				Match(DOT);
				State = 2355;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 400, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				{
				State = 2359;
				expressionName();
				State = 2360;
				Match(LBRACK);
				State = 2361;
				expression();
				State = 2362;
				Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2364;
				primaryNoNewArray_lfno_arrayAccess();
				State = 2365;
				Match(LBRACK);
				State = 2366;
				expression();
				State = 2367;
				Match(RBRACK);
				}
				break;
			}
			State = 2378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 2371;
				primaryNoNewArray_lf_arrayAccess();
				State = 2372;
				Match(LBRACK);
				State = 2373;
				expression();
				State = 2374;
				Match(RBRACK);
				}
				}
				State = 2380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 402, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2381;
			primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2382;
			Match(LBRACK);
			State = 2383;
			expression();
			State = 2384;
			Match(RBRACK);
			}
			State = 2393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2386;
					primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2387;
					Match(LBRACK);
					State = 2388;
					expression();
					State = 2389;
					Match(RBRACK);
					}
					} 
				}
				State = 2395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(Java9Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(Java9Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(Java9Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(Java9Parser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 404, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 2396;
				expressionName();
				State = 2397;
				Match(LBRACK);
				State = 2398;
				expression();
				State = 2399;
				Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2401;
				primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2402;
				Match(LBRACK);
				State = 2403;
				expression();
				State = 2404;
				Match(RBRACK);
				}
				break;
			}
			State = 2415;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2408;
					primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2409;
					Match(LBRACK);
					State = 2410;
					expression();
					State = 2411;
					Match(RBRACK);
					}
					} 
				}
				State = 2417;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 406, RULE_methodInvocation);
		int _la;
		try {
			State = 2487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2418;
				methodName();
				State = 2419;
				Match(LPAREN);
				State = 2421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2420;
					argumentList();
					}
				}

				State = 2423;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2425;
				typeName();
				State = 2426;
				Match(DOT);
				State = 2428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2427;
					typeArguments();
					}
				}

				State = 2430;
				identifier();
				State = 2431;
				Match(LPAREN);
				State = 2433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2432;
					argumentList();
					}
				}

				State = 2435;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2437;
				expressionName();
				State = 2438;
				Match(DOT);
				State = 2440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2439;
					typeArguments();
					}
				}

				State = 2442;
				identifier();
				State = 2443;
				Match(LPAREN);
				State = 2445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2444;
					argumentList();
					}
				}

				State = 2447;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2449;
				primary();
				State = 2450;
				Match(DOT);
				State = 2452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2451;
					typeArguments();
					}
				}

				State = 2454;
				identifier();
				State = 2455;
				Match(LPAREN);
				State = 2457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2456;
					argumentList();
					}
				}

				State = 2459;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2461;
				Match(SUPER);
				State = 2462;
				Match(DOT);
				State = 2464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2463;
					typeArguments();
					}
				}

				State = 2466;
				identifier();
				State = 2467;
				Match(LPAREN);
				State = 2469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2468;
					argumentList();
					}
				}

				State = 2471;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2473;
				typeName();
				State = 2474;
				Match(DOT);
				State = 2475;
				Match(SUPER);
				State = 2476;
				Match(DOT);
				State = 2478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2477;
					typeArguments();
					}
				}

				State = 2480;
				identifier();
				State = 2481;
				Match(LPAREN);
				State = 2483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2482;
					argumentList();
					}
				}

				State = 2485;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(Context, State);
		EnterRule(_localctx, 408, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2489;
			Match(DOT);
			State = 2491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2490;
				typeArguments();
				}
			}

			State = 2493;
			identifier();
			State = 2494;
			Match(LPAREN);
			State = 2496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
				{
				State = 2495;
				argumentList();
				}
			}

			State = 2498;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Java9Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Java9Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 410, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2500;
				methodName();
				State = 2501;
				Match(LPAREN);
				State = 2503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2502;
					argumentList();
					}
				}

				State = 2505;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2507;
				typeName();
				State = 2508;
				Match(DOT);
				State = 2510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2509;
					typeArguments();
					}
				}

				State = 2512;
				identifier();
				State = 2513;
				Match(LPAREN);
				State = 2515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2514;
					argumentList();
					}
				}

				State = 2517;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2519;
				expressionName();
				State = 2520;
				Match(DOT);
				State = 2522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2521;
					typeArguments();
					}
				}

				State = 2524;
				identifier();
				State = 2525;
				Match(LPAREN);
				State = 2527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2526;
					argumentList();
					}
				}

				State = 2529;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2531;
				Match(SUPER);
				State = 2532;
				Match(DOT);
				State = 2534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2533;
					typeArguments();
					}
				}

				State = 2536;
				identifier();
				State = 2537;
				Match(LPAREN);
				State = 2539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2538;
					argumentList();
					}
				}

				State = 2541;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2543;
				typeName();
				State = 2544;
				Match(DOT);
				State = 2545;
				Match(SUPER);
				State = 2546;
				Match(DOT);
				State = 2548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2547;
					typeArguments();
					}
				}

				State = 2550;
				identifier();
				State = 2551;
				Match(LPAREN);
				State = 2553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3237443204888248024L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251815921401887L) != 0)) {
					{
					State = 2552;
					argumentList();
					}
				}

				State = 2555;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 412, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2559;
			expression();
			State = 2564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2560;
				Match(COMMA);
				State = 2561;
				expression();
				}
				}
				State = 2566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java9Parser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(Context, State);
		EnterRule(_localctx, 414, RULE_methodReference);
		int _la;
		try {
			State = 2614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2567;
				expressionName();
				State = 2568;
				Match(COLONCOLON);
				State = 2570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2569;
					typeArguments();
					}
				}

				State = 2572;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2574;
				referenceType();
				State = 2575;
				Match(COLONCOLON);
				State = 2577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2576;
					typeArguments();
					}
				}

				State = 2579;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2581;
				primary();
				State = 2582;
				Match(COLONCOLON);
				State = 2584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2583;
					typeArguments();
					}
				}

				State = 2586;
				identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2588;
				Match(SUPER);
				State = 2589;
				Match(COLONCOLON);
				State = 2591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2590;
					typeArguments();
					}
				}

				State = 2593;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2594;
				typeName();
				State = 2595;
				Match(DOT);
				State = 2596;
				Match(SUPER);
				State = 2597;
				Match(COLONCOLON);
				State = 2599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2598;
					typeArguments();
					}
				}

				State = 2601;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2603;
				classType();
				State = 2604;
				Match(COLONCOLON);
				State = 2606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2605;
					typeArguments();
					}
				}

				State = 2608;
				Match(NEW);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2610;
				arrayType();
				State = 2611;
				Match(COLONCOLON);
				State = 2612;
				Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java9Parser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(Context, State);
		EnterRule(_localctx, 416, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2616;
			Match(COLONCOLON);
			State = 2618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2617;
				typeArguments();
				}
			}

			State = 2620;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(Java9Parser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(Java9Parser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Java9Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 418, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2622;
				expressionName();
				State = 2623;
				Match(COLONCOLON);
				State = 2625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2624;
					typeArguments();
					}
				}

				State = 2627;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2629;
				referenceType();
				State = 2630;
				Match(COLONCOLON);
				State = 2632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2631;
					typeArguments();
					}
				}

				State = 2634;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2636;
				Match(SUPER);
				State = 2637;
				Match(COLONCOLON);
				State = 2639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2638;
					typeArguments();
					}
				}

				State = 2641;
				identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2642;
				typeName();
				State = 2643;
				Match(DOT);
				State = 2644;
				Match(SUPER);
				State = 2645;
				Match(COLONCOLON);
				State = 2647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2646;
					typeArguments();
					}
				}

				State = 2649;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2651;
				classType();
				State = 2652;
				Match(COLONCOLON);
				State = 2654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2653;
					typeArguments();
					}
				}

				State = 2656;
				Match(NEW);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2658;
				arrayType();
				State = 2659;
				Match(COLONCOLON);
				State = 2660;
				Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(Java9Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(Context, State);
		EnterRule(_localctx, 420, RULE_arrayCreationExpression);
		try {
			State = 2686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2664;
				Match(NEW);
				State = 2665;
				primitiveType();
				State = 2666;
				dimExprs();
				State = 2668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2667;
					dims();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2670;
				Match(NEW);
				State = 2671;
				classOrInterfaceType();
				State = 2672;
				dimExprs();
				State = 2674;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 2673;
					dims();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2676;
				Match(NEW);
				State = 2677;
				primitiveType();
				State = 2678;
				dims();
				State = 2679;
				arrayInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2681;
				Match(NEW);
				State = 2682;
				classOrInterfaceType();
				State = 2683;
				dims();
				State = 2684;
				arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(Context, State);
		EnterRule(_localctx, 422, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2689;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2688;
					dimExpr();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2691;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Java9Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Java9Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(Context, State);
		EnterRule(_localctx, 424, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2693;
				annotation();
				}
				}
				State = 2698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2699;
			Match(LBRACK);
			State = 2700;
			expression();
			State = 2701;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 426, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2703;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 428, RULE_expression);
		try {
			State = 2707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2705;
				lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2706;
				assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(Java9Parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 430, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2709;
			lambdaParameters();
			State = 2710;
			Match(ARROW);
			State = 2711;
			lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 432, RULE_lambdaParameters);
		int _la;
		try {
			State = 2723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2713;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2714;
				Match(LPAREN);
				State = 2716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229494298176274728L) != 0) || _la==AT || _la==Identifier) {
					{
					State = 2715;
					formalParameterList();
					}
				}

				State = 2718;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2719;
				Match(LPAREN);
				State = 2720;
				inferredFormalParameterList();
				State = 2721;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Java9Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Java9Parser.COMMA, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(Context, State);
		EnterRule(_localctx, 434, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2725;
			identifier();
			State = 2730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2726;
				Match(COMMA);
				State = 2727;
				identifier();
				}
				}
				State = 2732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 436, RULE_lambdaBody);
		try {
			State = 2735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case NEW:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case SUPER:
			case THIS:
			case TO:
			case USES:
			case VOID:
			case WITH:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2733;
				expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2734;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 438, RULE_assignmentExpression);
		try {
			State = 2739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2737;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2738;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 440, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2741;
			leftHandSide();
			State = 2742;
			assignmentOperator();
			State = 2743;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 442, RULE_leftHandSide);
		try {
			State = 2748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2745;
				expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2746;
				fieldAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2747;
				arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Java9Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(Java9Parser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(Java9Parser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(Java9Parser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(Java9Parser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(Java9Parser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(Java9Parser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(Java9Parser.RSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URSHIFT_ASSIGN() { return GetToken(Java9Parser.URSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(Java9Parser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(Java9Parser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(Java9Parser.OR_ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 444, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 34342961153L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(Java9Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Java9Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 446, RULE_conditionalExpression);
		try {
			State = 2761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2752;
				conditionalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2753;
				conditionalOrExpression(0);
				State = 2754;
				Match(QUESTION);
				State = 2755;
				expression();
				State = 2756;
				Match(COLON);
				State = 2759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
				case 1:
					{
					State = 2757;
					conditionalExpression();
					}
					break;
				case 2:
					{
					State = 2758;
					lambdaExpression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Java9Parser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 448;
		EnterRecursionRule(_localctx, 448, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2764;
			conditionalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2771;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2766;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2767;
					Match(OR);
					State = 2768;
					conditionalAndExpression(0);
					}
					} 
				}
				State = 2773;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Java9Parser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2775;
			inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2782;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2777;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2778;
					Match(AND);
					State = 2779;
					inclusiveOrExpression(0);
					}
					} 
				}
				State = 2784;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(Java9Parser.BITOR, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 452;
		EnterRecursionRule(_localctx, 452, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2786;
			exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2788;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2789;
					Match(BITOR);
					State = 2790;
					exclusiveOrExpression(0);
					}
					} 
				}
				State = 2795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(Java9Parser.CARET, 0); }
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 454;
		EnterRecursionRule(_localctx, 454, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2797;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2804;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2799;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2800;
					Match(CARET);
					State = 2801;
					andExpression(0);
					}
					} 
				}
				State = 2806;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(Java9Parser.BITAND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 456;
		EnterRecursionRule(_localctx, 456, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2808;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2815;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2810;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2811;
					Match(BITAND);
					State = 2812;
					equalityExpression(0);
					}
					} 
				}
				State = 2817;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(Java9Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(Java9Parser.NOTEQUAL, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 458;
		EnterRecursionRule(_localctx, 458, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2819;
			relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2829;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2827;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2821;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2822;
						Match(EQUAL);
						State = 2823;
						relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2824;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2825;
						Match(NOTEQUAL);
						State = 2826;
						relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2831;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Java9Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Java9Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Java9Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Java9Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(Java9Parser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 460;
		EnterRecursionRule(_localctx, 460, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2833;
			shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2852;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2850;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2835;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2836;
						Match(LT);
						State = 2837;
						shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2838;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2839;
						Match(GT);
						State = 2840;
						shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2841;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2842;
						Match(LE);
						State = 2843;
						shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2844;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2845;
						Match(GE);
						State = 2846;
						shiftExpression(0);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2847;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2848;
						Match(INSTANCEOF);
						State = 2849;
						referenceType();
						}
						break;
					}
					} 
				}
				State = 2854;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(Java9Parser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(Java9Parser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Java9Parser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Java9Parser.GT, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 462;
		EnterRecursionRule(_localctx, 462, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2856;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2873;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2871;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2858;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2859;
						Match(LT);
						State = 2860;
						Match(LT);
						State = 2861;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2862;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2863;
						Match(GT);
						State = 2864;
						Match(GT);
						State = 2865;
						additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2866;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2867;
						Match(GT);
						State = 2868;
						Match(GT);
						State = 2869;
						Match(GT);
						State = 2870;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Java9Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Java9Parser.SUB, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 464;
		EnterRecursionRule(_localctx, 464, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2877;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2887;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2885;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2879;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2880;
						Match(ADD);
						State = 2881;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2882;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2883;
						Match(SUB);
						State = 2884;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2889;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Java9Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Java9Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Java9Parser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 466;
		EnterRecursionRule(_localctx, 466, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2891;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2904;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2902;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2893;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2894;
						Match(MUL);
						State = 2895;
						unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2896;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2897;
						Match(DIV);
						State = 2898;
						unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2899;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2900;
						Match(MOD);
						State = 2901;
						unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Java9Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Java9Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 468, RULE_unaryExpression);
		try {
			State = 2914;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2907;
				preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2908;
				preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2909;
				Match(ADD);
				State = 2910;
				unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2911;
				Match(SUB);
				State = 2912;
				unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case EXPORTS:
			case FLOAT:
			case INT:
			case LONG:
			case MODULE:
			case NEW:
			case OPEN:
			case OPERNS:
			case PROVIDES:
			case REQUIRES:
			case SHORT:
			case SUPER:
			case THIS:
			case TO:
			case USES:
			case VOID:
			case WITH:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case AT:
			case BANG:
			case TILDE:
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2913;
				unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java9Parser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 470, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2916;
			Match(INC);
			State = 2917;
			unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java9Parser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 472, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2919;
			Match(DEC);
			State = 2920;
			unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Java9Parser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(Java9Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(Context, State);
		EnterRule(_localctx, 474, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2922;
				postfixExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2923;
				Match(TILDE);
				State = 2924;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2925;
				Match(BANG);
				State = 2926;
				unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2927;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 476, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				{
				State = 2930;
				primary();
				}
				break;
			case 2:
				{
				State = 2931;
				expressionName();
				}
				break;
			}
			State = 2938;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2936;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INC:
						{
						State = 2934;
						postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 2935;
						postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java9Parser.INC, 0); }
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 478, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941;
			postfixExpression();
			State = 2942;
			Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(Java9Parser.INC, 0); }
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 480, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2944;
			Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java9Parser.DEC, 0); }
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 482, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			postfixExpression();
			State = 2947;
			Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(Java9Parser.DEC, 0); }
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 484, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2949;
			Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Java9Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Java9Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 486, RULE_castExpression);
		int _la;
		try {
			State = 2978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2951;
				Match(LPAREN);
				State = 2952;
				primitiveType();
				State = 2953;
				Match(RPAREN);
				State = 2954;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2956;
				Match(LPAREN);
				State = 2957;
				referenceType();
				State = 2961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2958;
					additionalBound();
					}
					}
					State = 2963;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2964;
				Match(RPAREN);
				State = 2965;
				unaryExpressionNotPlusMinus();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2967;
				Match(LPAREN);
				State = 2968;
				referenceType();
				State = 2972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2969;
					additionalBound();
					}
					}
					State = 2974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2975;
				Match(RPAREN);
				State = 2976;
				lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Java9Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Java9Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Java9Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(Java9Parser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(Java9Parser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDES() { return GetToken(Java9Parser.PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(Java9Parser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERNS() { return GetToken(Java9Parser.OPERNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(Java9Parser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORTS() { return GetToken(Java9Parser.EXPORTS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJava9ParserListener typedListener = listener as IJava9ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 488, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2980;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1229485500738437120L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return moduleName_sempred((ModuleNameContext)_localctx, predIndex);
		case 26: return packageName_sempred((PackageNameContext)_localctx, predIndex);
		case 28: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);
		case 31: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);
		case 224: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);
		case 225: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);
		case 226: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 227: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 228: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 229: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 230: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 231: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 232: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 233: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool moduleName_sempred(ModuleNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 3);
		case 22: return Precpred(Context, 2);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,118,2983,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,1,0,1,0,1,1,5,1,494,8,1,10,1,12,1,497,9,1,1,1,
		1,1,5,1,501,8,1,10,1,12,1,504,9,1,1,1,3,1,507,8,1,1,2,1,2,3,2,511,8,2,
		1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,520,8,5,1,6,1,6,3,6,524,8,6,1,6,1,6,5,
		6,528,8,6,10,6,12,6,531,9,6,1,7,5,7,534,8,7,10,7,12,7,537,9,7,1,7,1,7,
		3,7,541,8,7,1,7,1,7,1,7,5,7,546,8,7,10,7,12,7,549,9,7,1,7,1,7,3,7,553,
		8,7,3,7,555,8,7,1,8,1,8,5,8,559,8,8,10,8,12,8,562,9,8,1,8,1,8,3,8,566,
		8,8,1,9,5,9,569,8,9,10,9,12,9,572,9,9,1,9,1,9,3,9,576,8,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,13,5,13,585,8,13,10,13,12,13,588,9,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,601,8,14,1,15,5,15,604,
		8,15,10,15,12,15,607,9,15,1,15,1,15,1,15,5,15,612,8,15,10,15,12,15,615,
		9,15,1,15,1,15,5,15,619,8,15,10,15,12,15,622,9,15,1,16,5,16,625,8,16,10,
		16,12,16,628,9,16,1,16,1,16,3,16,632,8,16,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,5,18,641,8,18,10,18,12,18,644,9,18,3,18,646,8,18,1,19,1,19,1,19,1,
		20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,658,8,21,10,21,12,21,661,9,21,1,
		22,1,22,3,22,665,8,22,1,23,5,23,668,8,23,10,23,12,23,671,9,23,1,23,1,23,
		3,23,675,8,23,1,24,1,24,1,24,1,24,3,24,681,8,24,1,25,1,25,1,25,1,25,1,
		25,1,25,5,25,689,8,25,10,25,12,25,692,9,25,1,26,1,26,1,26,1,26,1,26,1,
		26,5,26,700,8,26,10,26,12,26,703,9,26,1,27,1,27,1,27,1,27,1,27,3,27,710,
		8,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,718,8,28,10,28,12,28,721,9,28,
		1,29,1,29,1,29,1,29,1,29,3,29,728,8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,
		31,1,31,5,31,738,8,31,10,31,12,31,741,9,31,1,32,1,32,3,32,745,8,32,1,32,
		1,32,1,33,3,33,750,8,33,1,33,5,33,753,8,33,10,33,12,33,756,9,33,1,33,5,
		33,759,8,33,10,33,12,33,762,9,33,1,33,1,33,1,34,5,34,767,8,34,10,34,12,
		34,770,9,34,1,34,1,34,1,35,5,35,775,8,35,10,35,12,35,778,9,35,1,35,1,35,
		1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,3,37,790,8,37,1,38,1,38,1,38,1,
		38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,819,8,42,1,43,5,43,
		822,8,43,10,43,12,43,825,9,43,1,43,3,43,828,8,43,1,43,1,43,1,43,1,43,5,
		43,834,8,43,10,43,12,43,837,9,43,1,43,1,43,1,44,1,44,5,44,843,8,44,10,
		44,12,44,846,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,857,
		8,44,10,44,12,44,860,9,44,3,44,862,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,5,44,872,8,44,10,44,12,44,875,9,44,3,44,877,8,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,891,8,44,10,44,12,
		44,894,9,44,1,44,1,44,3,44,898,8,44,1,45,1,45,1,46,1,46,3,46,904,8,46,
		1,47,5,47,907,8,47,10,47,12,47,910,9,47,1,47,1,47,1,47,3,47,915,8,47,1,
		47,3,47,918,8,47,1,47,3,47,921,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,3,48,933,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,942,
		8,50,10,50,12,50,945,9,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,
		5,53,956,8,53,10,53,12,53,959,9,53,1,54,1,54,5,54,963,8,54,10,54,12,54,
		966,9,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,974,8,55,1,56,1,56,1,56,1,
		56,1,56,3,56,981,8,56,1,57,5,57,984,8,57,10,57,12,57,987,9,57,1,57,1,57,
		1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1001,8,58,1,59,
		1,59,1,59,5,59,1006,8,59,10,59,12,59,1009,9,59,1,60,1,60,1,60,3,60,1014,
		8,60,1,61,1,61,3,61,1018,8,61,1,62,1,62,3,62,1022,8,62,1,63,1,63,3,63,
		1026,8,63,1,64,1,64,3,64,1030,8,64,1,65,1,65,1,65,3,65,1035,8,65,1,66,
		1,66,3,66,1039,8,66,1,66,1,66,5,66,1043,8,66,10,66,12,66,1046,9,66,1,67,
		1,67,3,67,1050,8,67,1,67,1,67,1,67,5,67,1055,8,67,10,67,12,67,1058,9,67,
		1,67,1,67,3,67,1062,8,67,3,67,1064,8,67,1,68,1,68,5,68,1068,8,68,10,68,
		12,68,1071,9,68,1,68,1,68,3,68,1075,8,68,1,69,1,69,3,69,1079,8,69,1,70,
		1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,3,74,1098,8,74,1,75,5,75,1101,8,75,10,75,12,75,1104,9,75,1,75,
		1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1119,
		8,76,1,77,1,77,1,77,3,77,1124,8,77,1,77,1,77,5,77,1128,8,77,10,77,12,77,
		1131,9,77,1,77,1,77,1,77,3,77,1136,8,77,3,77,1138,8,77,1,78,1,78,3,78,
		1142,8,78,1,79,1,79,1,79,3,79,1147,8,79,1,79,1,79,3,79,1151,8,79,1,80,
		1,80,1,80,1,80,1,80,1,80,3,80,1159,8,80,1,81,1,81,1,81,5,81,1164,8,81,
		10,81,12,81,1167,9,81,1,81,1,81,1,81,5,81,1172,8,81,10,81,12,81,1175,9,
		81,3,81,1177,8,81,1,82,5,82,1180,8,82,10,82,12,82,1183,9,82,1,82,1,82,
		1,82,1,83,1,83,3,83,1190,8,83,1,84,5,84,1193,8,84,10,84,12,84,1196,9,84,
		1,84,1,84,5,84,1200,8,84,10,84,12,84,1203,9,84,1,84,1,84,1,84,1,84,3,84,
		1209,8,84,1,85,5,85,1212,8,85,10,85,12,85,1215,9,85,1,85,1,85,1,85,1,85,
		3,85,1221,8,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1231,8,87,
		10,87,12,87,1234,9,87,1,88,1,88,3,88,1238,8,88,1,89,1,89,3,89,1242,8,89,
		1,90,1,90,1,91,1,91,1,91,1,92,5,92,1250,8,92,10,92,12,92,1253,9,92,1,92,
		1,92,3,92,1257,8,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1265,8,93,1,94,
		3,94,1268,8,94,1,94,1,94,1,94,3,94,1273,8,94,1,94,1,94,1,95,1,95,1,96,
		1,96,3,96,1281,8,96,1,96,3,96,1284,8,96,1,96,1,96,1,97,3,97,1289,8,97,
		1,97,1,97,1,97,3,97,1294,8,97,1,97,1,97,1,97,3,97,1299,8,97,1,97,1,97,
		1,97,3,97,1304,8,97,1,97,1,97,1,97,1,97,1,97,3,97,1311,8,97,1,97,1,97,
		1,97,3,97,1316,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1324,8,97,1,97,
		1,97,1,97,3,97,1329,8,97,1,97,1,97,1,97,3,97,1334,8,97,1,98,5,98,1337,
		8,98,10,98,12,98,1340,9,98,1,98,1,98,1,98,3,98,1345,8,98,1,98,1,98,1,99,
		1,99,3,99,1351,8,99,1,99,3,99,1354,8,99,1,99,3,99,1357,8,99,1,99,1,99,
		1,100,1,100,1,100,5,100,1364,8,100,10,100,12,100,1367,9,100,1,101,5,101,
		1370,8,101,10,101,12,101,1373,9,101,1,101,1,101,1,101,3,101,1378,8,101,
		1,101,3,101,1381,8,101,1,101,3,101,1384,8,101,1,102,1,102,1,103,1,103,
		5,103,1390,8,103,10,103,12,103,1393,9,103,1,104,1,104,3,104,1397,8,104,
		1,105,5,105,1400,8,105,10,105,12,105,1403,9,105,1,105,1,105,1,105,3,105,
		1408,8,105,1,105,3,105,1411,8,105,1,105,1,105,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,3,106,1422,8,106,1,107,1,107,1,107,1,108,1,108,5,108,
		1429,8,108,10,108,12,108,1432,9,108,1,108,1,108,1,109,1,109,1,109,1,109,
		1,109,3,109,1441,8,109,1,110,5,110,1444,8,110,10,110,12,110,1447,9,110,
		1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,3,111,1457,8,111,1,112,
		5,112,1460,8,112,10,112,12,112,1463,9,112,1,112,1,112,1,112,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,3,113,1475,8,113,1,114,5,114,1478,8,114,
		10,114,12,114,1481,9,114,1,114,1,114,1,114,1,114,1,114,1,115,1,115,5,115,
		1490,8,115,10,115,12,115,1493,9,115,1,115,1,115,1,116,1,116,1,116,1,116,
		1,116,3,116,1502,8,116,1,117,5,117,1505,8,117,10,117,12,117,1508,9,117,
		1,117,1,117,1,117,1,117,1,117,3,117,1515,8,117,1,117,3,117,1518,8,117,
		1,117,1,117,1,118,1,118,1,118,3,118,1525,8,118,1,119,1,119,1,119,1,120,
		1,120,1,120,3,120,1533,8,120,1,121,1,121,1,121,1,121,3,121,1539,8,121,
		1,121,1,121,1,122,1,122,1,122,5,122,1546,8,122,10,122,12,122,1549,9,122,
		1,123,1,123,1,123,1,123,1,124,1,124,1,124,3,124,1558,8,124,1,125,1,125,
		3,125,1562,8,125,1,125,3,125,1565,8,125,1,125,1,125,1,126,1,126,1,126,
		5,126,1572,8,126,10,126,12,126,1575,9,126,1,127,1,127,1,127,1,128,1,128,
		1,128,1,128,1,128,1,128,1,129,1,129,3,129,1588,8,129,1,129,3,129,1591,
		8,129,1,129,1,129,1,130,1,130,1,130,5,130,1598,8,130,10,130,12,130,1601,
		9,130,1,131,1,131,3,131,1605,8,131,1,131,1,131,1,132,4,132,1610,8,132,
		11,132,12,132,1611,1,133,1,133,1,133,3,133,1617,8,133,1,134,1,134,1,134,
		1,135,5,135,1623,8,135,10,135,12,135,1626,9,135,1,135,1,135,1,135,1,136,
		1,136,1,136,1,136,1,136,1,136,3,136,1637,8,136,1,137,1,137,1,137,1,137,
		1,137,3,137,1644,8,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,1,138,1,138,1,138,3,138,1658,8,138,1,139,1,139,1,140,1,140,1,140,
		1,140,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,3,143,1680,8,143,1,144,1,144,1,144,1,144,1,144,1,144,
		1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,
		1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
		1,147,1,147,3,147,1714,8,147,1,148,1,148,1,148,1,148,1,148,1,148,1,149,
		1,149,5,149,1724,8,149,10,149,12,149,1727,9,149,1,149,5,149,1730,8,149,
		10,149,12,149,1733,9,149,1,149,1,149,1,150,1,150,1,150,1,151,4,151,1741,
		8,151,11,151,12,151,1742,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
		1,152,1,152,3,152,1755,8,152,1,153,1,153,1,154,1,154,1,154,1,154,1,154,
		1,154,1,155,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,
		1,156,1,156,1,156,1,157,1,157,3,157,1781,8,157,1,158,1,158,3,158,1785,
		8,158,1,159,1,159,1,159,3,159,1790,8,159,1,159,1,159,3,159,1794,8,159,
		1,159,1,159,3,159,1798,8,159,1,159,1,159,1,159,1,160,1,160,1,160,3,160,
		1806,8,160,1,160,1,160,3,160,1810,8,160,1,160,1,160,3,160,1814,8,160,1,
		160,1,160,1,160,1,161,1,161,3,161,1821,8,161,1,162,1,162,1,163,1,163,1,
		163,5,163,1828,8,163,10,163,12,163,1831,9,163,1,164,1,164,1,164,5,164,
		1836,8,164,10,164,12,164,1839,9,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,165,1,165,1,165,5,165,1851,8,165,10,165,12,165,1854,9,165,1,165,
		1,165,1,165,1,165,1,165,1,165,1,165,1,166,1,166,3,166,1865,8,166,1,166,
		1,166,1,167,1,167,3,167,1871,8,167,1,167,1,167,1,168,1,168,3,168,1877,
		8,168,1,168,1,168,1,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,
		1,170,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,1898,8,171,1,171,
		1,171,1,171,3,171,1903,8,171,1,172,4,172,1906,8,172,11,172,12,172,1907,
		1,173,1,173,1,173,1,173,1,173,1,173,1,174,5,174,1917,8,174,10,174,12,174,
		1920,9,174,1,174,1,174,1,174,1,175,1,175,1,175,5,175,1928,8,175,10,175,
		12,175,1931,9,175,1,176,1,176,1,176,1,177,1,177,1,177,1,177,3,177,1940,
		8,177,1,177,3,177,1943,8,177,1,178,1,178,1,178,3,178,1948,8,178,1,178,
		1,178,1,179,1,179,1,179,5,179,1955,8,179,10,179,12,179,1958,9,179,1,180,
		5,180,1961,8,180,10,180,12,180,1964,9,180,1,180,1,180,1,180,1,180,1,180,
		1,180,3,180,1972,8,180,1,181,1,181,3,181,1976,8,181,1,182,1,182,3,182,
		1980,8,182,1,182,5,182,1983,8,182,10,182,12,182,1986,9,182,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,3,183,2004,8,183,1,184,1,184,1,185,1,185,1,185,1,185,5,185,
		2012,8,185,10,185,12,185,2015,9,185,1,185,1,185,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
		1,185,3,185,2036,8,185,1,186,1,186,1,186,1,186,1,186,3,186,2043,8,186,
		1,187,1,187,1,188,1,188,1,188,1,188,3,188,2051,8,188,1,189,1,189,1,189,
		1,189,5,189,2057,8,189,10,189,12,189,2060,9,189,1,189,1,189,1,189,1,189,
		1,189,1,189,5,189,2068,8,189,10,189,12,189,2071,9,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,3,189,2093,8,189,1,190,1,190,1,191,1,191,
		1,191,1,191,5,191,2101,8,191,10,191,12,191,2104,9,191,1,191,1,191,1,191,
		1,191,1,191,1,191,5,191,2112,8,191,10,191,12,191,2115,9,191,1,191,1,191,
		1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,
		1,191,1,191,1,191,1,191,1,191,3,191,2136,8,191,1,192,1,192,1,192,3,192,
		2141,8,192,1,192,1,192,5,192,2145,8,192,10,192,12,192,2148,9,192,1,192,
		1,192,1,192,1,192,1,192,3,192,2155,8,192,1,193,1,193,3,193,2159,8,193,
		1,193,5,193,2162,8,193,10,193,12,193,2165,9,193,1,193,1,193,1,193,5,193,
		2170,8,193,10,193,12,193,2173,9,193,1,193,5,193,2176,8,193,10,193,12,193,
		2179,9,193,1,193,3,193,2182,8,193,1,193,1,193,3,193,2186,8,193,1,193,1,
		193,3,193,2190,8,193,1,193,1,193,1,193,1,193,3,193,2196,8,193,1,193,5,
		193,2199,8,193,10,193,12,193,2202,9,193,1,193,1,193,3,193,2206,8,193,1,
		193,1,193,3,193,2210,8,193,1,193,1,193,3,193,2214,8,193,1,193,1,193,1,
		193,1,193,3,193,2220,8,193,1,193,5,193,2223,8,193,10,193,12,193,2226,9,
		193,1,193,1,193,3,193,2230,8,193,1,193,1,193,3,193,2234,8,193,1,193,1,
		193,3,193,2238,8,193,3,193,2240,8,193,1,194,1,194,1,194,3,194,2245,8,194,
		1,194,5,194,2248,8,194,10,194,12,194,2251,9,194,1,194,1,194,3,194,2255,
		8,194,1,194,1,194,3,194,2259,8,194,1,194,1,194,3,194,2263,8,194,1,195,
		1,195,3,195,2267,8,195,1,195,5,195,2270,8,195,10,195,12,195,2273,9,195,
		1,195,1,195,1,195,5,195,2278,8,195,10,195,12,195,2281,9,195,1,195,5,195,
		2284,8,195,10,195,12,195,2287,9,195,1,195,3,195,2290,8,195,1,195,1,195,
		3,195,2294,8,195,1,195,1,195,3,195,2298,8,195,1,195,1,195,1,195,1,195,
		3,195,2304,8,195,1,195,5,195,2307,8,195,10,195,12,195,2310,9,195,1,195,
		1,195,3,195,2314,8,195,1,195,1,195,3,195,2318,8,195,1,195,1,195,3,195,
		2322,8,195,3,195,2324,8,195,1,196,1,196,1,196,3,196,2329,8,196,1,197,1,
		197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
		3,197,2344,8,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,
		1,199,1,199,1,199,3,199,2358,8,199,1,200,1,200,1,200,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,3,200,2370,8,200,1,200,1,200,1,200,1,200,1,200,
		5,200,2377,8,200,10,200,12,200,2380,9,200,1,201,1,201,1,201,1,201,1,201,
		1,201,1,201,1,201,1,201,1,201,5,201,2392,8,201,10,201,12,201,2395,9,201,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2407,
		8,202,1,202,1,202,1,202,1,202,1,202,5,202,2414,8,202,10,202,12,202,2417,
		9,202,1,203,1,203,1,203,3,203,2422,8,203,1,203,1,203,1,203,1,203,1,203,
		3,203,2429,8,203,1,203,1,203,1,203,3,203,2434,8,203,1,203,1,203,1,203,
		1,203,1,203,3,203,2441,8,203,1,203,1,203,1,203,3,203,2446,8,203,1,203,
		1,203,1,203,1,203,1,203,3,203,2453,8,203,1,203,1,203,1,203,3,203,2458,
		8,203,1,203,1,203,1,203,1,203,1,203,3,203,2465,8,203,1,203,1,203,1,203,
		3,203,2470,8,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,2479,
		8,203,1,203,1,203,1,203,3,203,2484,8,203,1,203,1,203,3,203,2488,8,203,
		1,204,1,204,3,204,2492,8,204,1,204,1,204,1,204,3,204,2497,8,204,1,204,
		1,204,1,205,1,205,1,205,3,205,2504,8,205,1,205,1,205,1,205,1,205,1,205,
		3,205,2511,8,205,1,205,1,205,1,205,3,205,2516,8,205,1,205,1,205,1,205,
		1,205,1,205,3,205,2523,8,205,1,205,1,205,1,205,3,205,2528,8,205,1,205,
		1,205,1,205,1,205,1,205,3,205,2535,8,205,1,205,1,205,1,205,3,205,2540,
		8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,2549,8,205,1,205,
		1,205,1,205,3,205,2554,8,205,1,205,1,205,3,205,2558,8,205,1,206,1,206,
		1,206,5,206,2563,8,206,10,206,12,206,2566,9,206,1,207,1,207,1,207,3,207,
		2571,8,207,1,207,1,207,1,207,1,207,1,207,3,207,2578,8,207,1,207,1,207,
		1,207,1,207,1,207,3,207,2585,8,207,1,207,1,207,1,207,1,207,1,207,3,207,
		2592,8,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2600,8,207,1,207,
		1,207,1,207,1,207,1,207,3,207,2607,8,207,1,207,1,207,1,207,1,207,1,207,
		1,207,3,207,2615,8,207,1,208,1,208,3,208,2619,8,208,1,208,1,208,1,209,
		1,209,1,209,3,209,2626,8,209,1,209,1,209,1,209,1,209,1,209,3,209,2633,
		8,209,1,209,1,209,1,209,1,209,1,209,3,209,2640,8,209,1,209,1,209,1,209,
		1,209,1,209,1,209,3,209,2648,8,209,1,209,1,209,1,209,1,209,1,209,3,209,
		2655,8,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2663,8,209,1,210,
		1,210,1,210,1,210,3,210,2669,8,210,1,210,1,210,1,210,1,210,3,210,2675,
		8,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,
		2687,8,210,1,211,4,211,2690,8,211,11,211,12,211,2691,1,212,5,212,2695,
		8,212,10,212,12,212,2698,9,212,1,212,1,212,1,212,1,212,1,213,1,213,1,214,
		1,214,3,214,2708,8,214,1,215,1,215,1,215,1,215,1,216,1,216,1,216,3,216,
		2717,8,216,1,216,1,216,1,216,1,216,1,216,3,216,2724,8,216,1,217,1,217,
		1,217,5,217,2729,8,217,10,217,12,217,2732,9,217,1,218,1,218,3,218,2736,
		8,218,1,219,1,219,3,219,2740,8,219,1,220,1,220,1,220,1,220,1,221,1,221,
		1,221,3,221,2749,8,221,1,222,1,222,1,223,1,223,1,223,1,223,1,223,1,223,
		1,223,3,223,2760,8,223,3,223,2762,8,223,1,224,1,224,1,224,1,224,1,224,
		1,224,5,224,2770,8,224,10,224,12,224,2773,9,224,1,225,1,225,1,225,1,225,
		1,225,1,225,5,225,2781,8,225,10,225,12,225,2784,9,225,1,226,1,226,1,226,
		1,226,1,226,1,226,5,226,2792,8,226,10,226,12,226,2795,9,226,1,227,1,227,
		1,227,1,227,1,227,1,227,5,227,2803,8,227,10,227,12,227,2806,9,227,1,228,
		1,228,1,228,1,228,1,228,1,228,5,228,2814,8,228,10,228,12,228,2817,9,228,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,5,229,2828,8,229,
		10,229,12,229,2831,9,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,5,230,2851,
		8,230,10,230,12,230,2854,9,230,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
		1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,2872,8,231,
		10,231,12,231,2875,9,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
		1,232,5,232,2886,8,232,10,232,12,232,2889,9,232,1,233,1,233,1,233,1,233,
		1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,5,233,2903,8,233,10,233,
		12,233,2906,9,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,2915,
		8,234,1,235,1,235,1,235,1,236,1,236,1,236,1,237,1,237,1,237,1,237,1,237,
		1,237,3,237,2929,8,237,1,238,1,238,3,238,2933,8,238,1,238,1,238,5,238,
		2937,8,238,10,238,12,238,2940,9,238,1,239,1,239,1,239,1,240,1,240,1,241,
		1,241,1,241,1,242,1,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
		5,243,2960,8,243,10,243,12,243,2963,9,243,1,243,1,243,1,243,1,243,1,243,
		1,243,5,243,2971,8,243,10,243,12,243,2974,9,243,1,243,1,243,1,243,3,243,
		2979,8,243,1,244,1,244,1,244,0,14,50,52,56,62,448,450,452,454,456,458,
		460,462,464,466,245,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
		198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
		234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
		270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
		306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
		342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
		378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
		414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
		450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
		486,488,0,6,1,0,62,67,5,0,5,5,8,8,28,28,30,30,43,43,2,0,14,14,21,21,2,
		0,44,44,54,54,2,0,80,80,104,114,9,0,17,17,31,31,34,35,39,39,41,41,52,52,
		56,56,60,60,115,115,3237,0,490,1,0,0,0,2,506,1,0,0,0,4,510,1,0,0,0,6,512,
		1,0,0,0,8,514,1,0,0,0,10,519,1,0,0,0,12,523,1,0,0,0,14,554,1,0,0,0,16,
		556,1,0,0,0,18,570,1,0,0,0,20,577,1,0,0,0,22,579,1,0,0,0,24,581,1,0,0,
		0,26,586,1,0,0,0,28,600,1,0,0,0,30,605,1,0,0,0,32,626,1,0,0,0,34,633,1,
		0,0,0,36,645,1,0,0,0,38,647,1,0,0,0,40,650,1,0,0,0,42,654,1,0,0,0,44,664,
		1,0,0,0,46,669,1,0,0,0,48,680,1,0,0,0,50,682,1,0,0,0,52,693,1,0,0,0,54,
		709,1,0,0,0,56,711,1,0,0,0,58,727,1,0,0,0,60,729,1,0,0,0,62,731,1,0,0,
		0,64,744,1,0,0,0,66,749,1,0,0,0,68,768,1,0,0,0,70,776,1,0,0,0,72,783,1,
		0,0,0,74,789,1,0,0,0,76,791,1,0,0,0,78,795,1,0,0,0,80,801,1,0,0,0,82,808,
		1,0,0,0,84,818,1,0,0,0,86,823,1,0,0,0,88,897,1,0,0,0,90,899,1,0,0,0,92,
		903,1,0,0,0,94,908,1,0,0,0,96,932,1,0,0,0,98,934,1,0,0,0,100,938,1,0,0,
		0,102,946,1,0,0,0,104,949,1,0,0,0,106,952,1,0,0,0,108,960,1,0,0,0,110,
		973,1,0,0,0,112,980,1,0,0,0,114,985,1,0,0,0,116,1000,1,0,0,0,118,1002,
		1,0,0,0,120,1010,1,0,0,0,122,1015,1,0,0,0,124,1021,1,0,0,0,126,1025,1,
		0,0,0,128,1029,1,0,0,0,130,1034,1,0,0,0,132,1038,1,0,0,0,134,1063,1,0,
		0,0,136,1065,1,0,0,0,138,1076,1,0,0,0,140,1080,1,0,0,0,142,1082,1,0,0,
		0,144,1084,1,0,0,0,146,1086,1,0,0,0,148,1097,1,0,0,0,150,1102,1,0,0,0,
		152,1118,1,0,0,0,154,1137,1,0,0,0,156,1141,1,0,0,0,158,1143,1,0,0,0,160,
		1158,1,0,0,0,162,1176,1,0,0,0,164,1181,1,0,0,0,166,1189,1,0,0,0,168,1208,
		1,0,0,0,170,1213,1,0,0,0,172,1224,1,0,0,0,174,1227,1,0,0,0,176,1237,1,
		0,0,0,178,1241,1,0,0,0,180,1243,1,0,0,0,182,1245,1,0,0,0,184,1251,1,0,
		0,0,186,1264,1,0,0,0,188,1267,1,0,0,0,190,1276,1,0,0,0,192,1278,1,0,0,
		0,194,1333,1,0,0,0,196,1338,1,0,0,0,198,1348,1,0,0,0,200,1360,1,0,0,0,
		202,1371,1,0,0,0,204,1385,1,0,0,0,206,1387,1,0,0,0,208,1396,1,0,0,0,210,
		1401,1,0,0,0,212,1421,1,0,0,0,214,1423,1,0,0,0,216,1426,1,0,0,0,218,1440,
		1,0,0,0,220,1445,1,0,0,0,222,1456,1,0,0,0,224,1461,1,0,0,0,226,1474,1,
		0,0,0,228,1479,1,0,0,0,230,1487,1,0,0,0,232,1501,1,0,0,0,234,1506,1,0,
		0,0,236,1524,1,0,0,0,238,1526,1,0,0,0,240,1532,1,0,0,0,242,1534,1,0,0,
		0,244,1542,1,0,0,0,246,1550,1,0,0,0,248,1557,1,0,0,0,250,1559,1,0,0,0,
		252,1568,1,0,0,0,254,1576,1,0,0,0,256,1579,1,0,0,0,258,1585,1,0,0,0,260,
		1594,1,0,0,0,262,1602,1,0,0,0,264,1609,1,0,0,0,266,1616,1,0,0,0,268,1618,
		1,0,0,0,270,1624,1,0,0,0,272,1636,1,0,0,0,274,1643,1,0,0,0,276,1657,1,
		0,0,0,278,1659,1,0,0,0,280,1661,1,0,0,0,282,1665,1,0,0,0,284,1669,1,0,
		0,0,286,1679,1,0,0,0,288,1681,1,0,0,0,290,1687,1,0,0,0,292,1695,1,0,0,
		0,294,1713,1,0,0,0,296,1715,1,0,0,0,298,1721,1,0,0,0,300,1736,1,0,0,0,
		302,1740,1,0,0,0,304,1754,1,0,0,0,306,1756,1,0,0,0,308,1758,1,0,0,0,310,
		1764,1,0,0,0,312,1770,1,0,0,0,314,1780,1,0,0,0,316,1784,1,0,0,0,318,1786,
		1,0,0,0,320,1802,1,0,0,0,322,1820,1,0,0,0,324,1822,1,0,0,0,326,1824,1,
		0,0,0,328,1832,1,0,0,0,330,1847,1,0,0,0,332,1862,1,0,0,0,334,1868,1,0,
		0,0,336,1874,1,0,0,0,338,1880,1,0,0,0,340,1884,1,0,0,0,342,1902,1,0,0,
		0,344,1905,1,0,0,0,346,1909,1,0,0,0,348,1918,1,0,0,0,350,1924,1,0,0,0,
		352,1932,1,0,0,0,354,1935,1,0,0,0,356,1944,1,0,0,0,358,1951,1,0,0,0,360,
		1971,1,0,0,0,362,1975,1,0,0,0,364,1979,1,0,0,0,366,2003,1,0,0,0,368,2005,
		1,0,0,0,370,2035,1,0,0,0,372,2042,1,0,0,0,374,2044,1,0,0,0,376,2050,1,
		0,0,0,378,2092,1,0,0,0,380,2094,1,0,0,0,382,2135,1,0,0,0,384,2154,1,0,
		0,0,386,2239,1,0,0,0,388,2241,1,0,0,0,390,2323,1,0,0,0,392,2328,1,0,0,
		0,394,2343,1,0,0,0,396,2345,1,0,0,0,398,2357,1,0,0,0,400,2369,1,0,0,0,
		402,2381,1,0,0,0,404,2406,1,0,0,0,406,2487,1,0,0,0,408,2489,1,0,0,0,410,
		2557,1,0,0,0,412,2559,1,0,0,0,414,2614,1,0,0,0,416,2616,1,0,0,0,418,2662,
		1,0,0,0,420,2686,1,0,0,0,422,2689,1,0,0,0,424,2696,1,0,0,0,426,2703,1,
		0,0,0,428,2707,1,0,0,0,430,2709,1,0,0,0,432,2723,1,0,0,0,434,2725,1,0,
		0,0,436,2735,1,0,0,0,438,2739,1,0,0,0,440,2741,1,0,0,0,442,2748,1,0,0,
		0,444,2750,1,0,0,0,446,2761,1,0,0,0,448,2763,1,0,0,0,450,2774,1,0,0,0,
		452,2785,1,0,0,0,454,2796,1,0,0,0,456,2807,1,0,0,0,458,2818,1,0,0,0,460,
		2832,1,0,0,0,462,2855,1,0,0,0,464,2876,1,0,0,0,466,2890,1,0,0,0,468,2914,
		1,0,0,0,470,2916,1,0,0,0,472,2919,1,0,0,0,474,2928,1,0,0,0,476,2932,1,
		0,0,0,478,2941,1,0,0,0,480,2944,1,0,0,0,482,2946,1,0,0,0,484,2949,1,0,
		0,0,486,2978,1,0,0,0,488,2980,1,0,0,0,490,491,7,0,0,0,491,1,1,0,0,0,492,
		494,3,240,120,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,
		1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,507,3,4,2,0,499,501,3,240,
		120,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,
		503,505,1,0,0,0,504,502,1,0,0,0,505,507,5,3,0,0,506,495,1,0,0,0,506,502,
		1,0,0,0,507,3,1,0,0,0,508,511,3,6,3,0,509,511,3,8,4,0,510,508,1,0,0,0,
		510,509,1,0,0,0,511,5,1,0,0,0,512,513,7,1,0,0,513,7,1,0,0,0,514,515,7,
		2,0,0,515,9,1,0,0,0,516,520,3,12,6,0,517,520,3,26,13,0,518,520,3,28,14,
		0,519,516,1,0,0,0,519,517,1,0,0,0,519,518,1,0,0,0,520,11,1,0,0,0,521,524,
		3,18,9,0,522,524,3,24,12,0,523,521,1,0,0,0,523,522,1,0,0,0,524,529,1,0,
		0,0,525,528,3,16,8,0,526,528,3,22,11,0,527,525,1,0,0,0,527,526,1,0,0,0,
		528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,13,1,0,0,0,531,529,
		1,0,0,0,532,534,3,240,120,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,
		0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,540,3,488,244,
		0,539,541,3,40,20,0,540,539,1,0,0,0,540,541,1,0,0,0,541,555,1,0,0,0,542,
		543,3,12,6,0,543,547,5,76,0,0,544,546,3,240,120,0,545,544,1,0,0,0,546,
		549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,1,
		0,0,0,550,552,3,488,244,0,551,553,3,40,20,0,552,551,1,0,0,0,552,553,1,
		0,0,0,553,555,1,0,0,0,554,535,1,0,0,0,554,542,1,0,0,0,555,15,1,0,0,0,556,
		560,5,76,0,0,557,559,3,240,120,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,
		1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,565,3,488,
		244,0,564,566,3,40,20,0,565,564,1,0,0,0,565,566,1,0,0,0,566,17,1,0,0,0,
		567,569,3,240,120,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,
		571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,575,3,488,244,0,574,576,
		3,40,20,0,575,574,1,0,0,0,575,576,1,0,0,0,576,19,1,0,0,0,577,578,3,14,
		7,0,578,21,1,0,0,0,579,580,3,16,8,0,580,23,1,0,0,0,581,582,3,18,9,0,582,
		25,1,0,0,0,583,585,3,240,120,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,
		1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,590,3,488,
		244,0,590,27,1,0,0,0,591,592,3,2,1,0,592,593,3,30,15,0,593,601,1,0,0,0,
		594,595,3,12,6,0,595,596,3,30,15,0,596,601,1,0,0,0,597,598,3,26,13,0,598,
		599,3,30,15,0,599,601,1,0,0,0,600,591,1,0,0,0,600,594,1,0,0,0,600,597,
		1,0,0,0,601,29,1,0,0,0,602,604,3,240,120,0,603,602,1,0,0,0,604,607,1,0,
		0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,605,1,0,0,0,608,
		609,5,72,0,0,609,620,5,73,0,0,610,612,3,240,120,0,611,610,1,0,0,0,612,
		615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,613,1,
		0,0,0,616,617,5,72,0,0,617,619,5,73,0,0,618,613,1,0,0,0,619,622,1,0,0,
		0,620,618,1,0,0,0,620,621,1,0,0,0,621,31,1,0,0,0,622,620,1,0,0,0,623,625,
		3,34,17,0,624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,
		0,0,627,629,1,0,0,0,628,626,1,0,0,0,629,631,3,488,244,0,630,632,3,36,18,
		0,631,630,1,0,0,0,631,632,1,0,0,0,632,33,1,0,0,0,633,634,3,240,120,0,634,
		35,1,0,0,0,635,636,5,18,0,0,636,646,3,26,13,0,637,638,5,18,0,0,638,642,
		3,12,6,0,639,641,3,38,19,0,640,639,1,0,0,0,641,644,1,0,0,0,642,640,1,0,
		0,0,642,643,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,645,635,1,0,0,0,645,
		637,1,0,0,0,646,37,1,0,0,0,647,648,5,100,0,0,648,649,3,20,10,0,649,39,
		1,0,0,0,650,651,5,82,0,0,651,652,3,42,21,0,652,653,5,81,0,0,653,41,1,0,
		0,0,654,659,3,44,22,0,655,656,5,75,0,0,656,658,3,44,22,0,657,655,1,0,0,
		0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,43,1,0,0,0,661,659,
		1,0,0,0,662,665,3,10,5,0,663,665,3,46,23,0,664,662,1,0,0,0,664,663,1,0,
		0,0,665,45,1,0,0,0,666,668,3,240,120,0,667,666,1,0,0,0,668,671,1,0,0,0,
		669,667,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,669,1,0,0,0,672,674,
		5,85,0,0,673,675,3,48,24,0,674,673,1,0,0,0,674,675,1,0,0,0,675,47,1,0,
		0,0,676,677,5,18,0,0,677,681,3,10,5,0,678,679,5,46,0,0,679,681,3,10,5,
		0,680,676,1,0,0,0,680,678,1,0,0,0,681,49,1,0,0,0,682,683,6,25,-1,0,683,
		684,3,488,244,0,684,690,1,0,0,0,685,686,10,1,0,0,686,687,5,76,0,0,687,
		689,3,488,244,0,688,685,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,
		1,0,0,0,691,51,1,0,0,0,692,690,1,0,0,0,693,694,6,26,-1,0,694,695,3,488,
		244,0,695,701,1,0,0,0,696,697,10,1,0,0,697,698,5,76,0,0,698,700,3,488,
		244,0,699,696,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,
		702,53,1,0,0,0,703,701,1,0,0,0,704,710,3,488,244,0,705,706,3,56,28,0,706,
		707,5,76,0,0,707,708,3,488,244,0,708,710,1,0,0,0,709,704,1,0,0,0,709,705,
		1,0,0,0,710,55,1,0,0,0,711,712,6,28,-1,0,712,713,3,488,244,0,713,719,1,
		0,0,0,714,715,10,1,0,0,715,716,5,76,0,0,716,718,3,488,244,0,717,714,1,
		0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,57,1,0,0,0,721,
		719,1,0,0,0,722,728,3,488,244,0,723,724,3,62,31,0,724,725,5,76,0,0,725,
		726,3,488,244,0,726,728,1,0,0,0,727,722,1,0,0,0,727,723,1,0,0,0,728,59,
		1,0,0,0,729,730,3,488,244,0,730,61,1,0,0,0,731,732,6,31,-1,0,732,733,3,
		488,244,0,733,739,1,0,0,0,734,735,10,1,0,0,735,736,5,76,0,0,736,738,3,
		488,244,0,737,734,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,
		0,0,740,63,1,0,0,0,741,739,1,0,0,0,742,745,3,66,33,0,743,745,3,68,34,0,
		744,742,1,0,0,0,744,743,1,0,0,0,745,746,1,0,0,0,746,747,5,0,0,1,747,65,
		1,0,0,0,748,750,3,70,35,0,749,748,1,0,0,0,749,750,1,0,0,0,750,754,1,0,
		0,0,751,753,3,74,37,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,
		754,755,1,0,0,0,755,760,1,0,0,0,756,754,1,0,0,0,757,759,3,84,42,0,758,
		757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,
		0,0,0,762,760,1,0,0,0,763,764,5,0,0,1,764,67,1,0,0,0,765,767,3,74,37,0,
		766,765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,
		1,0,0,0,770,768,1,0,0,0,771,772,3,86,43,0,772,69,1,0,0,0,773,775,3,72,
		36,0,774,773,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,
		779,1,0,0,0,778,776,1,0,0,0,779,780,5,36,0,0,780,781,3,52,26,0,781,782,
		5,74,0,0,782,71,1,0,0,0,783,784,3,240,120,0,784,73,1,0,0,0,785,790,3,76,
		38,0,786,790,3,78,39,0,787,790,3,80,40,0,788,790,3,82,41,0,789,785,1,0,
		0,0,789,786,1,0,0,0,789,787,1,0,0,0,789,788,1,0,0,0,790,75,1,0,0,0,791,
		792,5,26,0,0,792,793,3,54,27,0,793,794,5,74,0,0,794,77,1,0,0,0,795,796,
		5,26,0,0,796,797,3,56,28,0,797,798,5,76,0,0,798,799,5,98,0,0,799,800,5,
		74,0,0,800,79,1,0,0,0,801,802,5,26,0,0,802,803,5,44,0,0,803,804,3,54,27,
		0,804,805,5,76,0,0,805,806,3,488,244,0,806,807,5,74,0,0,807,81,1,0,0,0,
		808,809,5,26,0,0,809,810,5,44,0,0,810,811,3,54,27,0,811,812,5,76,0,0,812,
		813,5,98,0,0,813,814,5,74,0,0,814,83,1,0,0,0,815,819,3,92,46,0,816,819,
		3,208,104,0,817,819,5,74,0,0,818,815,1,0,0,0,818,816,1,0,0,0,818,817,1,
		0,0,0,819,85,1,0,0,0,820,822,3,240,120,0,821,820,1,0,0,0,822,825,1,0,0,
		0,823,821,1,0,0,0,823,824,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,826,
		828,5,34,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,
		31,0,0,830,831,3,50,25,0,831,835,5,70,0,0,832,834,3,88,44,0,833,832,1,
		0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,
		837,835,1,0,0,0,838,839,5,71,0,0,839,87,1,0,0,0,840,844,5,41,0,0,841,843,
		3,90,45,0,842,841,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,
		0,0,845,847,1,0,0,0,846,844,1,0,0,0,847,848,3,50,25,0,848,849,5,74,0,0,
		849,898,1,0,0,0,850,851,5,17,0,0,851,861,3,52,26,0,852,853,5,52,0,0,853,
		858,3,50,25,0,854,855,5,75,0,0,855,857,3,50,25,0,856,854,1,0,0,0,857,860,
		1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,
		0,861,852,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,864,5,74,0,0,864,
		898,1,0,0,0,865,866,5,35,0,0,866,876,3,52,26,0,867,868,5,52,0,0,868,873,
		3,50,25,0,869,870,5,75,0,0,870,872,3,50,25,0,871,869,1,0,0,0,872,875,1,
		0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,
		876,867,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,879,5,74,0,0,879,898,
		1,0,0,0,880,881,5,56,0,0,881,882,3,54,27,0,882,883,5,74,0,0,883,898,1,
		0,0,0,884,885,5,39,0,0,885,886,3,54,27,0,886,887,5,60,0,0,887,892,3,54,
		27,0,888,889,5,75,0,0,889,891,3,54,27,0,890,888,1,0,0,0,891,894,1,0,0,
		0,892,890,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,892,1,0,0,0,895,
		896,5,74,0,0,896,898,1,0,0,0,897,840,1,0,0,0,897,850,1,0,0,0,897,865,1,
		0,0,0,897,880,1,0,0,0,897,884,1,0,0,0,898,89,1,0,0,0,899,900,7,3,0,0,900,
		91,1,0,0,0,901,904,3,94,47,0,902,904,3,196,98,0,903,901,1,0,0,0,903,902,
		1,0,0,0,904,93,1,0,0,0,905,907,3,96,48,0,906,905,1,0,0,0,907,910,1,0,0,
		0,908,906,1,0,0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,908,1,0,0,0,911,
		912,5,9,0,0,912,914,3,488,244,0,913,915,3,98,49,0,914,913,1,0,0,0,914,
		915,1,0,0,0,915,917,1,0,0,0,916,918,3,102,51,0,917,916,1,0,0,0,917,918,
		1,0,0,0,918,920,1,0,0,0,919,921,3,104,52,0,920,919,1,0,0,0,920,921,1,0,
		0,0,921,922,1,0,0,0,922,923,3,108,54,0,923,95,1,0,0,0,924,933,3,240,120,
		0,925,933,5,40,0,0,926,933,5,38,0,0,927,933,5,37,0,0,928,933,5,1,0,0,929,
		933,5,44,0,0,930,933,5,19,0,0,931,933,5,45,0,0,932,924,1,0,0,0,932,925,
		1,0,0,0,932,926,1,0,0,0,932,927,1,0,0,0,932,928,1,0,0,0,932,929,1,0,0,
		0,932,930,1,0,0,0,932,931,1,0,0,0,933,97,1,0,0,0,934,935,5,82,0,0,935,
		936,3,100,50,0,936,937,5,81,0,0,937,99,1,0,0,0,938,943,3,32,16,0,939,940,
		5,75,0,0,940,942,3,32,16,0,941,939,1,0,0,0,942,945,1,0,0,0,943,941,1,0,
		0,0,943,944,1,0,0,0,944,101,1,0,0,0,945,943,1,0,0,0,946,947,5,18,0,0,947,
		948,3,14,7,0,948,103,1,0,0,0,949,950,5,25,0,0,950,951,3,106,53,0,951,105,
		1,0,0,0,952,957,3,20,10,0,953,954,5,75,0,0,954,956,3,20,10,0,955,953,1,
		0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,107,1,0,0,0,
		959,957,1,0,0,0,960,964,5,70,0,0,961,963,3,110,55,0,962,961,1,0,0,0,963,
		966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,964,1,
		0,0,0,967,968,5,71,0,0,968,109,1,0,0,0,969,974,3,112,56,0,970,974,3,180,
		90,0,971,974,3,182,91,0,972,974,3,184,92,0,973,969,1,0,0,0,973,970,1,0,
		0,0,973,971,1,0,0,0,973,972,1,0,0,0,974,111,1,0,0,0,975,981,3,114,57,0,
		976,981,3,150,75,0,977,981,3,92,46,0,978,981,3,208,104,0,979,981,5,74,
		0,0,980,975,1,0,0,0,980,976,1,0,0,0,980,977,1,0,0,0,980,978,1,0,0,0,980,
		979,1,0,0,0,981,113,1,0,0,0,982,984,3,116,58,0,983,982,1,0,0,0,984,987,
		1,0,0,0,985,983,1,0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,985,1,0,0,
		0,988,989,3,126,63,0,989,990,3,118,59,0,990,991,5,74,0,0,991,115,1,0,0,
		0,992,1001,3,240,120,0,993,1001,5,40,0,0,994,1001,5,38,0,0,995,1001,5,
		37,0,0,996,1001,5,44,0,0,997,1001,5,19,0,0,998,1001,5,53,0,0,999,1001,
		5,58,0,0,1000,992,1,0,0,0,1000,993,1,0,0,0,1000,994,1,0,0,0,1000,995,1,
		0,0,0,1000,996,1,0,0,0,1000,997,1,0,0,0,1000,998,1,0,0,0,1000,999,1,0,
		0,0,1001,117,1,0,0,0,1002,1007,3,120,60,0,1003,1004,5,75,0,0,1004,1006,
		3,120,60,0,1005,1003,1,0,0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1007,
		1008,1,0,0,0,1008,119,1,0,0,0,1009,1007,1,0,0,0,1010,1013,3,122,61,0,1011,
		1012,5,80,0,0,1012,1014,3,124,62,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,
		1014,121,1,0,0,0,1015,1017,3,488,244,0,1016,1018,3,30,15,0,1017,1016,1,
		0,0,0,1017,1018,1,0,0,0,1018,123,1,0,0,0,1019,1022,3,428,214,0,1020,1022,
		3,258,129,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,125,1,0,0,0,1023,
		1026,3,128,64,0,1024,1026,3,130,65,0,1025,1023,1,0,0,0,1025,1024,1,0,0,
		0,1026,127,1,0,0,0,1027,1030,3,4,2,0,1028,1030,5,3,0,0,1029,1027,1,0,0,
		0,1029,1028,1,0,0,0,1030,129,1,0,0,0,1031,1035,3,132,66,0,1032,1035,3,
		146,73,0,1033,1035,3,148,74,0,1034,1031,1,0,0,0,1034,1032,1,0,0,0,1034,
		1033,1,0,0,0,1035,131,1,0,0,0,1036,1039,3,138,69,0,1037,1039,3,144,72,
		0,1038,1036,1,0,0,0,1038,1037,1,0,0,0,1039,1044,1,0,0,0,1040,1043,3,136,
		68,0,1041,1043,3,142,71,0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,1046,
		1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,133,1,0,0,0,1046,1044,
		1,0,0,0,1047,1049,3,488,244,0,1048,1050,3,40,20,0,1049,1048,1,0,0,0,1049,
		1050,1,0,0,0,1050,1064,1,0,0,0,1051,1052,3,132,66,0,1052,1056,5,76,0,0,
		1053,1055,3,240,120,0,1054,1053,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,
		0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,1061,
		3,488,244,0,1060,1062,3,40,20,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
		1064,1,0,0,0,1063,1047,1,0,0,0,1063,1051,1,0,0,0,1064,135,1,0,0,0,1065,
		1069,5,76,0,0,1066,1068,3,240,120,0,1067,1066,1,0,0,0,1068,1071,1,0,0,
		0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1069,1,0,
		0,0,1072,1074,3,488,244,0,1073,1075,3,40,20,0,1074,1073,1,0,0,0,1074,1075,
		1,0,0,0,1075,137,1,0,0,0,1076,1078,3,488,244,0,1077,1079,3,40,20,0,1078,
		1077,1,0,0,0,1078,1079,1,0,0,0,1079,139,1,0,0,0,1080,1081,3,134,67,0,1081,
		141,1,0,0,0,1082,1083,3,136,68,0,1083,143,1,0,0,0,1084,1085,3,138,69,0,
		1085,145,1,0,0,0,1086,1087,3,488,244,0,1087,147,1,0,0,0,1088,1089,3,128,
		64,0,1089,1090,3,30,15,0,1090,1098,1,0,0,0,1091,1092,3,132,66,0,1092,1093,
		3,30,15,0,1093,1098,1,0,0,0,1094,1095,3,146,73,0,1095,1096,3,30,15,0,1096,
		1098,1,0,0,0,1097,1088,1,0,0,0,1097,1091,1,0,0,0,1097,1094,1,0,0,0,1098,
		149,1,0,0,0,1099,1101,3,152,76,0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,
		1100,1,0,0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,1105,
		1106,3,154,77,0,1106,1107,3,178,89,0,1107,151,1,0,0,0,1108,1119,3,240,
		120,0,1109,1119,5,40,0,0,1110,1119,5,38,0,0,1111,1119,5,37,0,0,1112,1119,
		5,1,0,0,1113,1119,5,44,0,0,1114,1119,5,19,0,0,1115,1119,5,48,0,0,1116,
		1119,5,32,0,0,1117,1119,5,45,0,0,1118,1108,1,0,0,0,1118,1109,1,0,0,0,1118,
		1110,1,0,0,0,1118,1111,1,0,0,0,1118,1112,1,0,0,0,1118,1113,1,0,0,0,1118,
		1114,1,0,0,0,1118,1115,1,0,0,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,
		153,1,0,0,0,1120,1121,3,156,78,0,1121,1123,3,158,79,0,1122,1124,3,172,
		86,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1138,1,0,0,0,1125,1129,3,
		98,49,0,1126,1128,3,240,120,0,1127,1126,1,0,0,0,1128,1131,1,0,0,0,1129,
		1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,1129,1,0,0,0,1132,
		1133,3,156,78,0,1133,1135,3,158,79,0,1134,1136,3,172,86,0,1135,1134,1,
		0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,0,1137,1120,1,0,0,0,1137,1125,
		1,0,0,0,1138,155,1,0,0,0,1139,1142,3,126,63,0,1140,1142,5,57,0,0,1141,
		1139,1,0,0,0,1141,1140,1,0,0,0,1142,157,1,0,0,0,1143,1144,3,488,244,0,
		1144,1146,5,68,0,0,1145,1147,3,160,80,0,1146,1145,1,0,0,0,1146,1147,1,
		0,0,0,1147,1148,1,0,0,0,1148,1150,5,69,0,0,1149,1151,3,30,15,0,1150,1149,
		1,0,0,0,1150,1151,1,0,0,0,1151,159,1,0,0,0,1152,1153,3,162,81,0,1153,1154,
		5,75,0,0,1154,1155,3,168,84,0,1155,1159,1,0,0,0,1156,1159,3,168,84,0,1157,
		1159,3,170,85,0,1158,1152,1,0,0,0,1158,1156,1,0,0,0,1158,1157,1,0,0,0,
		1159,161,1,0,0,0,1160,1165,3,164,82,0,1161,1162,5,75,0,0,1162,1164,3,164,
		82,0,1163,1161,1,0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,
		0,0,0,1166,1177,1,0,0,0,1167,1165,1,0,0,0,1168,1173,3,170,85,0,1169,1170,
		5,75,0,0,1170,1172,3,164,82,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,
		1171,1,0,0,0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1176,
		1160,1,0,0,0,1176,1168,1,0,0,0,1177,163,1,0,0,0,1178,1180,3,166,83,0,1179,
		1178,1,0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,
		1184,1,0,0,0,1183,1181,1,0,0,0,1184,1185,3,126,63,0,1185,1186,3,122,61,
		0,1186,165,1,0,0,0,1187,1190,3,240,120,0,1188,1190,5,19,0,0,1189,1187,
		1,0,0,0,1189,1188,1,0,0,0,1190,167,1,0,0,0,1191,1193,3,166,83,0,1192,1191,
		1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1197,
		1,0,0,0,1196,1194,1,0,0,0,1197,1201,3,126,63,0,1198,1200,3,240,120,0,1199,
		1198,1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,
		1204,1,0,0,0,1203,1201,1,0,0,0,1204,1205,5,77,0,0,1205,1206,3,122,61,0,
		1206,1209,1,0,0,0,1207,1209,3,164,82,0,1208,1194,1,0,0,0,1208,1207,1,0,
		0,0,1209,169,1,0,0,0,1210,1212,3,240,120,0,1211,1210,1,0,0,0,1212,1215,
		1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1213,
		1,0,0,0,1216,1220,3,126,63,0,1217,1218,3,488,244,0,1218,1219,5,76,0,0,
		1219,1221,1,0,0,0,1220,1217,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,
		0,1222,1223,5,49,0,0,1223,171,1,0,0,0,1224,1225,5,51,0,0,1225,1226,3,174,
		87,0,1226,173,1,0,0,0,1227,1232,3,176,88,0,1228,1229,5,75,0,0,1229,1231,
		3,176,88,0,1230,1228,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,
		1233,1,0,0,0,1233,175,1,0,0,0,1234,1232,1,0,0,0,1235,1238,3,14,7,0,1236,
		1238,3,26,13,0,1237,1235,1,0,0,0,1237,1236,1,0,0,0,1238,177,1,0,0,0,1239,
		1242,3,262,131,0,1240,1242,5,74,0,0,1241,1239,1,0,0,0,1241,1240,1,0,0,
		0,1242,179,1,0,0,0,1243,1244,3,262,131,0,1244,181,1,0,0,0,1245,1246,5,
		44,0,0,1246,1247,3,262,131,0,1247,183,1,0,0,0,1248,1250,3,186,93,0,1249,
		1248,1,0,0,0,1250,1253,1,0,0,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,
		1254,1,0,0,0,1253,1251,1,0,0,0,1254,1256,3,188,94,0,1255,1257,3,172,86,
		0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,3,192,
		96,0,1259,185,1,0,0,0,1260,1265,3,240,120,0,1261,1265,5,40,0,0,1262,1265,
		5,38,0,0,1263,1265,5,37,0,0,1264,1260,1,0,0,0,1264,1261,1,0,0,0,1264,1262,
		1,0,0,0,1264,1263,1,0,0,0,1265,187,1,0,0,0,1266,1268,3,98,49,0,1267,1266,
		1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1270,3,190,95,0,1270,
		1272,5,68,0,0,1271,1273,3,160,80,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,
		1273,1274,1,0,0,0,1274,1275,5,69,0,0,1275,189,1,0,0,0,1276,1277,3,488,
		244,0,1277,191,1,0,0,0,1278,1280,5,70,0,0,1279,1281,3,194,97,0,1280,1279,
		1,0,0,0,1280,1281,1,0,0,0,1281,1283,1,0,0,0,1282,1284,3,264,132,0,1283,
		1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1286,5,71,0,0,1286,
		193,1,0,0,0,1287,1289,3,40,20,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,
		1290,1,0,0,0,1290,1291,5,49,0,0,1291,1293,5,68,0,0,1292,1294,3,412,206,
		0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1296,5,69,
		0,0,1296,1334,5,74,0,0,1297,1299,3,40,20,0,1298,1297,1,0,0,0,1298,1299,
		1,0,0,0,1299,1300,1,0,0,0,1300,1301,5,46,0,0,1301,1303,5,68,0,0,1302,1304,
		3,412,206,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,
		1306,5,69,0,0,1306,1334,5,74,0,0,1307,1308,3,58,29,0,1308,1310,5,76,0,
		0,1309,1311,3,40,20,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,
		0,0,0,1312,1313,5,46,0,0,1313,1315,5,68,0,0,1314,1316,3,412,206,0,1315,
		1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,5,69,0,0,1318,
		1319,5,74,0,0,1319,1334,1,0,0,0,1320,1321,3,364,182,0,1321,1323,5,76,0,
		0,1322,1324,3,40,20,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,
		0,0,0,1325,1326,5,46,0,0,1326,1328,5,68,0,0,1327,1329,3,412,206,0,1328,
		1327,1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1331,5,69,0,0,1331,
		1332,5,74,0,0,1332,1334,1,0,0,0,1333,1288,1,0,0,0,1333,1298,1,0,0,0,1333,
		1307,1,0,0,0,1333,1320,1,0,0,0,1334,195,1,0,0,0,1335,1337,3,96,48,0,1336,
		1335,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,
		1341,1,0,0,0,1340,1338,1,0,0,0,1341,1342,5,16,0,0,1342,1344,3,488,244,
		0,1343,1345,3,104,52,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,
		0,0,0,1346,1347,3,198,99,0,1347,197,1,0,0,0,1348,1350,5,70,0,0,1349,1351,
		3,200,100,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,
		1354,5,75,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,
		1357,3,206,103,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,
		1358,1359,5,71,0,0,1359,199,1,0,0,0,1360,1365,3,202,101,0,1361,1362,5,
		75,0,0,1362,1364,3,202,101,0,1363,1361,1,0,0,0,1364,1367,1,0,0,0,1365,
		1363,1,0,0,0,1365,1366,1,0,0,0,1366,201,1,0,0,0,1367,1365,1,0,0,0,1368,
		1370,3,204,102,0,1369,1368,1,0,0,0,1370,1373,1,0,0,0,1371,1369,1,0,0,0,
		1371,1372,1,0,0,0,1372,1374,1,0,0,0,1373,1371,1,0,0,0,1374,1380,3,488,
		244,0,1375,1377,5,68,0,0,1376,1378,3,412,206,0,1377,1376,1,0,0,0,1377,
		1378,1,0,0,0,1378,1379,1,0,0,0,1379,1381,5,69,0,0,1380,1375,1,0,0,0,1380,
		1381,1,0,0,0,1381,1383,1,0,0,0,1382,1384,3,108,54,0,1383,1382,1,0,0,0,
		1383,1384,1,0,0,0,1384,203,1,0,0,0,1385,1386,3,240,120,0,1386,205,1,0,
		0,0,1387,1391,5,74,0,0,1388,1390,3,110,55,0,1389,1388,1,0,0,0,1390,1393,
		1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,207,1,0,0,0,1393,1391,
		1,0,0,0,1394,1397,3,210,105,0,1395,1397,3,228,114,0,1396,1394,1,0,0,0,
		1396,1395,1,0,0,0,1397,209,1,0,0,0,1398,1400,3,212,106,0,1399,1398,1,0,
		0,0,1400,1403,1,0,0,0,1401,1399,1,0,0,0,1401,1402,1,0,0,0,1402,1404,1,
		0,0,0,1403,1401,1,0,0,0,1404,1405,5,29,0,0,1405,1407,3,488,244,0,1406,
		1408,3,98,49,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1410,1,0,0,0,1409,
		1411,3,214,107,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,
		1412,1413,3,216,108,0,1413,211,1,0,0,0,1414,1422,3,240,120,0,1415,1422,
		5,40,0,0,1416,1422,5,38,0,0,1417,1422,5,37,0,0,1418,1422,5,1,0,0,1419,
		1422,5,44,0,0,1420,1422,5,45,0,0,1421,1414,1,0,0,0,1421,1415,1,0,0,0,1421,
		1416,1,0,0,0,1421,1417,1,0,0,0,1421,1418,1,0,0,0,1421,1419,1,0,0,0,1421,
		1420,1,0,0,0,1422,213,1,0,0,0,1423,1424,5,18,0,0,1424,1425,3,106,53,0,
		1425,215,1,0,0,0,1426,1430,5,70,0,0,1427,1429,3,218,109,0,1428,1427,1,
		0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1433,
		1,0,0,0,1432,1430,1,0,0,0,1433,1434,5,71,0,0,1434,217,1,0,0,0,1435,1441,
		3,220,110,0,1436,1441,3,224,112,0,1437,1441,3,92,46,0,1438,1441,3,208,
		104,0,1439,1441,5,74,0,0,1440,1435,1,0,0,0,1440,1436,1,0,0,0,1440,1437,
		1,0,0,0,1440,1438,1,0,0,0,1440,1439,1,0,0,0,1441,219,1,0,0,0,1442,1444,
		3,222,111,0,1443,1442,1,0,0,0,1444,1447,1,0,0,0,1445,1443,1,0,0,0,1445,
		1446,1,0,0,0,1446,1448,1,0,0,0,1447,1445,1,0,0,0,1448,1449,3,126,63,0,
		1449,1450,3,118,59,0,1450,1451,5,74,0,0,1451,221,1,0,0,0,1452,1457,3,240,
		120,0,1453,1457,5,40,0,0,1454,1457,5,44,0,0,1455,1457,5,19,0,0,1456,1452,
		1,0,0,0,1456,1453,1,0,0,0,1456,1454,1,0,0,0,1456,1455,1,0,0,0,1457,223,
		1,0,0,0,1458,1460,3,226,113,0,1459,1458,1,0,0,0,1460,1463,1,0,0,0,1461,
		1459,1,0,0,0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1461,1,0,0,0,1464,
		1465,3,154,77,0,1465,1466,3,178,89,0,1466,225,1,0,0,0,1467,1475,3,240,
		120,0,1468,1475,5,40,0,0,1469,1475,5,37,0,0,1470,1475,5,1,0,0,1471,1475,
		5,12,0,0,1472,1475,5,44,0,0,1473,1475,5,45,0,0,1474,1467,1,0,0,0,1474,
		1468,1,0,0,0,1474,1469,1,0,0,0,1474,1470,1,0,0,0,1474,1471,1,0,0,0,1474,
		1472,1,0,0,0,1474,1473,1,0,0,0,1475,227,1,0,0,0,1476,1478,3,212,106,0,
		1477,1476,1,0,0,0,1478,1481,1,0,0,0,1479,1477,1,0,0,0,1479,1480,1,0,0,
		0,1480,1482,1,0,0,0,1481,1479,1,0,0,0,1482,1483,5,78,0,0,1483,1484,5,29,
		0,0,1484,1485,3,488,244,0,1485,1486,3,230,115,0,1486,229,1,0,0,0,1487,
		1491,5,70,0,0,1488,1490,3,232,116,0,1489,1488,1,0,0,0,1490,1493,1,0,0,
		0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,1494,1,0,0,0,1493,1491,1,0,
		0,0,1494,1495,5,71,0,0,1495,231,1,0,0,0,1496,1502,3,234,117,0,1497,1502,
		3,220,110,0,1498,1502,3,92,46,0,1499,1502,3,208,104,0,1500,1502,5,74,0,
		0,1501,1496,1,0,0,0,1501,1497,1,0,0,0,1501,1498,1,0,0,0,1501,1499,1,0,
		0,0,1501,1500,1,0,0,0,1502,233,1,0,0,0,1503,1505,3,236,118,0,1504,1503,
		1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,1507,1,0,0,0,1507,1509,
		1,0,0,0,1508,1506,1,0,0,0,1509,1510,3,126,63,0,1510,1511,3,488,244,0,1511,
		1512,5,68,0,0,1512,1514,5,69,0,0,1513,1515,3,30,15,0,1514,1513,1,0,0,0,
		1514,1515,1,0,0,0,1515,1517,1,0,0,0,1516,1518,3,238,119,0,1517,1516,1,
		0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,1520,5,74,0,0,1520,235,
		1,0,0,0,1521,1525,3,240,120,0,1522,1525,5,40,0,0,1523,1525,5,1,0,0,1524,
		1521,1,0,0,0,1524,1522,1,0,0,0,1524,1523,1,0,0,0,1525,237,1,0,0,0,1526,
		1527,5,12,0,0,1527,1528,3,248,124,0,1528,239,1,0,0,0,1529,1533,3,242,121,
		0,1530,1533,3,254,127,0,1531,1533,3,256,128,0,1532,1529,1,0,0,0,1532,1530,
		1,0,0,0,1532,1531,1,0,0,0,1533,241,1,0,0,0,1534,1535,5,78,0,0,1535,1536,
		3,54,27,0,1536,1538,5,68,0,0,1537,1539,3,244,122,0,1538,1537,1,0,0,0,1538,
		1539,1,0,0,0,1539,1540,1,0,0,0,1540,1541,5,69,0,0,1541,243,1,0,0,0,1542,
		1547,3,246,123,0,1543,1544,5,75,0,0,1544,1546,3,246,123,0,1545,1543,1,
		0,0,0,1546,1549,1,0,0,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,245,1,
		0,0,0,1549,1547,1,0,0,0,1550,1551,3,488,244,0,1551,1552,5,80,0,0,1552,
		1553,3,248,124,0,1553,247,1,0,0,0,1554,1558,3,446,223,0,1555,1558,3,250,
		125,0,1556,1558,3,240,120,0,1557,1554,1,0,0,0,1557,1555,1,0,0,0,1557,1556,
		1,0,0,0,1558,249,1,0,0,0,1559,1561,5,70,0,0,1560,1562,3,252,126,0,1561,
		1560,1,0,0,0,1561,1562,1,0,0,0,1562,1564,1,0,0,0,1563,1565,5,75,0,0,1564,
		1563,1,0,0,0,1564,1565,1,0,0,0,1565,1566,1,0,0,0,1566,1567,5,71,0,0,1567,
		251,1,0,0,0,1568,1573,3,248,124,0,1569,1570,5,75,0,0,1570,1572,3,248,124,
		0,1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,
		0,0,1574,253,1,0,0,0,1575,1573,1,0,0,0,1576,1577,5,78,0,0,1577,1578,3,
		54,27,0,1578,255,1,0,0,0,1579,1580,5,78,0,0,1580,1581,3,54,27,0,1581,1582,
		5,68,0,0,1582,1583,3,248,124,0,1583,1584,5,69,0,0,1584,257,1,0,0,0,1585,
		1587,5,70,0,0,1586,1588,3,260,130,0,1587,1586,1,0,0,0,1587,1588,1,0,0,
		0,1588,1590,1,0,0,0,1589,1591,5,75,0,0,1590,1589,1,0,0,0,1590,1591,1,0,
		0,0,1591,1592,1,0,0,0,1592,1593,5,71,0,0,1593,259,1,0,0,0,1594,1599,3,
		124,62,0,1595,1596,5,75,0,0,1596,1598,3,124,62,0,1597,1595,1,0,0,0,1598,
		1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,261,1,0,0,0,1601,
		1599,1,0,0,0,1602,1604,5,70,0,0,1603,1605,3,264,132,0,1604,1603,1,0,0,
		0,1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,1607,5,71,0,0,1607,263,1,0,
		0,0,1608,1610,3,266,133,0,1609,1608,1,0,0,0,1610,1611,1,0,0,0,1611,1609,
		1,0,0,0,1611,1612,1,0,0,0,1612,265,1,0,0,0,1613,1617,3,268,134,0,1614,
		1617,3,92,46,0,1615,1617,3,272,136,0,1616,1613,1,0,0,0,1616,1614,1,0,0,
		0,1616,1615,1,0,0,0,1617,267,1,0,0,0,1618,1619,3,270,135,0,1619,1620,5,
		74,0,0,1620,269,1,0,0,0,1621,1623,3,166,83,0,1622,1621,1,0,0,0,1623,1626,
		1,0,0,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1624,
		1,0,0,0,1627,1628,3,126,63,0,1628,1629,3,118,59,0,1629,271,1,0,0,0,1630,
		1637,3,276,138,0,1631,1637,3,280,140,0,1632,1637,3,288,144,0,1633,1637,
		3,290,145,0,1634,1637,3,308,154,0,1635,1637,3,314,157,0,1636,1630,1,0,
		0,0,1636,1631,1,0,0,0,1636,1632,1,0,0,0,1636,1633,1,0,0,0,1636,1634,1,
		0,0,0,1636,1635,1,0,0,0,1637,273,1,0,0,0,1638,1644,3,276,138,0,1639,1644,
		3,282,141,0,1640,1644,3,292,146,0,1641,1644,3,310,155,0,1642,1644,3,316,
		158,0,1643,1638,1,0,0,0,1643,1639,1,0,0,0,1643,1640,1,0,0,0,1643,1641,
		1,0,0,0,1643,1642,1,0,0,0,1644,275,1,0,0,0,1645,1658,3,262,131,0,1646,
		1658,3,278,139,0,1647,1658,3,284,142,0,1648,1658,3,294,147,0,1649,1658,
		3,296,148,0,1650,1658,3,312,156,0,1651,1658,3,332,166,0,1652,1658,3,334,
		167,0,1653,1658,3,336,168,0,1654,1658,3,340,170,0,1655,1658,3,338,169,
		0,1656,1658,3,342,171,0,1657,1645,1,0,0,0,1657,1646,1,0,0,0,1657,1647,
		1,0,0,0,1657,1648,1,0,0,0,1657,1649,1,0,0,0,1657,1650,1,0,0,0,1657,1651,
		1,0,0,0,1657,1652,1,0,0,0,1657,1653,1,0,0,0,1657,1654,1,0,0,0,1657,1655,
		1,0,0,0,1657,1656,1,0,0,0,1658,277,1,0,0,0,1659,1660,5,74,0,0,1660,279,
		1,0,0,0,1661,1662,3,488,244,0,1662,1663,5,86,0,0,1663,1664,3,272,136,0,
		1664,281,1,0,0,0,1665,1666,3,488,244,0,1666,1667,5,86,0,0,1667,1668,3,
		274,137,0,1668,283,1,0,0,0,1669,1670,3,286,143,0,1670,1671,5,74,0,0,1671,
		285,1,0,0,0,1672,1680,3,440,220,0,1673,1680,3,470,235,0,1674,1680,3,472,
		236,0,1675,1680,3,478,239,0,1676,1680,3,482,241,0,1677,1680,3,406,203,
		0,1678,1680,3,386,193,0,1679,1672,1,0,0,0,1679,1673,1,0,0,0,1679,1674,
		1,0,0,0,1679,1675,1,0,0,0,1679,1676,1,0,0,0,1679,1677,1,0,0,0,1679,1678,
		1,0,0,0,1680,287,1,0,0,0,1681,1682,5,23,0,0,1682,1683,5,68,0,0,1683,1684,
		3,428,214,0,1684,1685,5,69,0,0,1685,1686,3,272,136,0,1686,289,1,0,0,0,
		1687,1688,5,23,0,0,1688,1689,5,68,0,0,1689,1690,3,428,214,0,1690,1691,
		5,69,0,0,1691,1692,3,274,137,0,1692,1693,5,15,0,0,1693,1694,3,272,136,
		0,1694,291,1,0,0,0,1695,1696,5,23,0,0,1696,1697,5,68,0,0,1697,1698,3,428,
		214,0,1698,1699,5,69,0,0,1699,1700,3,274,137,0,1700,1701,5,15,0,0,1701,
		1702,3,274,137,0,1702,293,1,0,0,0,1703,1704,5,2,0,0,1704,1705,3,428,214,
		0,1705,1706,5,74,0,0,1706,1714,1,0,0,0,1707,1708,5,2,0,0,1708,1709,3,428,
		214,0,1709,1710,5,86,0,0,1710,1711,3,428,214,0,1711,1712,5,74,0,0,1712,
		1714,1,0,0,0,1713,1703,1,0,0,0,1713,1707,1,0,0,0,1714,295,1,0,0,0,1715,
		1716,5,47,0,0,1716,1717,5,68,0,0,1717,1718,3,428,214,0,1718,1719,5,69,
		0,0,1719,1720,3,298,149,0,1720,297,1,0,0,0,1721,1725,5,70,0,0,1722,1724,
		3,300,150,0,1723,1722,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,1725,
		1726,1,0,0,0,1726,1731,1,0,0,0,1727,1725,1,0,0,0,1728,1730,3,304,152,0,
		1729,1728,1,0,0,0,1730,1733,1,0,0,0,1731,1729,1,0,0,0,1731,1732,1,0,0,
		0,1732,1734,1,0,0,0,1733,1731,1,0,0,0,1734,1735,5,71,0,0,1735,299,1,0,
		0,0,1736,1737,3,302,151,0,1737,1738,3,264,132,0,1738,301,1,0,0,0,1739,
		1741,3,304,152,0,1740,1739,1,0,0,0,1741,1742,1,0,0,0,1742,1740,1,0,0,0,
		1742,1743,1,0,0,0,1743,303,1,0,0,0,1744,1745,5,6,0,0,1745,1746,3,426,213,
		0,1746,1747,5,86,0,0,1747,1755,1,0,0,0,1748,1749,5,6,0,0,1749,1750,3,306,
		153,0,1750,1751,5,86,0,0,1751,1755,1,0,0,0,1752,1753,5,12,0,0,1753,1755,
		5,86,0,0,1754,1744,1,0,0,0,1754,1748,1,0,0,0,1754,1752,1,0,0,0,1755,305,
		1,0,0,0,1756,1757,3,488,244,0,1757,307,1,0,0,0,1758,1759,5,59,0,0,1759,
		1760,5,68,0,0,1760,1761,3,428,214,0,1761,1762,5,69,0,0,1762,1763,3,272,
		136,0,1763,309,1,0,0,0,1764,1765,5,59,0,0,1765,1766,5,68,0,0,1766,1767,
		3,428,214,0,1767,1768,5,69,0,0,1768,1769,3,274,137,0,1769,311,1,0,0,0,
		1770,1771,5,13,0,0,1771,1772,3,272,136,0,1772,1773,5,59,0,0,1773,1774,
		5,68,0,0,1774,1775,3,428,214,0,1775,1776,5,69,0,0,1776,1777,5,74,0,0,1777,
		313,1,0,0,0,1778,1781,3,318,159,0,1779,1781,3,328,164,0,1780,1778,1,0,
		0,0,1780,1779,1,0,0,0,1781,315,1,0,0,0,1782,1785,3,320,160,0,1783,1785,
		3,330,165,0,1784,1782,1,0,0,0,1784,1783,1,0,0,0,1785,317,1,0,0,0,1786,
		1787,5,22,0,0,1787,1789,5,68,0,0,1788,1790,3,322,161,0,1789,1788,1,0,0,
		0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1793,5,74,0,0,1792,1794,3,428,
		214,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1795,1,0,0,0,1795,1797,
		5,74,0,0,1796,1798,3,324,162,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,
		1799,1,0,0,0,1799,1800,5,69,0,0,1800,1801,3,272,136,0,1801,319,1,0,0,0,
		1802,1803,5,22,0,0,1803,1805,5,68,0,0,1804,1806,3,322,161,0,1805,1804,
		1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,1809,5,74,0,0,1808,1810,
		3,428,214,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,
		1813,5,74,0,0,1812,1814,3,324,162,0,1813,1812,1,0,0,0,1813,1814,1,0,0,
		0,1814,1815,1,0,0,0,1815,1816,5,69,0,0,1816,1817,3,274,137,0,1817,321,
		1,0,0,0,1818,1821,3,326,163,0,1819,1821,3,270,135,0,1820,1818,1,0,0,0,
		1820,1819,1,0,0,0,1821,323,1,0,0,0,1822,1823,3,326,163,0,1823,325,1,0,
		0,0,1824,1829,3,286,143,0,1825,1826,5,75,0,0,1826,1828,3,286,143,0,1827,
		1825,1,0,0,0,1828,1831,1,0,0,0,1829,1827,1,0,0,0,1829,1830,1,0,0,0,1830,
		327,1,0,0,0,1831,1829,1,0,0,0,1832,1833,5,22,0,0,1833,1837,5,68,0,0,1834,
		1836,3,166,83,0,1835,1834,1,0,0,0,1836,1839,1,0,0,0,1837,1835,1,0,0,0,
		1837,1838,1,0,0,0,1838,1840,1,0,0,0,1839,1837,1,0,0,0,1840,1841,3,126,
		63,0,1841,1842,3,122,61,0,1842,1843,5,86,0,0,1843,1844,3,428,214,0,1844,
		1845,5,69,0,0,1845,1846,3,272,136,0,1846,329,1,0,0,0,1847,1848,5,22,0,
		0,1848,1852,5,68,0,0,1849,1851,3,166,83,0,1850,1849,1,0,0,0,1851,1854,
		1,0,0,0,1852,1850,1,0,0,0,1852,1853,1,0,0,0,1853,1855,1,0,0,0,1854,1852,
		1,0,0,0,1855,1856,3,126,63,0,1856,1857,3,122,61,0,1857,1858,5,86,0,0,1858,
		1859,3,428,214,0,1859,1860,5,69,0,0,1860,1861,3,274,137,0,1861,331,1,0,
		0,0,1862,1864,5,4,0,0,1863,1865,3,488,244,0,1864,1863,1,0,0,0,1864,1865,
		1,0,0,0,1865,1866,1,0,0,0,1866,1867,5,74,0,0,1867,333,1,0,0,0,1868,1870,
		5,11,0,0,1869,1871,3,488,244,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,
		1872,1,0,0,0,1872,1873,5,74,0,0,1873,335,1,0,0,0,1874,1876,5,42,0,0,1875,
		1877,3,428,214,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,
		1878,1879,5,74,0,0,1879,337,1,0,0,0,1880,1881,5,50,0,0,1881,1882,3,428,
		214,0,1882,1883,5,74,0,0,1883,339,1,0,0,0,1884,1885,5,48,0,0,1885,1886,
		5,68,0,0,1886,1887,3,428,214,0,1887,1888,5,69,0,0,1888,1889,3,262,131,
		0,1889,341,1,0,0,0,1890,1891,5,55,0,0,1891,1892,3,262,131,0,1892,1893,
		3,344,172,0,1893,1903,1,0,0,0,1894,1895,5,55,0,0,1895,1897,3,262,131,0,
		1896,1898,3,344,172,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,
		0,0,0,1899,1900,3,352,176,0,1900,1903,1,0,0,0,1901,1903,3,354,177,0,1902,
		1890,1,0,0,0,1902,1894,1,0,0,0,1902,1901,1,0,0,0,1903,343,1,0,0,0,1904,
		1906,3,346,173,0,1905,1904,1,0,0,0,1906,1907,1,0,0,0,1907,1905,1,0,0,0,
		1907,1908,1,0,0,0,1908,345,1,0,0,0,1909,1910,5,7,0,0,1910,1911,5,68,0,
		0,1911,1912,3,348,174,0,1912,1913,5,69,0,0,1913,1914,3,262,131,0,1914,
		347,1,0,0,0,1915,1917,3,166,83,0,1916,1915,1,0,0,0,1917,1920,1,0,0,0,1918,
		1916,1,0,0,0,1918,1919,1,0,0,0,1919,1921,1,0,0,0,1920,1918,1,0,0,0,1921,
		1922,3,350,175,0,1922,1923,3,122,61,0,1923,349,1,0,0,0,1924,1929,3,134,
		67,0,1925,1926,5,101,0,0,1926,1928,3,14,7,0,1927,1925,1,0,0,0,1928,1931,
		1,0,0,0,1929,1927,1,0,0,0,1929,1930,1,0,0,0,1930,351,1,0,0,0,1931,1929,
		1,0,0,0,1932,1933,5,20,0,0,1933,1934,3,262,131,0,1934,353,1,0,0,0,1935,
		1936,5,55,0,0,1936,1937,3,356,178,0,1937,1939,3,262,131,0,1938,1940,3,
		344,172,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1942,1,0,0,0,1941,1943,
		3,352,176,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,355,1,0,0,0,1944,
		1945,5,68,0,0,1945,1947,3,358,179,0,1946,1948,5,74,0,0,1947,1946,1,0,0,
		0,1947,1948,1,0,0,0,1948,1949,1,0,0,0,1949,1950,5,69,0,0,1950,357,1,0,
		0,0,1951,1956,3,360,180,0,1952,1953,5,74,0,0,1953,1955,3,360,180,0,1954,
		1952,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,0,0,1956,1957,1,0,0,0,1957,
		359,1,0,0,0,1958,1956,1,0,0,0,1959,1961,3,166,83,0,1960,1959,1,0,0,0,1961,
		1964,1,0,0,0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1965,1,0,0,0,1964,
		1962,1,0,0,0,1965,1966,3,126,63,0,1966,1967,3,122,61,0,1967,1968,5,80,
		0,0,1968,1969,3,428,214,0,1969,1972,1,0,0,0,1970,1972,3,362,181,0,1971,
		1962,1,0,0,0,1971,1970,1,0,0,0,1972,361,1,0,0,0,1973,1976,3,58,29,0,1974,
		1976,3,394,197,0,1975,1973,1,0,0,0,1975,1974,1,0,0,0,1976,363,1,0,0,0,
		1977,1980,3,378,189,0,1978,1980,3,420,210,0,1979,1977,1,0,0,0,1979,1978,
		1,0,0,0,1980,1984,1,0,0,0,1981,1983,3,372,186,0,1982,1981,1,0,0,0,1983,
		1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,1,0,0,0,1985,365,1,0,0,0,1986,
		1984,1,0,0,0,1987,2004,3,0,0,0,1988,2004,3,384,192,0,1989,2004,5,49,0,
		0,1990,1991,3,54,27,0,1991,1992,5,76,0,0,1992,1993,5,49,0,0,1993,2004,
		1,0,0,0,1994,1995,5,68,0,0,1995,1996,3,428,214,0,1996,1997,5,69,0,0,1997,
		2004,1,0,0,0,1998,2004,3,386,193,0,1999,2004,3,394,197,0,2000,2004,3,400,
		200,0,2001,2004,3,406,203,0,2002,2004,3,414,207,0,2003,1987,1,0,0,0,2003,
		1988,1,0,0,0,2003,1989,1,0,0,0,2003,1990,1,0,0,0,2003,1994,1,0,0,0,2003,
		1998,1,0,0,0,2003,1999,1,0,0,0,2003,2000,1,0,0,0,2003,2001,1,0,0,0,2003,
		2002,1,0,0,0,2004,367,1,0,0,0,2005,2006,1,0,0,0,2006,369,1,0,0,0,2007,
		2036,3,0,0,0,2008,2013,3,54,27,0,2009,2010,5,72,0,0,2010,2012,5,73,0,0,
		2011,2009,1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,
		0,2014,2016,1,0,0,0,2015,2013,1,0,0,0,2016,2017,5,76,0,0,2017,2018,5,9,
		0,0,2018,2036,1,0,0,0,2019,2020,5,57,0,0,2020,2021,5,76,0,0,2021,2036,
		5,9,0,0,2022,2036,5,49,0,0,2023,2024,3,54,27,0,2024,2025,5,76,0,0,2025,
		2026,5,49,0,0,2026,2036,1,0,0,0,2027,2028,5,68,0,0,2028,2029,3,428,214,
		0,2029,2030,5,69,0,0,2030,2036,1,0,0,0,2031,2036,3,386,193,0,2032,2036,
		3,394,197,0,2033,2036,3,406,203,0,2034,2036,3,414,207,0,2035,2007,1,0,
		0,0,2035,2008,1,0,0,0,2035,2019,1,0,0,0,2035,2022,1,0,0,0,2035,2023,1,
		0,0,0,2035,2027,1,0,0,0,2035,2031,1,0,0,0,2035,2032,1,0,0,0,2035,2033,
		1,0,0,0,2035,2034,1,0,0,0,2036,371,1,0,0,0,2037,2043,3,388,194,0,2038,
		2043,3,396,198,0,2039,2043,3,402,201,0,2040,2043,3,408,204,0,2041,2043,
		3,416,208,0,2042,2037,1,0,0,0,2042,2038,1,0,0,0,2042,2039,1,0,0,0,2042,
		2040,1,0,0,0,2042,2041,1,0,0,0,2043,373,1,0,0,0,2044,2045,1,0,0,0,2045,
		375,1,0,0,0,2046,2051,3,388,194,0,2047,2051,3,396,198,0,2048,2051,3,408,
		204,0,2049,2051,3,416,208,0,2050,2046,1,0,0,0,2050,2047,1,0,0,0,2050,2048,
		1,0,0,0,2050,2049,1,0,0,0,2051,377,1,0,0,0,2052,2093,3,0,0,0,2053,2058,
		3,54,27,0,2054,2055,5,72,0,0,2055,2057,5,73,0,0,2056,2054,1,0,0,0,2057,
		2060,1,0,0,0,2058,2056,1,0,0,0,2058,2059,1,0,0,0,2059,2061,1,0,0,0,2060,
		2058,1,0,0,0,2061,2062,5,76,0,0,2062,2063,5,9,0,0,2063,2093,1,0,0,0,2064,
		2069,3,128,64,0,2065,2066,5,72,0,0,2066,2068,5,73,0,0,2067,2065,1,0,0,
		0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,2072,1,0,
		0,0,2071,2069,1,0,0,0,2072,2073,5,76,0,0,2073,2074,5,9,0,0,2074,2093,1,
		0,0,0,2075,2076,5,57,0,0,2076,2077,5,76,0,0,2077,2093,5,9,0,0,2078,2093,
		5,49,0,0,2079,2080,3,54,27,0,2080,2081,5,76,0,0,2081,2082,5,49,0,0,2082,
		2093,1,0,0,0,2083,2084,5,68,0,0,2084,2085,3,428,214,0,2085,2086,5,69,0,
		0,2086,2093,1,0,0,0,2087,2093,3,390,195,0,2088,2093,3,398,199,0,2089,2093,
		3,404,202,0,2090,2093,3,410,205,0,2091,2093,3,418,209,0,2092,2052,1,0,
		0,0,2092,2053,1,0,0,0,2092,2064,1,0,0,0,2092,2075,1,0,0,0,2092,2078,1,
		0,0,0,2092,2079,1,0,0,0,2092,2083,1,0,0,0,2092,2087,1,0,0,0,2092,2088,
		1,0,0,0,2092,2089,1,0,0,0,2092,2090,1,0,0,0,2092,2091,1,0,0,0,2093,379,
		1,0,0,0,2094,2095,1,0,0,0,2095,381,1,0,0,0,2096,2136,3,0,0,0,2097,2102,
		3,54,27,0,2098,2099,5,72,0,0,2099,2101,5,73,0,0,2100,2098,1,0,0,0,2101,
		2104,1,0,0,0,2102,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2105,1,0,0,0,2104,
		2102,1,0,0,0,2105,2106,5,76,0,0,2106,2107,5,9,0,0,2107,2136,1,0,0,0,2108,
		2113,3,128,64,0,2109,2110,5,72,0,0,2110,2112,5,73,0,0,2111,2109,1,0,0,
		0,2112,2115,1,0,0,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,2116,1,0,
		0,0,2115,2113,1,0,0,0,2116,2117,5,76,0,0,2117,2118,5,9,0,0,2118,2136,1,
		0,0,0,2119,2120,5,57,0,0,2120,2121,5,76,0,0,2121,2136,5,9,0,0,2122,2136,
		5,49,0,0,2123,2124,3,54,27,0,2124,2125,5,76,0,0,2125,2126,5,49,0,0,2126,
		2136,1,0,0,0,2127,2128,5,68,0,0,2128,2129,3,428,214,0,2129,2130,5,69,0,
		0,2130,2136,1,0,0,0,2131,2136,3,390,195,0,2132,2136,3,398,199,0,2133,2136,
		3,410,205,0,2134,2136,3,418,209,0,2135,2096,1,0,0,0,2135,2097,1,0,0,0,
		2135,2108,1,0,0,0,2135,2119,1,0,0,0,2135,2122,1,0,0,0,2135,2123,1,0,0,
		0,2135,2127,1,0,0,0,2135,2131,1,0,0,0,2135,2132,1,0,0,0,2135,2133,1,0,
		0,0,2135,2134,1,0,0,0,2136,383,1,0,0,0,2137,2141,3,54,27,0,2138,2141,3,
		4,2,0,2139,2141,5,3,0,0,2140,2137,1,0,0,0,2140,2138,1,0,0,0,2140,2139,
		1,0,0,0,2141,2146,1,0,0,0,2142,2143,5,72,0,0,2143,2145,5,73,0,0,2144,2142,
		1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2149,
		1,0,0,0,2148,2146,1,0,0,0,2149,2150,5,76,0,0,2150,2155,5,9,0,0,2151,2152,
		5,57,0,0,2152,2153,5,76,0,0,2153,2155,5,9,0,0,2154,2140,1,0,0,0,2154,2151,
		1,0,0,0,2155,385,1,0,0,0,2156,2158,5,33,0,0,2157,2159,3,40,20,0,2158,2157,
		1,0,0,0,2158,2159,1,0,0,0,2159,2163,1,0,0,0,2160,2162,3,240,120,0,2161,
		2160,1,0,0,0,2162,2165,1,0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,
		2166,1,0,0,0,2165,2163,1,0,0,0,2166,2177,3,488,244,0,2167,2171,5,76,0,
		0,2168,2170,3,240,120,0,2169,2168,1,0,0,0,2170,2173,1,0,0,0,2171,2169,
		1,0,0,0,2171,2172,1,0,0,0,2172,2174,1,0,0,0,2173,2171,1,0,0,0,2174,2176,
		3,488,244,0,2175,2167,1,0,0,0,2176,2179,1,0,0,0,2177,2175,1,0,0,0,2177,
		2178,1,0,0,0,2178,2181,1,0,0,0,2179,2177,1,0,0,0,2180,2182,3,392,196,0,
		2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2183,1,0,0,0,2183,2185,5,68,0,
		0,2184,2186,3,412,206,0,2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,2187,
		1,0,0,0,2187,2189,5,69,0,0,2188,2190,3,108,54,0,2189,2188,1,0,0,0,2189,
		2190,1,0,0,0,2190,2240,1,0,0,0,2191,2192,3,58,29,0,2192,2193,5,76,0,0,
		2193,2195,5,33,0,0,2194,2196,3,40,20,0,2195,2194,1,0,0,0,2195,2196,1,0,
		0,0,2196,2200,1,0,0,0,2197,2199,3,240,120,0,2198,2197,1,0,0,0,2199,2202,
		1,0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,0,0,2202,2200,
		1,0,0,0,2203,2205,3,488,244,0,2204,2206,3,392,196,0,2205,2204,1,0,0,0,
		2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2209,5,68,0,0,2208,2210,3,412,
		206,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,0,0,2211,2213,
		5,69,0,0,2212,2214,3,108,54,0,2213,2212,1,0,0,0,2213,2214,1,0,0,0,2214,
		2240,1,0,0,0,2215,2216,3,364,182,0,2216,2217,5,76,0,0,2217,2219,5,33,0,
		0,2218,2220,3,40,20,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2224,1,
		0,0,0,2221,2223,3,240,120,0,2222,2221,1,0,0,0,2223,2226,1,0,0,0,2224,2222,
		1,0,0,0,2224,2225,1,0,0,0,2225,2227,1,0,0,0,2226,2224,1,0,0,0,2227,2229,
		3,488,244,0,2228,2230,3,392,196,0,2229,2228,1,0,0,0,2229,2230,1,0,0,0,
		2230,2231,1,0,0,0,2231,2233,5,68,0,0,2232,2234,3,412,206,0,2233,2232,1,
		0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,2235,2237,5,69,0,0,2236,2238,
		3,108,54,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,2240,1,0,0,0,2239,
		2156,1,0,0,0,2239,2191,1,0,0,0,2239,2215,1,0,0,0,2240,387,1,0,0,0,2241,
		2242,5,76,0,0,2242,2244,5,33,0,0,2243,2245,3,40,20,0,2244,2243,1,0,0,0,
		2244,2245,1,0,0,0,2245,2249,1,0,0,0,2246,2248,3,240,120,0,2247,2246,1,
		0,0,0,2248,2251,1,0,0,0,2249,2247,1,0,0,0,2249,2250,1,0,0,0,2250,2252,
		1,0,0,0,2251,2249,1,0,0,0,2252,2254,3,488,244,0,2253,2255,3,392,196,0,
		2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2258,5,68,0,
		0,2257,2259,3,412,206,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,2260,
		1,0,0,0,2260,2262,5,69,0,0,2261,2263,3,108,54,0,2262,2261,1,0,0,0,2262,
		2263,1,0,0,0,2263,389,1,0,0,0,2264,2266,5,33,0,0,2265,2267,3,40,20,0,2266,
		2265,1,0,0,0,2266,2267,1,0,0,0,2267,2271,1,0,0,0,2268,2270,3,240,120,0,
		2269,2268,1,0,0,0,2270,2273,1,0,0,0,2271,2269,1,0,0,0,2271,2272,1,0,0,
		0,2272,2274,1,0,0,0,2273,2271,1,0,0,0,2274,2285,3,488,244,0,2275,2279,
		5,76,0,0,2276,2278,3,240,120,0,2277,2276,1,0,0,0,2278,2281,1,0,0,0,2279,
		2277,1,0,0,0,2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2279,1,0,0,0,2282,
		2284,3,488,244,0,2283,2275,1,0,0,0,2284,2287,1,0,0,0,2285,2283,1,0,0,0,
		2285,2286,1,0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2288,2290,3,392,
		196,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2293,
		5,68,0,0,2292,2294,3,412,206,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,
		2295,1,0,0,0,2295,2297,5,69,0,0,2296,2298,3,108,54,0,2297,2296,1,0,0,0,
		2297,2298,1,0,0,0,2298,2324,1,0,0,0,2299,2300,3,58,29,0,2300,2301,5,76,
		0,0,2301,2303,5,33,0,0,2302,2304,3,40,20,0,2303,2302,1,0,0,0,2303,2304,
		1,0,0,0,2304,2308,1,0,0,0,2305,2307,3,240,120,0,2306,2305,1,0,0,0,2307,
		2310,1,0,0,0,2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,2311,1,0,0,0,2310,
		2308,1,0,0,0,2311,2313,3,488,244,0,2312,2314,3,392,196,0,2313,2312,1,0,
		0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,2317,5,68,0,0,2316,2318,3,
		412,206,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2319,1,0,0,0,2319,2321,
		5,69,0,0,2320,2322,3,108,54,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,
		2324,1,0,0,0,2323,2264,1,0,0,0,2323,2299,1,0,0,0,2324,391,1,0,0,0,2325,
		2329,3,40,20,0,2326,2327,5,82,0,0,2327,2329,5,81,0,0,2328,2325,1,0,0,0,
		2328,2326,1,0,0,0,2329,393,1,0,0,0,2330,2331,3,364,182,0,2331,2332,5,76,
		0,0,2332,2333,3,488,244,0,2333,2344,1,0,0,0,2334,2335,5,46,0,0,2335,2336,
		5,76,0,0,2336,2344,3,488,244,0,2337,2338,3,54,27,0,2338,2339,5,76,0,0,
		2339,2340,5,46,0,0,2340,2341,5,76,0,0,2341,2342,3,488,244,0,2342,2344,
		1,0,0,0,2343,2330,1,0,0,0,2343,2334,1,0,0,0,2343,2337,1,0,0,0,2344,395,
		1,0,0,0,2345,2346,5,76,0,0,2346,2347,3,488,244,0,2347,397,1,0,0,0,2348,
		2349,5,46,0,0,2349,2350,5,76,0,0,2350,2358,3,488,244,0,2351,2352,3,54,
		27,0,2352,2353,5,76,0,0,2353,2354,5,46,0,0,2354,2355,5,76,0,0,2355,2356,
		3,488,244,0,2356,2358,1,0,0,0,2357,2348,1,0,0,0,2357,2351,1,0,0,0,2358,
		399,1,0,0,0,2359,2360,3,58,29,0,2360,2361,5,72,0,0,2361,2362,3,428,214,
		0,2362,2363,5,73,0,0,2363,2370,1,0,0,0,2364,2365,3,370,185,0,2365,2366,
		5,72,0,0,2366,2367,3,428,214,0,2367,2368,5,73,0,0,2368,2370,1,0,0,0,2369,
		2359,1,0,0,0,2369,2364,1,0,0,0,2370,2378,1,0,0,0,2371,2372,3,368,184,0,
		2372,2373,5,72,0,0,2373,2374,3,428,214,0,2374,2375,5,73,0,0,2375,2377,
		1,0,0,0,2376,2371,1,0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,2379,
		1,0,0,0,2379,401,1,0,0,0,2380,2378,1,0,0,0,2381,2382,3,376,188,0,2382,
		2383,5,72,0,0,2383,2384,3,428,214,0,2384,2385,5,73,0,0,2385,2393,1,0,0,
		0,2386,2387,3,374,187,0,2387,2388,5,72,0,0,2388,2389,3,428,214,0,2389,
		2390,5,73,0,0,2390,2392,1,0,0,0,2391,2386,1,0,0,0,2392,2395,1,0,0,0,2393,
		2391,1,0,0,0,2393,2394,1,0,0,0,2394,403,1,0,0,0,2395,2393,1,0,0,0,2396,
		2397,3,58,29,0,2397,2398,5,72,0,0,2398,2399,3,428,214,0,2399,2400,5,73,
		0,0,2400,2407,1,0,0,0,2401,2402,3,382,191,0,2402,2403,5,72,0,0,2403,2404,
		3,428,214,0,2404,2405,5,73,0,0,2405,2407,1,0,0,0,2406,2396,1,0,0,0,2406,
		2401,1,0,0,0,2407,2415,1,0,0,0,2408,2409,3,380,190,0,2409,2410,5,72,0,
		0,2410,2411,3,428,214,0,2411,2412,5,73,0,0,2412,2414,1,0,0,0,2413,2408,
		1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,405,
		1,0,0,0,2417,2415,1,0,0,0,2418,2419,3,60,30,0,2419,2421,5,68,0,0,2420,
		2422,3,412,206,0,2421,2420,1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,0,0,
		2423,2424,5,69,0,0,2424,2488,1,0,0,0,2425,2426,3,54,27,0,2426,2428,5,76,
		0,0,2427,2429,3,40,20,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,
		1,0,0,0,2430,2431,3,488,244,0,2431,2433,5,68,0,0,2432,2434,3,412,206,0,
		2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2435,1,0,0,0,2435,2436,5,69,0,
		0,2436,2488,1,0,0,0,2437,2438,3,58,29,0,2438,2440,5,76,0,0,2439,2441,3,
		40,20,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,2442,1,0,0,0,2442,2443,
		3,488,244,0,2443,2445,5,68,0,0,2444,2446,3,412,206,0,2445,2444,1,0,0,0,
		2445,2446,1,0,0,0,2446,2447,1,0,0,0,2447,2448,5,69,0,0,2448,2488,1,0,0,
		0,2449,2450,3,364,182,0,2450,2452,5,76,0,0,2451,2453,3,40,20,0,2452,2451,
		1,0,0,0,2452,2453,1,0,0,0,2453,2454,1,0,0,0,2454,2455,3,488,244,0,2455,
		2457,5,68,0,0,2456,2458,3,412,206,0,2457,2456,1,0,0,0,2457,2458,1,0,0,
		0,2458,2459,1,0,0,0,2459,2460,5,69,0,0,2460,2488,1,0,0,0,2461,2462,5,46,
		0,0,2462,2464,5,76,0,0,2463,2465,3,40,20,0,2464,2463,1,0,0,0,2464,2465,
		1,0,0,0,2465,2466,1,0,0,0,2466,2467,3,488,244,0,2467,2469,5,68,0,0,2468,
		2470,3,412,206,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,2471,1,0,0,0,
		2471,2472,5,69,0,0,2472,2488,1,0,0,0,2473,2474,3,54,27,0,2474,2475,5,76,
		0,0,2475,2476,5,46,0,0,2476,2478,5,76,0,0,2477,2479,3,40,20,0,2478,2477,
		1,0,0,0,2478,2479,1,0,0,0,2479,2480,1,0,0,0,2480,2481,3,488,244,0,2481,
		2483,5,68,0,0,2482,2484,3,412,206,0,2483,2482,1,0,0,0,2483,2484,1,0,0,
		0,2484,2485,1,0,0,0,2485,2486,5,69,0,0,2486,2488,1,0,0,0,2487,2418,1,0,
		0,0,2487,2425,1,0,0,0,2487,2437,1,0,0,0,2487,2449,1,0,0,0,2487,2461,1,
		0,0,0,2487,2473,1,0,0,0,2488,407,1,0,0,0,2489,2491,5,76,0,0,2490,2492,
		3,40,20,0,2491,2490,1,0,0,0,2491,2492,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
		3,488,244,0,2494,2496,5,68,0,0,2495,2497,3,412,206,0,2496,2495,1,0,0,0,
		2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2499,5,69,0,0,2499,409,1,0,0,
		0,2500,2501,3,60,30,0,2501,2503,5,68,0,0,2502,2504,3,412,206,0,2503,2502,
		1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2506,5,69,0,0,2506,2558,
		1,0,0,0,2507,2508,3,54,27,0,2508,2510,5,76,0,0,2509,2511,3,40,20,0,2510,
		2509,1,0,0,0,2510,2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,3,488,244,0,
		2513,2515,5,68,0,0,2514,2516,3,412,206,0,2515,2514,1,0,0,0,2515,2516,1,
		0,0,0,2516,2517,1,0,0,0,2517,2518,5,69,0,0,2518,2558,1,0,0,0,2519,2520,
		3,58,29,0,2520,2522,5,76,0,0,2521,2523,3,40,20,0,2522,2521,1,0,0,0,2522,
		2523,1,0,0,0,2523,2524,1,0,0,0,2524,2525,3,488,244,0,2525,2527,5,68,0,
		0,2526,2528,3,412,206,0,2527,2526,1,0,0,0,2527,2528,1,0,0,0,2528,2529,
		1,0,0,0,2529,2530,5,69,0,0,2530,2558,1,0,0,0,2531,2532,5,46,0,0,2532,2534,
		5,76,0,0,2533,2535,3,40,20,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,2535,
		2536,1,0,0,0,2536,2537,3,488,244,0,2537,2539,5,68,0,0,2538,2540,3,412,
		206,0,2539,2538,1,0,0,0,2539,2540,1,0,0,0,2540,2541,1,0,0,0,2541,2542,
		5,69,0,0,2542,2558,1,0,0,0,2543,2544,3,54,27,0,2544,2545,5,76,0,0,2545,
		2546,5,46,0,0,2546,2548,5,76,0,0,2547,2549,3,40,20,0,2548,2547,1,0,0,0,
		2548,2549,1,0,0,0,2549,2550,1,0,0,0,2550,2551,3,488,244,0,2551,2553,5,
		68,0,0,2552,2554,3,412,206,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,
		2555,1,0,0,0,2555,2556,5,69,0,0,2556,2558,1,0,0,0,2557,2500,1,0,0,0,2557,
		2507,1,0,0,0,2557,2519,1,0,0,0,2557,2531,1,0,0,0,2557,2543,1,0,0,0,2558,
		411,1,0,0,0,2559,2564,3,428,214,0,2560,2561,5,75,0,0,2561,2563,3,428,214,
		0,2562,2560,1,0,0,0,2563,2566,1,0,0,0,2564,2562,1,0,0,0,2564,2565,1,0,
		0,0,2565,413,1,0,0,0,2566,2564,1,0,0,0,2567,2568,3,58,29,0,2568,2570,5,
		79,0,0,2569,2571,3,40,20,0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,
		1,0,0,0,2572,2573,3,488,244,0,2573,2615,1,0,0,0,2574,2575,3,10,5,0,2575,
		2577,5,79,0,0,2576,2578,3,40,20,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,
		2578,2579,1,0,0,0,2579,2580,3,488,244,0,2580,2615,1,0,0,0,2581,2582,3,
		364,182,0,2582,2584,5,79,0,0,2583,2585,3,40,20,0,2584,2583,1,0,0,0,2584,
		2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,3,488,244,0,2587,2615,1,0,0,0,
		2588,2589,5,46,0,0,2589,2591,5,79,0,0,2590,2592,3,40,20,0,2591,2590,1,
		0,0,0,2591,2592,1,0,0,0,2592,2593,1,0,0,0,2593,2615,3,488,244,0,2594,2595,
		3,54,27,0,2595,2596,5,76,0,0,2596,2597,5,46,0,0,2597,2599,5,79,0,0,2598,
		2600,3,40,20,0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,2600,2601,1,0,0,0,2601,
		2602,3,488,244,0,2602,2615,1,0,0,0,2603,2604,3,14,7,0,2604,2606,5,79,0,
		0,2605,2607,3,40,20,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,1,
		0,0,0,2608,2609,5,33,0,0,2609,2615,1,0,0,0,2610,2611,3,28,14,0,2611,2612,
		5,79,0,0,2612,2613,5,33,0,0,2613,2615,1,0,0,0,2614,2567,1,0,0,0,2614,2574,
		1,0,0,0,2614,2581,1,0,0,0,2614,2588,1,0,0,0,2614,2594,1,0,0,0,2614,2603,
		1,0,0,0,2614,2610,1,0,0,0,2615,415,1,0,0,0,2616,2618,5,79,0,0,2617,2619,
		3,40,20,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,0,0,2620,2621,
		3,488,244,0,2621,417,1,0,0,0,2622,2623,3,58,29,0,2623,2625,5,79,0,0,2624,
		2626,3,40,20,0,2625,2624,1,0,0,0,2625,2626,1,0,0,0,2626,2627,1,0,0,0,2627,
		2628,3,488,244,0,2628,2663,1,0,0,0,2629,2630,3,10,5,0,2630,2632,5,79,0,
		0,2631,2633,3,40,20,0,2632,2631,1,0,0,0,2632,2633,1,0,0,0,2633,2634,1,
		0,0,0,2634,2635,3,488,244,0,2635,2663,1,0,0,0,2636,2637,5,46,0,0,2637,
		2639,5,79,0,0,2638,2640,3,40,20,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,
		2640,2641,1,0,0,0,2641,2663,3,488,244,0,2642,2643,3,54,27,0,2643,2644,
		5,76,0,0,2644,2645,5,46,0,0,2645,2647,5,79,0,0,2646,2648,3,40,20,0,2647,
		2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,0,0,2649,2650,3,488,244,0,
		2650,2663,1,0,0,0,2651,2652,3,14,7,0,2652,2654,5,79,0,0,2653,2655,3,40,
		20,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,0,0,0,2656,2657,5,
		33,0,0,2657,2663,1,0,0,0,2658,2659,3,28,14,0,2659,2660,5,79,0,0,2660,2661,
		5,33,0,0,2661,2663,1,0,0,0,2662,2622,1,0,0,0,2662,2629,1,0,0,0,2662,2636,
		1,0,0,0,2662,2642,1,0,0,0,2662,2651,1,0,0,0,2662,2658,1,0,0,0,2663,419,
		1,0,0,0,2664,2665,5,33,0,0,2665,2666,3,2,1,0,2666,2668,3,422,211,0,2667,
		2669,3,30,15,0,2668,2667,1,0,0,0,2668,2669,1,0,0,0,2669,2687,1,0,0,0,2670,
		2671,5,33,0,0,2671,2672,3,12,6,0,2672,2674,3,422,211,0,2673,2675,3,30,
		15,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,2675,2687,1,0,0,0,2676,2677,5,
		33,0,0,2677,2678,3,2,1,0,2678,2679,3,30,15,0,2679,2680,3,258,129,0,2680,
		2687,1,0,0,0,2681,2682,5,33,0,0,2682,2683,3,12,6,0,2683,2684,3,30,15,0,
		2684,2685,3,258,129,0,2685,2687,1,0,0,0,2686,2664,1,0,0,0,2686,2670,1,
		0,0,0,2686,2676,1,0,0,0,2686,2681,1,0,0,0,2687,421,1,0,0,0,2688,2690,3,
		424,212,0,2689,2688,1,0,0,0,2690,2691,1,0,0,0,2691,2689,1,0,0,0,2691,2692,
		1,0,0,0,2692,423,1,0,0,0,2693,2695,3,240,120,0,2694,2693,1,0,0,0,2695,
		2698,1,0,0,0,2696,2694,1,0,0,0,2696,2697,1,0,0,0,2697,2699,1,0,0,0,2698,
		2696,1,0,0,0,2699,2700,5,72,0,0,2700,2701,3,428,214,0,2701,2702,5,73,0,
		0,2702,425,1,0,0,0,2703,2704,3,428,214,0,2704,427,1,0,0,0,2705,2708,3,
		430,215,0,2706,2708,3,438,219,0,2707,2705,1,0,0,0,2707,2706,1,0,0,0,2708,
		429,1,0,0,0,2709,2710,3,432,216,0,2710,2711,5,87,0,0,2711,2712,3,436,218,
		0,2712,431,1,0,0,0,2713,2724,3,488,244,0,2714,2716,5,68,0,0,2715,2717,
		3,160,80,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2718,1,0,0,0,2718,
		2724,5,69,0,0,2719,2720,5,68,0,0,2720,2721,3,434,217,0,2721,2722,5,69,
		0,0,2722,2724,1,0,0,0,2723,2713,1,0,0,0,2723,2714,1,0,0,0,2723,2719,1,
		0,0,0,2724,433,1,0,0,0,2725,2730,3,488,244,0,2726,2727,5,75,0,0,2727,2729,
		3,488,244,0,2728,2726,1,0,0,0,2729,2732,1,0,0,0,2730,2728,1,0,0,0,2730,
		2731,1,0,0,0,2731,435,1,0,0,0,2732,2730,1,0,0,0,2733,2736,3,428,214,0,
		2734,2736,3,262,131,0,2735,2733,1,0,0,0,2735,2734,1,0,0,0,2736,437,1,0,
		0,0,2737,2740,3,446,223,0,2738,2740,3,440,220,0,2739,2737,1,0,0,0,2739,
		2738,1,0,0,0,2740,439,1,0,0,0,2741,2742,3,442,221,0,2742,2743,3,444,222,
		0,2743,2744,3,428,214,0,2744,441,1,0,0,0,2745,2749,3,58,29,0,2746,2749,
		3,394,197,0,2747,2749,3,400,200,0,2748,2745,1,0,0,0,2748,2746,1,0,0,0,
		2748,2747,1,0,0,0,2749,443,1,0,0,0,2750,2751,7,4,0,0,2751,445,1,0,0,0,
		2752,2762,3,448,224,0,2753,2754,3,448,224,0,2754,2755,5,85,0,0,2755,2756,
		3,428,214,0,2756,2759,5,86,0,0,2757,2760,3,446,223,0,2758,2760,3,430,215,
		0,2759,2757,1,0,0,0,2759,2758,1,0,0,0,2760,2762,1,0,0,0,2761,2752,1,0,
		0,0,2761,2753,1,0,0,0,2762,447,1,0,0,0,2763,2764,6,224,-1,0,2764,2765,
		3,450,225,0,2765,2771,1,0,0,0,2766,2767,10,1,0,0,2767,2768,5,93,0,0,2768,
		2770,3,450,225,0,2769,2766,1,0,0,0,2770,2773,1,0,0,0,2771,2769,1,0,0,0,
		2771,2772,1,0,0,0,2772,449,1,0,0,0,2773,2771,1,0,0,0,2774,2775,6,225,-1,
		0,2775,2776,3,452,226,0,2776,2782,1,0,0,0,2777,2778,10,1,0,0,2778,2779,
		5,92,0,0,2779,2781,3,452,226,0,2780,2777,1,0,0,0,2781,2784,1,0,0,0,2782,
		2780,1,0,0,0,2782,2783,1,0,0,0,2783,451,1,0,0,0,2784,2782,1,0,0,0,2785,
		2786,6,226,-1,0,2786,2787,3,454,227,0,2787,2793,1,0,0,0,2788,2789,10,1,
		0,0,2789,2790,5,101,0,0,2790,2792,3,454,227,0,2791,2788,1,0,0,0,2792,2795,
		1,0,0,0,2793,2791,1,0,0,0,2793,2794,1,0,0,0,2794,453,1,0,0,0,2795,2793,
		1,0,0,0,2796,2797,6,227,-1,0,2797,2798,3,456,228,0,2798,2804,1,0,0,0,2799,
		2800,10,1,0,0,2800,2801,5,102,0,0,2801,2803,3,456,228,0,2802,2799,1,0,
		0,0,2803,2806,1,0,0,0,2804,2802,1,0,0,0,2804,2805,1,0,0,0,2805,455,1,0,
		0,0,2806,2804,1,0,0,0,2807,2808,6,228,-1,0,2808,2809,3,458,229,0,2809,
		2815,1,0,0,0,2810,2811,10,1,0,0,2811,2812,5,100,0,0,2812,2814,3,458,229,
		0,2813,2810,1,0,0,0,2814,2817,1,0,0,0,2815,2813,1,0,0,0,2815,2816,1,0,
		0,0,2816,457,1,0,0,0,2817,2815,1,0,0,0,2818,2819,6,229,-1,0,2819,2820,
		3,460,230,0,2820,2829,1,0,0,0,2821,2822,10,2,0,0,2822,2823,5,88,0,0,2823,
		2828,3,460,230,0,2824,2825,10,1,0,0,2825,2826,5,91,0,0,2826,2828,3,460,
		230,0,2827,2821,1,0,0,0,2827,2824,1,0,0,0,2828,2831,1,0,0,0,2829,2827,
		1,0,0,0,2829,2830,1,0,0,0,2830,459,1,0,0,0,2831,2829,1,0,0,0,2832,2833,
		6,230,-1,0,2833,2834,3,462,231,0,2834,2852,1,0,0,0,2835,2836,10,5,0,0,
		2836,2837,5,82,0,0,2837,2851,3,462,231,0,2838,2839,10,4,0,0,2839,2840,
		5,81,0,0,2840,2851,3,462,231,0,2841,2842,10,3,0,0,2842,2843,5,89,0,0,2843,
		2851,3,462,231,0,2844,2845,10,2,0,0,2845,2846,5,90,0,0,2846,2851,3,462,
		231,0,2847,2848,10,1,0,0,2848,2849,5,27,0,0,2849,2851,3,10,5,0,2850,2835,
		1,0,0,0,2850,2838,1,0,0,0,2850,2841,1,0,0,0,2850,2844,1,0,0,0,2850,2847,
		1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,461,
		1,0,0,0,2854,2852,1,0,0,0,2855,2856,6,231,-1,0,2856,2857,3,464,232,0,2857,
		2873,1,0,0,0,2858,2859,10,3,0,0,2859,2860,5,82,0,0,2860,2861,5,82,0,0,
		2861,2872,3,464,232,0,2862,2863,10,2,0,0,2863,2864,5,81,0,0,2864,2865,
		5,81,0,0,2865,2872,3,464,232,0,2866,2867,10,1,0,0,2867,2868,5,81,0,0,2868,
		2869,5,81,0,0,2869,2870,5,81,0,0,2870,2872,3,464,232,0,2871,2858,1,0,0,
		0,2871,2862,1,0,0,0,2871,2866,1,0,0,0,2872,2875,1,0,0,0,2873,2871,1,0,
		0,0,2873,2874,1,0,0,0,2874,463,1,0,0,0,2875,2873,1,0,0,0,2876,2877,6,232,
		-1,0,2877,2878,3,466,233,0,2878,2887,1,0,0,0,2879,2880,10,2,0,0,2880,2881,
		5,96,0,0,2881,2886,3,466,233,0,2882,2883,10,1,0,0,2883,2884,5,97,0,0,2884,
		2886,3,466,233,0,2885,2879,1,0,0,0,2885,2882,1,0,0,0,2886,2889,1,0,0,0,
		2887,2885,1,0,0,0,2887,2888,1,0,0,0,2888,465,1,0,0,0,2889,2887,1,0,0,0,
		2890,2891,6,233,-1,0,2891,2892,3,468,234,0,2892,2904,1,0,0,0,2893,2894,
		10,3,0,0,2894,2895,5,98,0,0,2895,2903,3,468,234,0,2896,2897,10,2,0,0,2897,
		2898,5,99,0,0,2898,2903,3,468,234,0,2899,2900,10,1,0,0,2900,2901,5,103,
		0,0,2901,2903,3,468,234,0,2902,2893,1,0,0,0,2902,2896,1,0,0,0,2902,2899,
		1,0,0,0,2903,2906,1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,467,
		1,0,0,0,2906,2904,1,0,0,0,2907,2915,3,470,235,0,2908,2915,3,472,236,0,
		2909,2910,5,96,0,0,2910,2915,3,468,234,0,2911,2912,5,97,0,0,2912,2915,
		3,468,234,0,2913,2915,3,474,237,0,2914,2907,1,0,0,0,2914,2908,1,0,0,0,
		2914,2909,1,0,0,0,2914,2911,1,0,0,0,2914,2913,1,0,0,0,2915,469,1,0,0,0,
		2916,2917,5,94,0,0,2917,2918,3,468,234,0,2918,471,1,0,0,0,2919,2920,5,
		95,0,0,2920,2921,3,468,234,0,2921,473,1,0,0,0,2922,2929,3,476,238,0,2923,
		2924,5,84,0,0,2924,2929,3,468,234,0,2925,2926,5,83,0,0,2926,2929,3,468,
		234,0,2927,2929,3,486,243,0,2928,2922,1,0,0,0,2928,2923,1,0,0,0,2928,2925,
		1,0,0,0,2928,2927,1,0,0,0,2929,475,1,0,0,0,2930,2933,3,364,182,0,2931,
		2933,3,58,29,0,2932,2930,1,0,0,0,2932,2931,1,0,0,0,2933,2938,1,0,0,0,2934,
		2937,3,480,240,0,2935,2937,3,484,242,0,2936,2934,1,0,0,0,2936,2935,1,0,
		0,0,2937,2940,1,0,0,0,2938,2936,1,0,0,0,2938,2939,1,0,0,0,2939,477,1,0,
		0,0,2940,2938,1,0,0,0,2941,2942,3,476,238,0,2942,2943,5,94,0,0,2943,479,
		1,0,0,0,2944,2945,5,94,0,0,2945,481,1,0,0,0,2946,2947,3,476,238,0,2947,
		2948,5,95,0,0,2948,483,1,0,0,0,2949,2950,5,95,0,0,2950,485,1,0,0,0,2951,
		2952,5,68,0,0,2952,2953,3,2,1,0,2953,2954,5,69,0,0,2954,2955,3,468,234,
		0,2955,2979,1,0,0,0,2956,2957,5,68,0,0,2957,2961,3,10,5,0,2958,2960,3,
		38,19,0,2959,2958,1,0,0,0,2960,2963,1,0,0,0,2961,2959,1,0,0,0,2961,2962,
		1,0,0,0,2962,2964,1,0,0,0,2963,2961,1,0,0,0,2964,2965,5,69,0,0,2965,2966,
		3,474,237,0,2966,2979,1,0,0,0,2967,2968,5,68,0,0,2968,2972,3,10,5,0,2969,
		2971,3,38,19,0,2970,2969,1,0,0,0,2971,2974,1,0,0,0,2972,2970,1,0,0,0,2972,
		2973,1,0,0,0,2973,2975,1,0,0,0,2974,2972,1,0,0,0,2975,2976,5,69,0,0,2976,
		2977,3,430,215,0,2977,2979,1,0,0,0,2978,2951,1,0,0,0,2978,2956,1,0,0,0,
		2978,2967,1,0,0,0,2979,487,1,0,0,0,2980,2981,7,5,0,0,2981,489,1,0,0,0,
		340,495,502,506,510,519,523,527,529,535,540,547,552,554,560,565,570,575,
		586,600,605,613,620,626,631,642,645,659,664,669,674,680,690,701,709,719,
		727,739,744,749,754,760,768,776,789,818,823,827,835,844,858,861,873,876,
		892,897,903,908,914,917,920,932,943,957,964,973,980,985,1000,1007,1013,
		1017,1021,1025,1029,1034,1038,1042,1044,1049,1056,1061,1063,1069,1074,
		1078,1097,1102,1118,1123,1129,1135,1137,1141,1146,1150,1158,1165,1173,
		1176,1181,1189,1194,1201,1208,1213,1220,1232,1237,1241,1251,1256,1264,
		1267,1272,1280,1283,1288,1293,1298,1303,1310,1315,1323,1328,1333,1338,
		1344,1350,1353,1356,1365,1371,1377,1380,1383,1391,1396,1401,1407,1410,
		1421,1430,1440,1445,1456,1461,1474,1479,1491,1501,1506,1514,1517,1524,
		1532,1538,1547,1557,1561,1564,1573,1587,1590,1599,1604,1611,1616,1624,
		1636,1643,1657,1679,1713,1725,1731,1742,1754,1780,1784,1789,1793,1797,
		1805,1809,1813,1820,1829,1837,1852,1864,1870,1876,1897,1902,1907,1918,
		1929,1939,1942,1947,1956,1962,1971,1975,1979,1984,2003,2013,2035,2042,
		2050,2058,2069,2092,2102,2113,2135,2140,2146,2154,2158,2163,2171,2177,
		2181,2185,2189,2195,2200,2205,2209,2213,2219,2224,2229,2233,2237,2239,
		2244,2249,2254,2258,2262,2266,2271,2279,2285,2289,2293,2297,2303,2308,
		2313,2317,2321,2323,2328,2343,2357,2369,2378,2393,2406,2415,2421,2428,
		2433,2440,2445,2452,2457,2464,2469,2478,2483,2487,2491,2496,2503,2510,
		2515,2522,2527,2534,2539,2548,2553,2557,2564,2570,2577,2584,2591,2599,
		2606,2614,2618,2625,2632,2639,2647,2654,2662,2668,2674,2686,2691,2696,
		2707,2716,2723,2730,2735,2739,2748,2759,2761,2771,2782,2793,2804,2815,
		2827,2829,2850,2852,2871,2873,2885,2887,2902,2904,2914,2928,2932,2936,
		2938,2961,2972,2978
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

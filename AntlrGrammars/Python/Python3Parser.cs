//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Python3Parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Python3Parser : Python3ParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NUMBER=4, INTEGER=5, AND=6, AS=7, ASSERT=8, 
		ASYNC=9, AWAIT=10, BREAK=11, CASE=12, CLASS=13, CONTINUE=14, DEF=15, DEL=16, 
		ELIF=17, ELSE=18, EXCEPT=19, FALSE=20, FINALLY=21, FOR=22, FROM=23, GLOBAL=24, 
		IF=25, IMPORT=26, IN=27, IS=28, LAMBDA=29, MATCH=30, NONE=31, NONLOCAL=32, 
		NOT=33, OR=34, PASS=35, RAISE=36, RETURN=37, TRUE=38, TRY=39, UNDERSCORE=40, 
		WHILE=41, WITH=42, YIELD=43, NEWLINE=44, NAME=45, STRING_LITERAL=46, BYTES_LITERAL=47, 
		DECIMAL_INTEGER=48, OCT_INTEGER=49, HEX_INTEGER=50, BIN_INTEGER=51, FLOAT_NUMBER=52, 
		IMAG_NUMBER=53, DOT=54, ELLIPSIS=55, STAR=56, OPEN_PAREN=57, CLOSE_PAREN=58, 
		COMMA=59, COLON=60, SEMI_COLON=61, POWER=62, ASSIGN=63, OPEN_BRACK=64, 
		CLOSE_BRACK=65, OR_OP=66, XOR=67, AND_OP=68, LEFT_SHIFT=69, RIGHT_SHIFT=70, 
		ADD=71, MINUS=72, DIV=73, MOD=74, IDIV=75, NOT_OP=76, OPEN_BRACE=77, CLOSE_BRACE=78, 
		LESS_THAN=79, GREATER_THAN=80, EQUALS=81, GT_EQ=82, LT_EQ=83, NOT_EQ_1=84, 
		NOT_EQ_2=85, AT=86, ARROW=87, ADD_ASSIGN=88, SUB_ASSIGN=89, MULT_ASSIGN=90, 
		AT_ASSIGN=91, DIV_ASSIGN=92, MOD_ASSIGN=93, AND_ASSIGN=94, OR_ASSIGN=95, 
		XOR_ASSIGN=96, LEFT_SHIFT_ASSIGN=97, RIGHT_SHIFT_ASSIGN=98, POWER_ASSIGN=99, 
		IDIV_ASSIGN=100, SKIP_=101, UNKNOWN_CHAR=102;
	public const int
		RULE_single_input = 0, RULE_file_input = 1, RULE_eval_input = 2, RULE_decorator = 3, 
		RULE_decorators = 4, RULE_decorated = 5, RULE_async_funcdef = 6, RULE_funcdef = 7, 
		RULE_parameters = 8, RULE_typedargslist = 9, RULE_tfpdef = 10, RULE_varargslist = 11, 
		RULE_vfpdef = 12, RULE_stmt = 13, RULE_simple_stmts = 14, RULE_simple_stmt = 15, 
		RULE_expr_stmt = 16, RULE_annassign = 17, RULE_testlist_star_expr = 18, 
		RULE_augassign = 19, RULE_del_stmt = 20, RULE_pass_stmt = 21, RULE_flow_stmt = 22, 
		RULE_break_stmt = 23, RULE_continue_stmt = 24, RULE_return_stmt = 25, 
		RULE_yield_stmt = 26, RULE_raise_stmt = 27, RULE_import_stmt = 28, RULE_import_name = 29, 
		RULE_import_from = 30, RULE_import_as_name = 31, RULE_dotted_as_name = 32, 
		RULE_import_as_names = 33, RULE_dotted_as_names = 34, RULE_dotted_name = 35, 
		RULE_global_stmt = 36, RULE_nonlocal_stmt = 37, RULE_assert_stmt = 38, 
		RULE_compound_stmt = 39, RULE_async_stmt = 40, RULE_if_stmt = 41, RULE_while_stmt = 42, 
		RULE_for_stmt = 43, RULE_try_stmt = 44, RULE_with_stmt = 45, RULE_with_item = 46, 
		RULE_except_clause = 47, RULE_block = 48, RULE_match_stmt = 49, RULE_subject_expr = 50, 
		RULE_star_named_expressions = 51, RULE_star_named_expression = 52, RULE_case_block = 53, 
		RULE_guard = 54, RULE_patterns = 55, RULE_pattern = 56, RULE_as_pattern = 57, 
		RULE_or_pattern = 58, RULE_closed_pattern = 59, RULE_literal_pattern = 60, 
		RULE_literal_expr = 61, RULE_complex_number = 62, RULE_signed_number = 63, 
		RULE_signed_real_number = 64, RULE_real_number = 65, RULE_imaginary_number = 66, 
		RULE_capture_pattern = 67, RULE_pattern_capture_target = 68, RULE_wildcard_pattern = 69, 
		RULE_value_pattern = 70, RULE_attr = 71, RULE_name_or_attr = 72, RULE_group_pattern = 73, 
		RULE_sequence_pattern = 74, RULE_open_sequence_pattern = 75, RULE_maybe_sequence_pattern = 76, 
		RULE_maybe_star_pattern = 77, RULE_star_pattern = 78, RULE_mapping_pattern = 79, 
		RULE_items_pattern = 80, RULE_key_value_pattern = 81, RULE_double_star_pattern = 82, 
		RULE_class_pattern = 83, RULE_positional_patterns = 84, RULE_keyword_patterns = 85, 
		RULE_keyword_pattern = 86, RULE_test = 87, RULE_test_nocond = 88, RULE_lambdef = 89, 
		RULE_lambdef_nocond = 90, RULE_or_test = 91, RULE_and_test = 92, RULE_not_test = 93, 
		RULE_comparison = 94, RULE_comp_op = 95, RULE_star_expr = 96, RULE_expr = 97, 
		RULE_xor_expr = 98, RULE_and_expr = 99, RULE_shift_expr = 100, RULE_arith_expr = 101, 
		RULE_term = 102, RULE_factor = 103, RULE_power = 104, RULE_atom_expr = 105, 
		RULE_atom = 106, RULE_name = 107, RULE_testlist_comp = 108, RULE_trailer = 109, 
		RULE_subscriptlist = 110, RULE_subscript_ = 111, RULE_sliceop = 112, RULE_exprlist = 113, 
		RULE_testlist = 114, RULE_dictorsetmaker = 115, RULE_classdef = 116, RULE_arglist = 117, 
		RULE_argument = 118, RULE_comp_iter = 119, RULE_comp_for = 120, RULE_comp_if = 121, 
		RULE_encoding_decl = 122, RULE_yield_expr = 123, RULE_yield_arg = 124, 
		RULE_strings = 125;
	public static readonly string[] ruleNames = {
		"single_input", "file_input", "eval_input", "decorator", "decorators", 
		"decorated", "async_funcdef", "funcdef", "parameters", "typedargslist", 
		"tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmts", "simple_stmt", 
		"expr_stmt", "annassign", "testlist_star_expr", "augassign", "del_stmt", 
		"pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", 
		"yield_stmt", "raise_stmt", "import_stmt", "import_name", "import_from", 
		"import_as_name", "dotted_as_name", "import_as_names", "dotted_as_names", 
		"dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
		"async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
		"with_item", "except_clause", "block", "match_stmt", "subject_expr", "star_named_expressions", 
		"star_named_expression", "case_block", "guard", "patterns", "pattern", 
		"as_pattern", "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
		"complex_number", "signed_number", "signed_real_number", "real_number", 
		"imaginary_number", "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
		"value_pattern", "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
		"open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
		"star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
		"double_star_pattern", "class_pattern", "positional_patterns", "keyword_patterns", 
		"keyword_pattern", "test", "test_nocond", "lambdef", "lambdef_nocond", 
		"or_test", "and_test", "not_test", "comparison", "comp_op", "star_expr", 
		"expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", "term", "factor", 
		"power", "atom_expr", "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
		"subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", "classdef", 
		"arglist", "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
		"yield_expr", "yield_arg", "strings"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'and'", "'as'", "'assert'", "'async'", 
		"'await'", "'break'", "'case'", "'class'", "'continue'", "'def'", "'del'", 
		"'elif'", "'else'", "'except'", "'False'", "'finally'", "'for'", "'from'", 
		"'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", "'match'", 
		"'None'", "'nonlocal'", "'not'", "'or'", "'pass'", "'raise'", "'return'", 
		"'True'", "'try'", "'_'", "'while'", "'with'", "'yield'", null, null, 
		null, null, null, null, null, null, null, null, "'.'", "'...'", "'*'", 
		"'('", "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", 
		"'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
		"'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", 
		"'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<='", "'>>='", "'**='", "'//='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "AND", "AS", 
		"ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", 
		"DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", "FROM", "GLOBAL", 
		"IF", "IMPORT", "IN", "IS", "LAMBDA", "MATCH", "NONE", "NONLOCAL", "NOT", 
		"OR", "PASS", "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
		"WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
		"DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
		"IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
		"OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
		"DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
		"GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", 
		"ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
		"RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Python3Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Python3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Python3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Python3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Single_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		public Single_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSingle_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSingle_input(this);
		}
	}

	[RuleVersion(0)]
	public Single_inputContext single_input() {
		Single_inputContext _localctx = new Single_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_single_input);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				simple_stmts();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				compound_stmt();
				State = 255;
				Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Python3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(Python3Parser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(Python3Parser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public File_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFile_input(this);
		}
	}

	[RuleVersion(0)]
	public File_inputContext file_input() {
		File_inputContext _localctx = new File_inputContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252271930291384088L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4206977L) != 0)) {
				{
				State = 261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEWLINE:
					{
					State = 259;
					Match(NEWLINE);
					}
					break;
				case STRING:
				case NUMBER:
				case ASSERT:
				case ASYNC:
				case AWAIT:
				case BREAK:
				case CLASS:
				case CONTINUE:
				case DEF:
				case DEL:
				case FALSE:
				case FOR:
				case FROM:
				case GLOBAL:
				case IF:
				case IMPORT:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NONLOCAL:
				case NOT:
				case PASS:
				case RAISE:
				case RETURN:
				case TRUE:
				case TRY:
				case UNDERSCORE:
				case WHILE:
				case WITH:
				case YIELD:
				case NAME:
				case ELLIPSIS:
				case STAR:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
				case AT:
					{
					State = 260;
					stmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 266;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eval_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Python3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(Python3Parser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(Python3Parser.NEWLINE, i);
		}
		public Eval_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterEval_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitEval_input(this);
		}
	}

	[RuleVersion(0)]
	public Eval_inputContext eval_input() {
		Eval_inputContext _localctx = new Eval_inputContext(Context, State);
		EnterRule(_localctx, 4, RULE_eval_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			testlist();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 269;
				Match(NEWLINE);
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Python3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorator(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 6, RULE_decorator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(AT);
			State = 278;
			dotted_name();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 279;
				Match(OPEN_PAREN);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 280;
					arglist();
					}
				}

				State = 283;
				Match(CLOSE_PAREN);
				}
			}

			State = 286;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		public DecoratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorators(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorsContext decorators() {
		DecoratorsContext _localctx = new DecoratorsContext(Context, State);
		EnterRule(_localctx, 8, RULE_decorators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 288;
				decorator();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorsContext decorators() {
			return GetRuleContext<DecoratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassdefContext classdef() {
			return GetRuleContext<ClassdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_funcdefContext async_funcdef() {
			return GetRuleContext<Async_funcdefContext>(0);
		}
		public DecoratedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorated(this);
		}
	}

	[RuleVersion(0)]
	public DecoratedContext decorated() {
		DecoratedContext _localctx = new DecoratedContext(Context, State);
		EnterRule(_localctx, 10, RULE_decorated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			decorators();
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 294;
				classdef();
				}
				break;
			case DEF:
				{
				State = 295;
				funcdef();
				}
				break;
			case ASYNC:
				{
				State = 296;
				async_funcdef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Async_funcdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		public Async_funcdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_async_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAsync_funcdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAsync_funcdef(this);
		}
	}

	[RuleVersion(0)]
	public Async_funcdefContext async_funcdef() {
		Async_funcdefContext _localctx = new Async_funcdefContext(Context, State);
		EnterRule(_localctx, 12, RULE_async_funcdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(ASYNC);
			State = 300;
			funcdef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(Python3Parser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(Python3Parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(DEF);
			State = 303;
			name();
			State = 304;
			parameters();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 305;
				Match(ARROW);
				State = 306;
				test();
				}
			}

			State = 309;
			Match(COLON);
			State = 310;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedargslistContext typedargslist() {
			return GetRuleContext<TypedargslistContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(OPEN_PAREN);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 313;
				typedargslist();
				}
			}

			State = 316;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedargslistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TfpdefContext[] tfpdef() {
			return GetRuleContexts<TfpdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TfpdefContext tfpdef(int i) {
			return GetRuleContext<TfpdefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public TypedargslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedargslist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTypedargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTypedargslist(this);
		}
	}

	[RuleVersion(0)]
	public TypedargslistContext typedargslist() {
		TypedargslistContext _localctx = new TypedargslistContext(Context, State);
		EnterRule(_localctx, 18, RULE_typedargslist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 318;
				tfpdef();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 319;
					Match(ASSIGN);
					State = 320;
					test();
					}
				}

				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 323;
						Match(COMMA);
						State = 324;
						tfpdef();
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 325;
							Match(ASSIGN);
							State = 326;
							test();
							}
						}

						}
						} 
					}
					State = 333;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 334;
					Match(COMMA);
					State = 365;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STAR:
						{
						State = 335;
						Match(STAR);
						State = 337;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
							{
							State = 336;
							tfpdef();
							}
						}

						State = 347;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 339;
								Match(COMMA);
								State = 340;
								tfpdef();
								State = 343;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==ASSIGN) {
									{
									State = 341;
									Match(ASSIGN);
									State = 342;
									test();
									}
								}

								}
								} 
							}
							State = 349;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						}
						State = 358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 350;
							Match(COMMA);
							State = 356;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==POWER) {
								{
								State = 351;
								Match(POWER);
								State = 352;
								tfpdef();
								State = 354;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 353;
									Match(COMMA);
									}
								}

								}
							}

							}
						}

						}
						break;
					case POWER:
						{
						State = 360;
						Match(POWER);
						State = 361;
						tfpdef();
						State = 363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 362;
							Match(COMMA);
							}
						}

						}
						break;
					case CLOSE_PAREN:
						break;
					default:
						break;
					}
					}
				}

				}
				break;
			case STAR:
				{
				State = 369;
				Match(STAR);
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
					{
					State = 370;
					tfpdef();
					}
				}

				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 373;
						Match(COMMA);
						State = 374;
						tfpdef();
						State = 377;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 375;
							Match(ASSIGN);
							State = 376;
							test();
							}
						}

						}
						} 
					}
					State = 383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 384;
					Match(COMMA);
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==POWER) {
						{
						State = 385;
						Match(POWER);
						State = 386;
						tfpdef();
						State = 388;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 387;
							Match(COMMA);
							}
						}

						}
					}

					}
				}

				}
				break;
			case POWER:
				{
				State = 394;
				Match(POWER);
				State = 395;
				tfpdef();
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 396;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TfpdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public TfpdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tfpdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTfpdef(this);
		}
	}

	[RuleVersion(0)]
	public TfpdefContext tfpdef() {
		TfpdefContext _localctx = new TfpdefContext(Context, State);
		EnterRule(_localctx, 20, RULE_tfpdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			name();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 402;
				Match(COLON);
				State = 403;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarargslistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VfpdefContext[] vfpdef() {
			return GetRuleContexts<VfpdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VfpdefContext vfpdef(int i) {
			return GetRuleContext<VfpdefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public VarargslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varargslist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterVarargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitVarargslist(this);
		}
	}

	[RuleVersion(0)]
	public VarargslistContext varargslist() {
		VarargslistContext _localctx = new VarargslistContext(Context, State);
		EnterRule(_localctx, 22, RULE_varargslist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 406;
				vfpdef();
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 407;
					Match(ASSIGN);
					State = 408;
					test();
					}
				}

				State = 419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 411;
						Match(COMMA);
						State = 412;
						vfpdef();
						State = 415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 413;
							Match(ASSIGN);
							State = 414;
							test();
							}
						}

						}
						} 
					}
					State = 421;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 422;
					Match(COMMA);
					State = 453;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STAR:
						{
						State = 423;
						Match(STAR);
						State = 425;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
							{
							State = 424;
							vfpdef();
							}
						}

						State = 435;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 427;
								Match(COMMA);
								State = 428;
								vfpdef();
								State = 431;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==ASSIGN) {
									{
									State = 429;
									Match(ASSIGN);
									State = 430;
									test();
									}
								}

								}
								} 
							}
							State = 437;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
						}
						State = 446;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 438;
							Match(COMMA);
							State = 444;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==POWER) {
								{
								State = 439;
								Match(POWER);
								State = 440;
								vfpdef();
								State = 442;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 441;
									Match(COMMA);
									}
								}

								}
							}

							}
						}

						}
						break;
					case POWER:
						{
						State = 448;
						Match(POWER);
						State = 449;
						vfpdef();
						State = 451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 450;
							Match(COMMA);
							}
						}

						}
						break;
					case COLON:
						break;
					default:
						break;
					}
					}
				}

				}
				break;
			case STAR:
				{
				State = 457;
				Match(STAR);
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
					{
					State = 458;
					vfpdef();
					}
				}

				State = 469;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 461;
						Match(COMMA);
						State = 462;
						vfpdef();
						State = 465;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 463;
							Match(ASSIGN);
							State = 464;
							test();
							}
						}

						}
						} 
					}
					State = 471;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 472;
					Match(COMMA);
					State = 478;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==POWER) {
						{
						State = 473;
						Match(POWER);
						State = 474;
						vfpdef();
						State = 476;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 475;
							Match(COMMA);
							}
						}

						}
					}

					}
				}

				}
				break;
			case POWER:
				{
				State = 482;
				Match(POWER);
				State = 483;
				vfpdef();
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 484;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VfpdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VfpdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vfpdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterVfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitVfpdef(this);
		}
	}

	[RuleVersion(0)]
	public VfpdefContext vfpdef() {
		VfpdefContext _localctx = new VfpdefContext(Context, State);
		EnterRule(_localctx, 24, RULE_vfpdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmt);
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				simple_stmts();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492;
				compound_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext[] simple_stmt() {
			return GetRuleContexts<Simple_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext simple_stmt(int i) {
			return GetRuleContext<Simple_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI_COLON() { return GetTokens(Python3Parser.SEMI_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON(int i) {
			return GetToken(Python3Parser.SEMI_COLON, i);
		}
		public Simple_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmts(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtsContext simple_stmts() {
		Simple_stmtsContext _localctx = new Simple_stmtsContext(Context, State);
		EnterRule(_localctx, 28, RULE_simple_stmts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			simple_stmt();
			State = 500;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 496;
					Match(SEMI_COLON);
					State = 497;
					simple_stmt();
					}
					} 
				}
				State = 502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI_COLON) {
				{
				State = 503;
				Match(SEMI_COLON);
				}
			}

			State = 506;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Del_stmtContext del_stmt() {
			return GetRuleContext<Del_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pass_stmtContext pass_stmt() {
			return GetRuleContext<Pass_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flow_stmtContext flow_stmt() {
			return GetRuleContext<Flow_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_stmtContext global_stmt() {
			return GetRuleContext<Global_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonlocal_stmtContext nonlocal_stmt() {
			return GetRuleContext<Nonlocal_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assert_stmtContext assert_stmt() {
			return GetRuleContext<Assert_stmtContext>(0);
		}
		public Simple_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtContext simple_stmt() {
		Simple_stmtContext _localctx = new Simple_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_simple_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case STAR:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 508;
				expr_stmt();
				}
				break;
			case DEL:
				{
				State = 509;
				del_stmt();
				}
				break;
			case PASS:
				{
				State = 510;
				pass_stmt();
				}
				break;
			case BREAK:
			case CONTINUE:
			case RAISE:
			case RETURN:
			case YIELD:
				{
				State = 511;
				flow_stmt();
				}
				break;
			case FROM:
			case IMPORT:
				{
				State = 512;
				import_stmt();
				}
				break;
			case GLOBAL:
				{
				State = 513;
				global_stmt();
				}
				break;
			case NONLOCAL:
				{
				State = 514;
				nonlocal_stmt();
				}
				break;
			case ASSERT:
				{
				State = 515;
				assert_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_star_exprContext[] testlist_star_expr() {
			return GetRuleContexts<Testlist_star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_star_exprContext testlist_star_expr(int i) {
			return GetRuleContext<Testlist_star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnassignContext annassign() {
			return GetRuleContext<AnnassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugassignContext augassign() {
			return GetRuleContext<AugassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext[] yield_expr() {
			return GetRuleContexts<Yield_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr(int i) {
			return GetRuleContext<Yield_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		public Expr_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExpr_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Expr_stmtContext expr_stmt() {
		Expr_stmtContext _localctx = new Expr_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			testlist_star_expr();
			State = 535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 519;
				annassign();
				}
				break;
			case ADD_ASSIGN:
			case SUB_ASSIGN:
			case MULT_ASSIGN:
			case AT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case OR_ASSIGN:
			case XOR_ASSIGN:
			case LEFT_SHIFT_ASSIGN:
			case RIGHT_SHIFT_ASSIGN:
			case POWER_ASSIGN:
			case IDIV_ASSIGN:
				{
				State = 520;
				augassign();
				State = 523;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 521;
					yield_expr();
					}
					break;
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 522;
					testlist();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NEWLINE:
			case SEMI_COLON:
			case ASSIGN:
				{
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ASSIGN) {
					{
					{
					State = 525;
					Match(ASSIGN);
					State = 528;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case YIELD:
						{
						State = 526;
						yield_expr();
						}
						break;
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case LAMBDA:
					case MATCH:
					case NONE:
					case NOT:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case STAR:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 527;
						testlist_star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 534;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		public AnnassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAnnassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAnnassign(this);
		}
	}

	[RuleVersion(0)]
	public AnnassignContext annassign() {
		AnnassignContext _localctx = new AnnassignContext(Context, State);
		EnterRule(_localctx, 34, RULE_annassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(COLON);
			State = 538;
			test();
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 539;
				Match(ASSIGN);
				State = 540;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Testlist_star_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Testlist_star_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist_star_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist_star_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist_star_expr(this);
		}
	}

	[RuleVersion(0)]
	public Testlist_star_exprContext testlist_star_expr() {
		Testlist_star_exprContext _localctx = new Testlist_star_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_testlist_star_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 543;
				test();
				}
				break;
			case STAR:
				{
				State = 544;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 547;
					Match(COMMA);
					State = 550;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case LAMBDA:
					case MATCH:
					case NONE:
					case NOT:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 548;
						test();
						}
						break;
					case STAR:
						{
						State = 549;
						star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 557;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(Python3Parser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(Python3Parser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(Python3Parser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_ASSIGN() { return GetToken(Python3Parser.AT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(Python3Parser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(Python3Parser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(Python3Parser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(Python3Parser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(Python3Parser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT_ASSIGN() { return GetToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT_ASSIGN() { return GetToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER_ASSIGN() { return GetToken(Python3Parser.POWER_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV_ASSIGN() { return GetToken(Python3Parser.IDIV_ASSIGN, 0); }
		public AugassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAugassign(this);
		}
	}

	[RuleVersion(0)]
	public AugassignContext augassign() {
		AugassignContext _localctx = new AugassignContext(Context, State);
		EnterRule(_localctx, 38, RULE_augassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 8191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Del_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEL() { return GetToken(Python3Parser.DEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public Del_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDel_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Del_stmtContext del_stmt() {
		Del_stmtContext _localctx = new Del_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_del_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(DEL);
			State = 563;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(Python3Parser.PASS, 0); }
		public Pass_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPass_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPass_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pass_stmtContext pass_stmt() {
		Pass_stmtContext _localctx = new Pass_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_pass_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Break_stmtContext break_stmt() {
			return GetRuleContext<Break_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raise_stmtContext raise_stmt() {
			return GetRuleContext<Raise_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_stmtContext yield_stmt() {
			return GetRuleContext<Yield_stmtContext>(0);
		}
		public Flow_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFlow_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFlow_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Flow_stmtContext flow_stmt() {
		Flow_stmtContext _localctx = new Flow_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_flow_stmt);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				break_stmt();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				continue_stmt();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 569;
				return_stmt();
				}
				break;
			case RAISE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 570;
				raise_stmt();
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 571;
				yield_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Python3Parser.BREAK, 0); }
		public Break_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitBreak_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Break_stmtContext break_stmt() {
		Break_stmtContext _localctx = new Break_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_break_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Python3Parser.CONTINUE, 0); }
		public Continue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitContinue_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Continue_stmtContext continue_stmt() {
		Continue_stmtContext _localctx = new Continue_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_continue_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Python3Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(RETURN);
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 579;
				testlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		public Yield_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Yield_stmtContext yield_stmt() {
		Yield_stmtContext _localctx = new Yield_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_yield_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			yield_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(Python3Parser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		public Raise_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterRaise_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitRaise_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Raise_stmtContext raise_stmt() {
		Raise_stmtContext _localctx = new Raise_stmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_raise_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(RAISE);
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 585;
				test();
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 586;
					Match(FROM);
					State = 587;
					test();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name() {
			return GetRuleContext<Import_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_fromContext import_from() {
			return GetRuleContext<Import_fromContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_import_stmt);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				import_name();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				import_from();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Python3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_namesContext dotted_as_names() {
			return GetRuleContext<Dotted_as_namesContext>(0);
		}
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_name(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(IMPORT);
			State = 597;
			dotted_as_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Python3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_namesContext import_as_names() {
			return GetRuleContext<Import_as_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSIS() { return GetTokens(Python3Parser.ELLIPSIS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS(int i) {
			return GetToken(Python3Parser.ELLIPSIS, i);
		}
		public Import_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_from(this);
		}
	}

	[RuleVersion(0)]
	public Import_fromContext import_from() {
		Import_fromContext _localctx = new Import_fromContext(Context, State);
		EnterRule(_localctx, 60, RULE_import_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 599;
			Match(FROM);
			State = 612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT || _la==ELLIPSIS) {
					{
					{
					State = 600;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 605;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 606;
				dotted_name();
				}
				break;
			case 2:
				{
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 607;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DOT || _la==ELLIPSIS );
				}
				break;
			}
			State = 614;
			Match(IMPORT);
			State = 621;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 615;
				Match(STAR);
				}
				break;
			case OPEN_PAREN:
				{
				State = 616;
				Match(OPEN_PAREN);
				State = 617;
				import_as_names();
				State = 618;
				Match(CLOSE_PAREN);
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 620;
				import_as_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		public Import_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_as_name(this);
		}
	}

	[RuleVersion(0)]
	public Import_as_nameContext import_as_name() {
		Import_as_nameContext _localctx = new Import_as_nameContext(Context, State);
		EnterRule(_localctx, 62, RULE_import_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			name();
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 624;
				Match(AS);
				State = 625;
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Dotted_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_name(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_nameContext dotted_as_name() {
		Dotted_as_nameContext _localctx = new Dotted_as_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_dotted_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			dotted_name();
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 629;
				Match(AS);
				State = 630;
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_nameContext[] import_as_name() {
			return GetRuleContexts<Import_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_nameContext import_as_name(int i) {
			return GetRuleContext<Import_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Import_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_as_names(this);
		}
	}

	[RuleVersion(0)]
	public Import_as_namesContext import_as_names() {
		Import_as_namesContext _localctx = new Import_as_namesContext(Context, State);
		EnterRule(_localctx, 66, RULE_import_as_names);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			import_as_name();
			State = 638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 634;
					Match(COMMA);
					State = 635;
					import_as_name();
					}
					} 
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 641;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext[] dotted_as_name() {
			return GetRuleContexts<Dotted_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext dotted_as_name(int i) {
			return GetRuleContext<Dotted_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Dotted_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_names(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_namesContext dotted_as_names() {
		Dotted_as_namesContext _localctx = new Dotted_as_namesContext(Context, State);
		EnterRule(_localctx, 68, RULE_dotted_as_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			dotted_as_name();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 645;
				Match(COMMA);
				State = 646;
				dotted_as_name();
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		public Dotted_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_name(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_nameContext dotted_name() {
		Dotted_nameContext _localctx = new Dotted_nameContext(Context, State);
		EnterRule(_localctx, 70, RULE_dotted_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			name();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 653;
				Match(DOT);
				State = 654;
				name();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(Python3Parser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Global_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGlobal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGlobal_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Global_stmtContext global_stmt() {
		Global_stmtContext _localctx = new Global_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_global_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(GLOBAL);
			State = 661;
			name();
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 662;
				Match(COMMA);
				State = 663;
				name();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonlocal_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONLOCAL() { return GetToken(Python3Parser.NONLOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Nonlocal_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonlocal_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterNonlocal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitNonlocal_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Nonlocal_stmtContext nonlocal_stmt() {
		Nonlocal_stmtContext _localctx = new Nonlocal_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_nonlocal_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(NONLOCAL);
			State = 670;
			name();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 671;
				Match(COMMA);
				State = 672;
				name();
				}
				}
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assert_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(Python3Parser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		public Assert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAssert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAssert_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Assert_stmtContext assert_stmt() {
		Assert_stmtContext _localctx = new Assert_stmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_assert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(ASSERT);
			State = 679;
			test();
			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 680;
				Match(COMMA);
				State = 681;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_stmtContext try_stmt() {
			return GetRuleContext<Try_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_stmtContext with_stmt() {
			return GetRuleContext<With_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassdefContext classdef() {
			return GetRuleContext<ClassdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratedContext decorated() {
			return GetRuleContext<DecoratedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_stmtContext async_stmt() {
			return GetRuleContext<Async_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_stmtContext match_stmt() {
			return GetRuleContext<Match_stmtContext>(0);
		}
		public Compound_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCompound_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCompound_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Compound_stmtContext compound_stmt() {
		Compound_stmtContext _localctx = new Compound_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_compound_stmt);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				while_stmt();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 686;
				for_stmt();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 687;
				try_stmt();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 688;
				with_stmt();
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 689;
				funcdef();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 690;
				classdef();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 691;
				decorated();
				}
				break;
			case ASYNC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 692;
				async_stmt();
				}
				break;
			case MATCH:
				EnterOuterAlt(_localctx, 10);
				{
				State = 693;
				match_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Async_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_stmtContext with_stmt() {
			return GetRuleContext<With_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		public Async_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_async_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAsync_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAsync_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Async_stmtContext async_stmt() {
		Async_stmtContext _localctx = new Async_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_async_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(ASYNC);
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				{
				State = 697;
				funcdef();
				}
				break;
			case WITH:
				{
				State = 698;
				with_stmt();
				}
				break;
			case FOR:
				{
				State = 699;
				for_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(Python3Parser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(Python3Parser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(IF);
			State = 703;
			test();
			State = 704;
			Match(COLON);
			State = 705;
			block();
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 706;
				Match(ELIF);
				State = 707;
				test();
				State = 708;
				Match(COLON);
				State = 709;
				block();
				}
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 716;
				Match(ELSE);
				State = 717;
				Match(COLON);
				State = 718;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Python3Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_while_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(WHILE);
			State = 722;
			test();
			State = 723;
			Match(COLON);
			State = 724;
			block();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 725;
				Match(ELSE);
				State = 726;
				Match(COLON);
				State = 727;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Python3Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(FOR);
			State = 731;
			exprlist();
			State = 732;
			Match(IN);
			State = 733;
			testlist();
			State = 734;
			Match(COLON);
			State = 735;
			block();
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 736;
				Match(ELSE);
				State = 737;
				Match(COLON);
				State = 738;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Python3Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(Python3Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Except_clauseContext[] except_clause() {
			return GetRuleContexts<Except_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_clauseContext except_clause(int i) {
			return GetRuleContext<Except_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public Try_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTry_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Try_stmtContext try_stmt() {
		Try_stmtContext _localctx = new Try_stmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_try_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 741;
			Match(TRY);
			State = 742;
			Match(COLON);
			State = 743;
			block();
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCEPT:
				{
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 744;
					except_clause();
					State = 745;
					Match(COLON);
					State = 746;
					block();
					}
					}
					State = 750;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EXCEPT );
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 752;
					Match(ELSE);
					State = 753;
					Match(COLON);
					State = 754;
					block();
					}
				}

				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 757;
					Match(FINALLY);
					State = 758;
					Match(COLON);
					State = 759;
					block();
					}
				}

				}
				break;
			case FINALLY:
				{
				State = 762;
				Match(FINALLY);
				State = 763;
				Match(COLON);
				State = 764;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(Python3Parser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext[] with_item() {
			return GetRuleContexts<With_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext with_item(int i) {
			return GetRuleContext<With_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public With_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWith_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWith_stmt(this);
		}
	}

	[RuleVersion(0)]
	public With_stmtContext with_stmt() {
		With_stmtContext _localctx = new With_stmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_with_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			Match(WITH);
			State = 768;
			with_item();
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 769;
				Match(COMMA);
				State = 770;
				with_item();
				}
				}
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 776;
			Match(COLON);
			State = 777;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public With_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWith_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWith_item(this);
		}
	}

	[RuleVersion(0)]
	public With_itemContext with_item() {
		With_itemContext _localctx = new With_itemContext(Context, State);
		EnterRule(_localctx, 92, RULE_with_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			test();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 780;
				Match(AS);
				State = 781;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(Python3Parser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Except_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExcept_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExcept_clause(this);
		}
	}

	[RuleVersion(0)]
	public Except_clauseContext except_clause() {
		Except_clauseContext _localctx = new Except_clauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_except_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(EXCEPT);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 785;
				test();
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 786;
					Match(AS);
					State = 787;
					name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(Python3Parser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(Python3Parser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_block);
		int _la;
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case ASSERT:
			case AWAIT:
			case BREAK:
			case CONTINUE:
			case DEL:
			case FALSE:
			case FROM:
			case GLOBAL:
			case IMPORT:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NONLOCAL:
			case NOT:
			case PASS:
			case RAISE:
			case RETURN:
			case TRUE:
			case UNDERSCORE:
			case YIELD:
			case NAME:
			case ELLIPSIS:
			case STAR:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				simple_stmts();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793;
				Match(NEWLINE);
				State = 794;
				Match(INDENT);
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 795;
					stmt();
					}
					}
					State = 798;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 252254338105339672L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4206977L) != 0) );
				State = 800;
				Match(DEDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(Python3Parser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subject_exprContext subject_expr() {
			return GetRuleContext<Subject_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(Python3Parser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(Python3Parser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext[] case_block() {
			return GetRuleContexts<Case_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext case_block(int i) {
			return GetRuleContext<Case_blockContext>(i);
		}
		public Match_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMatch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMatch_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Match_stmtContext match_stmt() {
		Match_stmtContext _localctx = new Match_stmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_match_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(MATCH);
			State = 805;
			subject_expr();
			State = 806;
			Match(COLON);
			State = 807;
			Match(NEWLINE);
			State = 808;
			Match(INDENT);
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 809;
				case_block();
				}
				}
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 814;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subject_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public Subject_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubject_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubject_expr(this);
		}
	}

	[RuleVersion(0)]
	public Subject_exprContext subject_expr() {
		Subject_exprContext _localctx = new Subject_exprContext(Context, State);
		EnterRule(_localctx, 100, RULE_subject_expr);
		int _la;
		try {
			State = 822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 816;
				star_named_expression();
				State = 817;
				Match(COMMA);
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 818;
					star_named_expressions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				test();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 102, RULE_star_named_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(COMMA);
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 825;
				star_named_expression();
				}
				}
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 252238150243451928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0) );
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 830;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_star_named_expression);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833;
				Match(STAR);
				State = 834;
				expr();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				test();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Python3Parser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		public Case_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCase_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCase_block(this);
		}
	}

	[RuleVersion(0)]
	public Case_blockContext case_block() {
		Case_blockContext _localctx = new Case_blockContext(Context, State);
		EnterRule(_localctx, 106, RULE_case_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(CASE);
			State = 839;
			patterns();
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 840;
				guard();
				}
			}

			State = 843;
			Match(COLON);
			State = 844;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 108, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(IF);
			State = 847;
			test();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPatterns(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 110, RULE_patterns);
		try {
			State = 851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 849;
				open_sequence_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 850;
				pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_patternContext as_pattern() {
			return GetRuleContext<As_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 112, RULE_pattern);
		try {
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 853;
				as_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854;
				or_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public As_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAs_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAs_pattern(this);
		}
	}

	[RuleVersion(0)]
	public As_patternContext as_pattern() {
		As_patternContext _localctx = new As_patternContext(Context, State);
		EnterRule(_localctx, 114, RULE_as_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			or_pattern();
			State = 858;
			Match(AS);
			State = 859;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext[] closed_pattern() {
			return GetRuleContexts<Closed_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext closed_pattern(int i) {
			return GetRuleContext<Closed_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_OP() { return GetTokens(Python3Parser.OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP(int i) {
			return GetToken(Python3Parser.OR_OP, i);
		}
		public Or_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOr_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOr_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Or_patternContext or_pattern() {
		Or_patternContext _localctx = new Or_patternContext(Context, State);
		EnterRule(_localctx, 116, RULE_or_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			closed_pattern();
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_OP) {
				{
				{
				State = 862;
				Match(OR_OP);
				State = 863;
				closed_pattern();
				}
				}
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Closed_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_patternContext literal_pattern() {
			return GetRuleContext<Literal_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Capture_patternContext capture_pattern() {
			return GetRuleContext<Capture_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_patternContext value_pattern() {
			return GetRuleContext<Value_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_patternContext group_pattern() {
			return GetRuleContext<Group_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_patternContext sequence_pattern() {
			return GetRuleContext<Sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mapping_patternContext mapping_pattern() {
			return GetRuleContext<Mapping_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_patternContext class_pattern() {
			return GetRuleContext<Class_patternContext>(0);
		}
		public Closed_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closed_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClosed_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClosed_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Closed_patternContext closed_pattern() {
		Closed_patternContext _localctx = new Closed_patternContext(Context, State);
		EnterRule(_localctx, 118, RULE_closed_pattern);
		try {
			State = 877;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 869;
				literal_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 870;
				capture_pattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 871;
				wildcard_pattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 872;
				value_pattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 873;
				group_pattern();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 874;
				sequence_pattern();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 875;
				mapping_pattern();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 876;
				class_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public Literal_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLiteral_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLiteral_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Literal_patternContext literal_pattern() {
		Literal_patternContext _localctx = new Literal_patternContext(Context, State);
		EnterRule(_localctx, 120, RULE_literal_pattern);
		try {
			State = 887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 879;
				signed_number();
				State = 880;
				if (!( this.CannotBePlusMinus() )) throw new FailedPredicateException(this, " this.CannotBePlusMinus() ");
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 882;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 883;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 884;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 885;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 886;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public Literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expr(this);
		}
	}

	[RuleVersion(0)]
	public Literal_exprContext literal_expr() {
		Literal_exprContext _localctx = new Literal_exprContext(Context, State);
		EnterRule(_localctx, 122, RULE_literal_expr);
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				signed_number();
				State = 890;
				if (!( this.CannotBePlusMinus() )) throw new FailedPredicateException(this, " this.CannotBePlusMinus() ");
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 892;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 893;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 894;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 895;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 896;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_numberContext signed_real_number() {
			return GetRuleContext<Signed_real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Python3Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Imaginary_numberContext imaginary_number() {
			return GetRuleContext<Imaginary_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Complex_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComplex_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComplex_number(this);
		}
	}

	[RuleVersion(0)]
	public Complex_numberContext complex_number() {
		Complex_numberContext _localctx = new Complex_numberContext(Context, State);
		EnterRule(_localctx, 124, RULE_complex_number);
		try {
			State = 907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 899;
				signed_real_number();
				State = 900;
				Match(ADD);
				State = 901;
				imaginary_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 903;
				signed_real_number();
				State = 904;
				Match(MINUS);
				State = 905;
				imaginary_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 126, RULE_signed_number);
		try {
			State = 912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 909;
				Match(NUMBER);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 910;
				Match(MINUS);
				State = 911;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_numberContext real_number() {
			return GetRuleContext<Real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Signed_real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSigned_real_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSigned_real_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_real_numberContext signed_real_number() {
		Signed_real_numberContext _localctx = new Signed_real_numberContext(Context, State);
		EnterRule(_localctx, 128, RULE_signed_real_number);
		try {
			State = 917;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914;
				real_number();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				Match(MINUS);
				State = 916;
				real_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		public Real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterReal_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitReal_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_numberContext real_number() {
		Real_numberContext _localctx = new Real_numberContext(Context, State);
		EnterRule(_localctx, 130, RULE_real_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imaginary_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		public Imaginary_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imaginary_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImaginary_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImaginary_number(this);
		}
	}

	[RuleVersion(0)]
	public Imaginary_numberContext imaginary_number() {
		Imaginary_numberContext _localctx = new Imaginary_numberContext(Context, State);
		EnterRule(_localctx, 132, RULE_imaginary_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Capture_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Capture_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCapture_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCapture_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Capture_patternContext capture_pattern() {
		Capture_patternContext _localctx = new Capture_patternContext(Context, State);
		EnterRule(_localctx, 134, RULE_capture_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern_capture_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Pattern_capture_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern_capture_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPattern_capture_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPattern_capture_target(this);
		}
	}

	[RuleVersion(0)]
	public Pattern_capture_targetContext pattern_capture_target() {
		Pattern_capture_targetContext _localctx = new Pattern_capture_targetContext(Context, State);
		EnterRule(_localctx, 136, RULE_pattern_capture_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			name();
			State = 926;
			if (!( this.CannotBeDotLpEq() )) throw new FailedPredicateException(this, " this.CannotBeDotLpEq() ");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Python3Parser.UNDERSCORE, 0); }
		public Wildcard_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWildcard_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_patternContext wildcard_pattern() {
		Wildcard_patternContext _localctx = new Wildcard_patternContext(Context, State);
		EnterRule(_localctx, 138, RULE_wildcard_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterValue_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitValue_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Value_patternContext value_pattern() {
		Value_patternContext _localctx = new Value_patternContext(Context, State);
		EnterRule(_localctx, 140, RULE_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			attr();
			State = 931;
			if (!( this.CannotBeDotLpEq() )) throw new FailedPredicateException(this, " this.CannotBeDotLpEq() ");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 142, RULE_attr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			name();
			State = 936;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 934;
					Match(DOT);
					State = 935;
					name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 938;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_or_attrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Name_or_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_or_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterName_or_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitName_or_attr(this);
		}
	}

	[RuleVersion(0)]
	public Name_or_attrContext name_or_attr() {
		Name_or_attrContext _localctx = new Name_or_attrContext(Context, State);
		EnterRule(_localctx, 144, RULE_name_or_attr);
		try {
			State = 942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 940;
				attr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 941;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		public Group_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGroup_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGroup_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Group_patternContext group_pattern() {
		Group_patternContext _localctx = new Group_patternContext(Context, State);
		EnterRule(_localctx, 146, RULE_group_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(OPEN_PAREN);
			State = 945;
			pattern();
			State = 946;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		public Sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSequence_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_patternContext sequence_pattern() {
		Sequence_patternContext _localctx = new Sequence_patternContext(Context, State);
		EnterRule(_localctx, 148, RULE_sequence_pattern);
		int _la;
		try {
			State = 958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 948;
				Match(OPEN_BRACK);
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
					{
					State = 949;
					maybe_sequence_pattern();
					}
				}

				State = 952;
				Match(CLOSE_BRACK);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 953;
				Match(OPEN_PAREN);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
					{
					State = 954;
					open_sequence_pattern();
					}
				}

				State = 957;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern() {
			return GetRuleContext<Maybe_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		public Open_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOpen_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOpen_sequence_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Open_sequence_patternContext open_sequence_pattern() {
		Open_sequence_patternContext _localctx = new Open_sequence_patternContext(Context, State);
		EnterRule(_localctx, 150, RULE_open_sequence_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			maybe_star_pattern();
			State = 961;
			Match(COMMA);
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
				{
				State = 962;
				maybe_sequence_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext[] maybe_star_pattern() {
			return GetRuleContexts<Maybe_star_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern(int i) {
			return GetRuleContext<Maybe_star_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Maybe_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMaybe_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMaybe_sequence_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_sequence_patternContext maybe_sequence_pattern() {
		Maybe_sequence_patternContext _localctx = new Maybe_sequence_patternContext(Context, State);
		EnterRule(_localctx, 152, RULE_maybe_sequence_pattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			maybe_star_pattern();
			State = 970;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 966;
					Match(COMMA);
					State = 967;
					maybe_star_pattern();
					}
					} 
				}
				State = 972;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 973;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_patternContext star_pattern() {
			return GetRuleContext<Star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Maybe_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMaybe_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMaybe_star_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_star_patternContext maybe_star_pattern() {
		Maybe_star_patternContext _localctx = new Maybe_star_patternContext(Context, State);
		EnterRule(_localctx, 154, RULE_maybe_star_pattern);
		try {
			State = 978;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 976;
				star_pattern();
				}
				break;
			case STRING:
			case NUMBER:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case MINUS:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 977;
				pattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		public Star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Star_patternContext star_pattern() {
		Star_patternContext _localctx = new Star_patternContext(Context, State);
		EnterRule(_localctx, 156, RULE_star_pattern);
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980;
				Match(STAR);
				State = 981;
				pattern_capture_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 982;
				Match(STAR);
				State = 983;
				wildcard_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mapping_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(Python3Parser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(Python3Parser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_star_patternContext double_star_pattern() {
			return GetRuleContext<Double_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Items_patternContext items_pattern() {
			return GetRuleContext<Items_patternContext>(0);
		}
		public Mapping_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMapping_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMapping_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Mapping_patternContext mapping_pattern() {
		Mapping_patternContext _localctx = new Mapping_patternContext(Context, State);
		EnterRule(_localctx, 158, RULE_mapping_pattern);
		int _la;
		try {
			State = 1011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986;
				Match(OPEN_BRACE);
				State = 987;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988;
				Match(OPEN_BRACE);
				State = 989;
				double_star_pattern();
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 990;
					Match(COMMA);
					}
				}

				State = 993;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 995;
				Match(OPEN_BRACE);
				State = 996;
				items_pattern();
				State = 997;
				Match(COMMA);
				State = 998;
				double_star_pattern();
				State = 1000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 999;
					Match(COMMA);
					}
				}

				State = 1002;
				Match(CLOSE_BRACE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1004;
				Match(OPEN_BRACE);
				State = 1005;
				items_pattern();
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1006;
					Match(COMMA);
					}
				}

				State = 1009;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Items_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext[] key_value_pattern() {
			return GetRuleContexts<Key_value_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext key_value_pattern(int i) {
			return GetRuleContext<Key_value_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Items_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterItems_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitItems_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Items_patternContext items_pattern() {
		Items_patternContext _localctx = new Items_patternContext(Context, State);
		EnterRule(_localctx, 160, RULE_items_pattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			key_value_pattern();
			State = 1018;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1014;
					Match(COMMA);
					State = 1015;
					key_value_pattern();
					}
					} 
				}
				State = 1020;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_exprContext literal_expr() {
			return GetRuleContext<Literal_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Key_value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKey_value_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKey_value_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Key_value_patternContext key_value_pattern() {
		Key_value_patternContext _localctx = new Key_value_patternContext(Context, State);
		EnterRule(_localctx, 162, RULE_key_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case FALSE:
			case NONE:
			case TRUE:
			case MINUS:
				{
				State = 1021;
				literal_expr();
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 1022;
				attr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1025;
			Match(COLON);
			State = 1026;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Double_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDouble_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDouble_star_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Double_star_patternContext double_star_pattern() {
		Double_star_patternContext _localctx = new Double_star_patternContext(Context, State);
		EnterRule(_localctx, 164, RULE_double_star_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			Match(POWER);
			State = 1029;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_or_attrContext name_or_attr() {
			return GetRuleContext<Name_or_attrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positional_patternsContext positional_patterns() {
			return GetRuleContext<Positional_patternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternsContext keyword_patterns() {
			return GetRuleContext<Keyword_patternsContext>(0);
		}
		public Class_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClass_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClass_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Class_patternContext class_pattern() {
		Class_patternContext _localctx = new Class_patternContext(Context, State);
		EnterRule(_localctx, 166, RULE_class_pattern);
		int _la;
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1031;
				name_or_attr();
				State = 1032;
				Match(OPEN_PAREN);
				State = 1033;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				name_or_attr();
				State = 1036;
				Match(OPEN_PAREN);
				State = 1037;
				positional_patterns();
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1038;
					Match(COMMA);
					}
				}

				State = 1041;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1043;
				name_or_attr();
				State = 1044;
				Match(OPEN_PAREN);
				State = 1045;
				keyword_patterns();
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1046;
					Match(COMMA);
					}
				}

				State = 1049;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1051;
				name_or_attr();
				State = 1052;
				Match(OPEN_PAREN);
				State = 1053;
				positional_patterns();
				State = 1054;
				Match(COMMA);
				State = 1055;
				keyword_patterns();
				State = 1057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1056;
					Match(COMMA);
					}
				}

				State = 1059;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Positional_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPositional_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPositional_patterns(this);
		}
	}

	[RuleVersion(0)]
	public Positional_patternsContext positional_patterns() {
		Positional_patternsContext _localctx = new Positional_patternsContext(Context, State);
		EnterRule(_localctx, 168, RULE_positional_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			pattern();
			State = 1068;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1064;
					Match(COMMA);
					State = 1065;
					pattern();
					}
					} 
				}
				State = 1070;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext[] keyword_pattern() {
			return GetRuleContexts<Keyword_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext keyword_pattern(int i) {
			return GetRuleContext<Keyword_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Keyword_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKeyword_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKeyword_patterns(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternsContext keyword_patterns() {
		Keyword_patternsContext _localctx = new Keyword_patternsContext(Context, State);
		EnterRule(_localctx, 170, RULE_keyword_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			keyword_pattern();
			State = 1076;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1072;
					Match(COMMA);
					State = 1073;
					keyword_pattern();
					}
					} 
				}
				State = 1078;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Keyword_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKeyword_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKeyword_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternContext keyword_pattern() {
		Keyword_patternContext _localctx = new Keyword_patternContext(Context, State);
		EnterRule(_localctx, 172, RULE_keyword_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1079;
			name();
			State = 1080;
			Match(ASSIGN);
			State = 1081;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext[] or_test() {
			return GetRuleContexts<Or_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test(int i) {
			return GetRuleContext<Or_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdefContext lambdef() {
			return GetRuleContext<LambdefContext>(0);
		}
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 174, RULE_test);
		int _la;
		try {
			State = 1092;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1083;
				or_test();
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1084;
					Match(IF);
					State = 1085;
					or_test();
					State = 1086;
					Match(ELSE);
					State = 1087;
					test();
					}
				}

				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1091;
				lambdef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_nocondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test() {
			return GetRuleContext<Or_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambdef_nocondContext lambdef_nocond() {
			return GetRuleContext<Lambdef_nocondContext>(0);
		}
		public Test_nocondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_nocond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTest_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTest_nocond(this);
		}
	}

	[RuleVersion(0)]
	public Test_nocondContext test_nocond() {
		Test_nocondContext _localctx = new Test_nocondContext(Context, State);
		EnterRule(_localctx, 176, RULE_test_nocond);
		try {
			State = 1096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094;
				or_test();
				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				lambdef_nocond();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(Python3Parser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargslistContext varargslist() {
			return GetRuleContext<VarargslistContext>(0);
		}
		public LambdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLambdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLambdef(this);
		}
	}

	[RuleVersion(0)]
	public LambdefContext lambdef() {
		LambdefContext _localctx = new LambdefContext(Context, State);
		EnterRule(_localctx, 178, RULE_lambdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(LAMBDA);
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 1099;
				varargslist();
				}
			}

			State = 1102;
			Match(COLON);
			State = 1103;
			test();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambdef_nocondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(Python3Parser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Test_nocondContext test_nocond() {
			return GetRuleContext<Test_nocondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargslistContext varargslist() {
			return GetRuleContext<VarargslistContext>(0);
		}
		public Lambdef_nocondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdef_nocond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLambdef_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLambdef_nocond(this);
		}
	}

	[RuleVersion(0)]
	public Lambdef_nocondContext lambdef_nocond() {
		Lambdef_nocondContext _localctx = new Lambdef_nocondContext(Context, State);
		EnterRule(_localctx, 180, RULE_lambdef_nocond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(LAMBDA);
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 1106;
				varargslist();
				}
			}

			State = 1109;
			Match(COLON);
			State = 1110;
			test_nocond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_testContext[] and_test() {
			return GetRuleContexts<And_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_testContext and_test(int i) {
			return GetRuleContext<And_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(Python3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(Python3Parser.OR, i);
		}
		public Or_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOr_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOr_test(this);
		}
	}

	[RuleVersion(0)]
	public Or_testContext or_test() {
		Or_testContext _localctx = new Or_testContext(Context, State);
		EnterRule(_localctx, 182, RULE_or_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			and_test();
			State = 1117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1113;
				Match(OR);
				State = 1114;
				and_test();
				}
				}
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext[] not_test() {
			return GetRuleContexts<Not_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext not_test(int i) {
			return GetRuleContext<Not_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(Python3Parser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(Python3Parser.AND, i);
		}
		public And_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAnd_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAnd_test(this);
		}
	}

	[RuleVersion(0)]
	public And_testContext and_test() {
		And_testContext _localctx = new And_testContext(Context, State);
		EnterRule(_localctx, 184, RULE_and_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			not_test();
			State = 1125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 1121;
				Match(AND);
				State = 1122;
				not_test();
				}
				}
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(Python3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext not_test() {
			return GetRuleContext<Not_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public Not_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterNot_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitNot_test(this);
		}
	}

	[RuleVersion(0)]
	public Not_testContext not_test() {
		Not_testContext _localctx = new Not_testContext(Context, State);
		EnterRule(_localctx, 186, RULE_not_test);
		try {
			State = 1131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128;
				Match(NOT);
				State = 1129;
				not_test();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130;
				comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_opContext[] comp_op() {
			return GetRuleContexts<Comp_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_opContext comp_op(int i) {
			return GetRuleContext<Comp_opContext>(i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 188, RULE_comparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			expr();
			State = 1139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1134;
					comp_op();
					State = 1135;
					expr();
					}
					} 
				}
				State = 1141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(Python3Parser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(Python3Parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(Python3Parser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(Python3Parser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(Python3Parser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(Python3Parser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(Python3Parser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(Python3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(Python3Parser.IS, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_op(this);
		}
	}

	[RuleVersion(0)]
	public Comp_opContext comp_op() {
		Comp_opContext _localctx = new Comp_opContext(Context, State);
		EnterRule(_localctx, 190, RULE_comp_op);
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1142;
				Match(LESS_THAN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1143;
				Match(GREATER_THAN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1144;
				Match(EQUALS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1145;
				Match(GT_EQ);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1146;
				Match(LT_EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1147;
				Match(NOT_EQ_1);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1148;
				Match(NOT_EQ_2);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1149;
				Match(IN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1150;
				Match(NOT);
				State = 1151;
				Match(IN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1152;
				Match(IS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1153;
				Match(IS);
				State = 1154;
				Match(NOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Star_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_expr(this);
		}
	}

	[RuleVersion(0)]
	public Star_exprContext star_expr() {
		Star_exprContext _localctx = new Star_exprContext(Context, State);
		EnterRule(_localctx, 192, RULE_star_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			Match(STAR);
			State = 1158;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext[] xor_expr() {
			return GetRuleContexts<Xor_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext xor_expr(int i) {
			return GetRuleContext<Xor_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_OP() { return GetTokens(Python3Parser.OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP(int i) {
			return GetToken(Python3Parser.OR_OP, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 194, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			xor_expr();
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_OP) {
				{
				{
				State = 1161;
				Match(OR_OP);
				State = 1162;
				xor_expr();
				}
				}
				State = 1167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(Python3Parser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(Python3Parser.XOR, i);
		}
		public Xor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitXor_expr(this);
		}
	}

	[RuleVersion(0)]
	public Xor_exprContext xor_expr() {
		Xor_exprContext _localctx = new Xor_exprContext(Context, State);
		EnterRule(_localctx, 196, RULE_xor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168;
			and_expr();
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 1169;
				Match(XOR);
				State = 1170;
				and_expr();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext[] shift_expr() {
			return GetRuleContexts<Shift_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext shift_expr(int i) {
			return GetRuleContext<Shift_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_OP() { return GetTokens(Python3Parser.AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP(int i) {
			return GetToken(Python3Parser.AND_OP, i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 198, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			shift_expr();
			State = 1181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND_OP) {
				{
				{
				State = 1177;
				Match(AND_OP);
				State = 1178;
				shift_expr();
				}
				}
				State = 1183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext[] arith_expr() {
			return GetRuleContexts<Arith_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext arith_expr(int i) {
			return GetRuleContext<Arith_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_SHIFT() { return GetTokens(Python3Parser.LEFT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT(int i) {
			return GetToken(Python3Parser.LEFT_SHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_SHIFT() { return GetTokens(Python3Parser.RIGHT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT(int i) {
			return GetToken(Python3Parser.RIGHT_SHIFT, i);
		}
		public Shift_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitShift_expr(this);
		}
	}

	[RuleVersion(0)]
	public Shift_exprContext shift_expr() {
		Shift_exprContext _localctx = new Shift_exprContext(Context, State);
		EnterRule(_localctx, 200, RULE_shift_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			arith_expr();
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LEFT_SHIFT || _la==RIGHT_SHIFT) {
				{
				{
				State = 1185;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1186;
				arith_expr();
				}
				}
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(Python3Parser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(Python3Parser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(Python3Parser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(Python3Parser.MINUS, i);
		}
		public Arith_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterArith_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitArith_expr(this);
		}
	}

	[RuleVersion(0)]
	public Arith_exprContext arith_expr() {
		Arith_exprContext _localctx = new Arith_exprContext(Context, State);
		EnterRule(_localctx, 202, RULE_arith_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			term();
			State = 1197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1193;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1194;
					term();
					}
					} 
				}
				State = 1199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(Python3Parser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(Python3Parser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT() { return GetTokens(Python3Parser.AT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT(int i) {
			return GetToken(Python3Parser.AT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Python3Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Python3Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(Python3Parser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(Python3Parser.MOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDIV() { return GetTokens(Python3Parser.IDIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV(int i) {
			return GetToken(Python3Parser.IDIV, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 204, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			factor();
			State = 1205;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1201;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 1074659329L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1202;
					factor();
					}
					} 
				}
				State = 1207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Python3Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(Python3Parser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 206, RULE_factor);
		int _la;
		try {
			State = 1211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case MINUS:
			case NOT_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 35L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1209;
				factor();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1210;
				power();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 208, RULE_power);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			atom_expr();
			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POWER) {
				{
				State = 1214;
				Match(POWER);
				State = 1215;
				factor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(Python3Parser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrailerContext[] trailer() {
			return GetRuleContexts<TrailerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailerContext trailer(int i) {
			return GetRuleContext<TrailerContext>(i);
		}
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 210, RULE_atom_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 1218;
				Match(AWAIT);
				}
			}

			State = 1221;
			atom();
			State = 1225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1222;
					trailer();
					}
					} 
				}
				State = 1227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_compContext testlist_comp() {
			return GetRuleContext<Testlist_compContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(Python3Parser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(Python3Parser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictorsetmakerContext dictorsetmaker() {
			return GetRuleContext<DictorsetmakerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(Python3Parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(Python3Parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(Python3Parser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 212, RULE_atom);
		int _la;
		try {
			int _alt;
			State = 1255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1228;
				Match(OPEN_PAREN);
				State = 1231;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 1229;
					yield_expr();
					}
					break;
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case STAR:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1230;
					testlist_comp();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				State = 1233;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1234;
				Match(OPEN_BRACK);
				State = 1236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252238150243451928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1235;
					testlist_comp();
					}
				}

				State = 1238;
				Match(CLOSE_BRACK);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1239;
				Match(OPEN_BRACE);
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1240;
					dictorsetmaker();
					}
				}

				State = 1243;
				Match(CLOSE_BRACE);
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1244;
				name();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1245;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1247;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1246;
						Match(STRING);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1249;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ELLIPSIS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1251;
				Match(ELLIPSIS);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1252;
				Match(NONE);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1253;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1254;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Python3Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Python3Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(Python3Parser.MATCH, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 214, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Testlist_compContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Testlist_compContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist_comp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist_comp(this);
		}
	}

	[RuleVersion(0)]
	public Testlist_compContext testlist_comp() {
		Testlist_compContext _localctx = new Testlist_compContext(Context, State);
		EnterRule(_localctx, 216, RULE_testlist_comp);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 1259;
				test();
				}
				break;
			case STAR:
				{
				State = 1260;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case FOR:
				{
				State = 1263;
				comp_for();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
			case CLOSE_BRACK:
				{
				State = 1271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1264;
						Match(COMMA);
						State = 1267;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
						case NUMBER:
						case AWAIT:
						case FALSE:
						case LAMBDA:
						case MATCH:
						case NONE:
						case NOT:
						case TRUE:
						case UNDERSCORE:
						case NAME:
						case ELLIPSIS:
						case OPEN_PAREN:
						case OPEN_BRACK:
						case ADD:
						case MINUS:
						case NOT_OP:
						case OPEN_BRACE:
							{
							State = 1265;
							test();
							}
							break;
						case STAR:
							{
							State = 1266;
							star_expr();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 1273;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1274;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptlistContext subscriptlist() {
			return GetRuleContext<SubscriptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Python3Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TrailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTrailer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTrailer(this);
		}
	}

	[RuleVersion(0)]
	public TrailerContext trailer() {
		TrailerContext _localctx = new TrailerContext(Context, State);
		EnterRule(_localctx, 218, RULE_trailer);
		int _la;
		try {
			State = 1290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1279;
				Match(OPEN_PAREN);
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1280;
					arglist();
					}
				}

				State = 1283;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284;
				Match(OPEN_BRACK);
				State = 1285;
				subscriptlist();
				State = 1286;
				Match(CLOSE_BRACK);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1288;
				Match(DOT);
				State = 1289;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_Context[] subscript_() {
			return GetRuleContexts<Subscript_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_Context subscript_(int i) {
			return GetRuleContext<Subscript_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public SubscriptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubscriptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubscriptlist(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptlistContext subscriptlist() {
		SubscriptlistContext _localctx = new SubscriptlistContext(Context, State);
		EnterRule(_localctx, 220, RULE_subscriptlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292;
			subscript_();
			State = 1297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1293;
					Match(COMMA);
					State = 1294;
					subscript_();
					}
					} 
				}
				State = 1299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			State = 1301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1300;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceopContext sliceop() {
			return GetRuleContext<SliceopContext>(0);
		}
		public Subscript_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubscript_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubscript_(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_Context subscript_() {
		Subscript_Context _localctx = new Subscript_Context(Context, State);
		EnterRule(_localctx, 222, RULE_subscript_);
		int _la;
		try {
			State = 1314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1303;
				test();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1304;
					test();
					}
				}

				State = 1307;
				Match(COLON);
				State = 1309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1308;
					test();
					}
				}

				State = 1312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1311;
					sliceop();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public SliceopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSliceop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSliceop(this);
		}
	}

	[RuleVersion(0)]
	public SliceopContext sliceop() {
		SliceopContext _localctx = new SliceopContext(Context, State);
		EnterRule(_localctx, 224, RULE_sliceop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			Match(COLON);
			State = 1318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 1317;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 226, RULE_exprlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 1320;
				expr();
				}
				break;
			case STAR:
				{
				State = 1321;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1324;
					Match(COMMA);
					State = 1327;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case MATCH:
					case NONE:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 1325;
						expr();
						}
						break;
					case STAR:
						{
						State = 1326;
						star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			State = 1335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1334;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public TestlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist(this);
		}
	}

	[RuleVersion(0)]
	public TestlistContext testlist() {
		TestlistContext _localctx = new TestlistContext(Context, State);
		EnterRule(_localctx, 228, RULE_testlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337;
			test();
			State = 1342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1338;
					Match(COMMA);
					State = 1339;
					test();
					}
					} 
				}
				State = 1344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1345;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictorsetmakerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POWER() { return GetTokens(Python3Parser.POWER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER(int i) {
			return GetToken(Python3Parser.POWER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public DictorsetmakerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictorsetmaker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDictorsetmaker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDictorsetmaker(this);
		}
	}

	[RuleVersion(0)]
	public DictorsetmakerContext dictorsetmaker() {
		DictorsetmakerContext _localctx = new DictorsetmakerContext(Context, State);
		EnterRule(_localctx, 230, RULE_dictorsetmaker);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				{
				State = 1354;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1348;
					test();
					State = 1349;
					Match(COLON);
					State = 1350;
					test();
					}
					break;
				case POWER:
					{
					State = 1352;
					Match(POWER);
					State = 1353;
					expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1374;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASYNC:
				case FOR:
					{
					State = 1356;
					comp_for();
					}
					break;
				case COMMA:
				case CLOSE_BRACE:
					{
					State = 1368;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1357;
							Match(COMMA);
							State = 1364;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
							case NUMBER:
							case AWAIT:
							case FALSE:
							case LAMBDA:
							case MATCH:
							case NONE:
							case NOT:
							case TRUE:
							case UNDERSCORE:
							case NAME:
							case ELLIPSIS:
							case OPEN_PAREN:
							case OPEN_BRACK:
							case ADD:
							case MINUS:
							case NOT_OP:
							case OPEN_BRACE:
								{
								State = 1358;
								test();
								State = 1359;
								Match(COLON);
								State = 1360;
								test();
								}
								break;
							case POWER:
								{
								State = 1362;
								Match(POWER);
								State = 1363;
								expr();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							} 
						}
						State = 1370;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
					}
					State = 1372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1371;
						Match(COMMA);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 1378;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1376;
					test();
					}
					break;
				case STAR:
					{
					State = 1377;
					star_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1394;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASYNC:
				case FOR:
					{
					State = 1380;
					comp_for();
					}
					break;
				case COMMA:
				case CLOSE_BRACE:
					{
					State = 1388;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1381;
							Match(COMMA);
							State = 1384;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
							case NUMBER:
							case AWAIT:
							case FALSE:
							case LAMBDA:
							case MATCH:
							case NONE:
							case NOT:
							case TRUE:
							case UNDERSCORE:
							case NAME:
							case ELLIPSIS:
							case OPEN_PAREN:
							case OPEN_BRACK:
							case ADD:
							case MINUS:
							case NOT_OP:
							case OPEN_BRACE:
								{
								State = 1382;
								test();
								}
								break;
							case STAR:
								{
								State = 1383;
								star_expr();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							} 
						}
						State = 1390;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
					}
					State = 1392;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1391;
						Match(COMMA);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Python3Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public ClassdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClassdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClassdef(this);
		}
	}

	[RuleVersion(0)]
	public ClassdefContext classdef() {
		ClassdefContext _localctx = new ClassdefContext(Context, State);
		EnterRule(_localctx, 232, RULE_classdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398;
			Match(CLASS);
			State = 1399;
			name();
			State = 1405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 1400;
				Match(OPEN_PAREN);
				State = 1402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1401;
					arglist();
					}
				}

				State = 1404;
				Match(CLOSE_PAREN);
				}
			}

			State = 1407;
			Match(COLON);
			State = 1408;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 234, RULE_arglist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			argument();
			State = 1415;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1411;
					Match(COMMA);
					State = 1412;
					argument();
					}
					} 
				}
				State = 1417;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			}
			State = 1419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1418;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 236, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 1421;
				test();
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC || _la==FOR) {
					{
					State = 1422;
					comp_for();
					}
				}

				}
				break;
			case 2:
				{
				State = 1425;
				test();
				State = 1426;
				Match(ASSIGN);
				State = 1427;
				test();
				}
				break;
			case 3:
				{
				State = 1429;
				Match(POWER);
				State = 1430;
				test();
				}
				break;
			case 4:
				{
				State = 1431;
				Match(STAR);
				State = 1432;
				test();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_iterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_ifContext comp_if() {
			return GetRuleContext<Comp_ifContext>(0);
		}
		public Comp_iterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_iter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_iter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_iter(this);
		}
	}

	[RuleVersion(0)]
	public Comp_iterContext comp_iter() {
		Comp_iterContext _localctx = new Comp_iterContext(Context, State);
		EnterRule(_localctx, 238, RULE_comp_iter);
		try {
			State = 1437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435;
				comp_for();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1436;
				comp_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Python3Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test() {
			return GetRuleContext<Or_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comp_iterContext comp_iter() {
			return GetRuleContext<Comp_iterContext>(0);
		}
		public Comp_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_for(this);
		}
	}

	[RuleVersion(0)]
	public Comp_forContext comp_for() {
		Comp_forContext _localctx = new Comp_forContext(Context, State);
		EnterRule(_localctx, 240, RULE_comp_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 1439;
				Match(ASYNC);
				}
			}

			State = 1442;
			Match(FOR);
			State = 1443;
			exprlist();
			State = 1444;
			Match(IN);
			State = 1445;
			or_test();
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37749248L) != 0)) {
				{
				State = 1446;
				comp_iter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Test_nocondContext test_nocond() {
			return GetRuleContext<Test_nocondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_iterContext comp_iter() {
			return GetRuleContext<Comp_iterContext>(0);
		}
		public Comp_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_if(this);
		}
	}

	[RuleVersion(0)]
	public Comp_ifContext comp_if() {
		Comp_ifContext _localctx = new Comp_ifContext(Context, State);
		EnterRule(_localctx, 242, RULE_comp_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			Match(IF);
			State = 1450;
			test_nocond();
			State = 1452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37749248L) != 0)) {
				{
				State = 1451;
				comp_iter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encoding_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Encoding_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encoding_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterEncoding_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitEncoding_decl(this);
		}
	}

	[RuleVersion(0)]
	public Encoding_declContext encoding_decl() {
		Encoding_declContext _localctx = new Encoding_declContext(Context, State);
		EnterRule(_localctx, 244, RULE_encoding_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Python3Parser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_argContext yield_arg() {
			return GetRuleContext<Yield_argContext>(0);
		}
		public Yield_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_expr(this);
		}
	}

	[RuleVersion(0)]
	public Yield_exprContext yield_expr() {
		Yield_exprContext _localctx = new Yield_exprContext(Context, State);
		EnterRule(_localctx, 246, RULE_yield_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456;
			Match(YIELD);
			State = 1458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556213912600L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 1457;
				yield_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		public Yield_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_arg(this);
		}
	}

	[RuleVersion(0)]
	public Yield_argContext yield_arg() {
		Yield_argContext _localctx = new Yield_argContext(Context, State);
		EnterRule(_localctx, 248, RULE_yield_arg);
		try {
			State = 1463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460;
				Match(FROM);
				State = 1461;
				test();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1462;
				testlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(Python3Parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(Python3Parser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 250, RULE_strings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1465;
				Match(STRING);
				}
				}
				State = 1468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 60: return literal_pattern_sempred((Literal_patternContext)_localctx, predIndex);
		case 61: return literal_expr_sempred((Literal_exprContext)_localctx, predIndex);
		case 68: return pattern_capture_target_sempred((Pattern_capture_targetContext)_localctx, predIndex);
		case 70: return value_pattern_sempred((Value_patternContext)_localctx, predIndex);
		}
		return true;
	}
	private bool literal_pattern_sempred(Literal_patternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  this.CannotBePlusMinus() ;
		}
		return true;
	}
	private bool literal_expr_sempred(Literal_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  this.CannotBePlusMinus() ;
		}
		return true;
	}
	private bool pattern_capture_target_sempred(Pattern_capture_targetContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  this.CannotBeDotLpEq() ;
		}
		return true;
	}
	private bool value_pattern_sempred(Value_patternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  this.CannotBeDotLpEq() ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,102,1471,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,1,0,1,0,1,0,1,0,1,0,3,0,258,8,0,1,
		1,1,1,5,1,262,8,1,10,1,12,1,265,9,1,1,1,1,1,1,2,1,2,5,2,271,8,2,10,2,12,
		2,274,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,282,8,3,1,3,3,3,285,8,3,1,3,1,3,
		1,4,4,4,290,8,4,11,4,12,4,291,1,5,1,5,1,5,1,5,3,5,298,8,5,1,6,1,6,1,6,
		1,7,1,7,1,7,1,7,1,7,3,7,308,8,7,1,7,1,7,1,7,1,8,1,8,3,8,315,8,8,1,8,1,
		8,1,9,1,9,1,9,3,9,322,8,9,1,9,1,9,1,9,1,9,3,9,328,8,9,5,9,330,8,9,10,9,
		12,9,333,9,9,1,9,1,9,1,9,3,9,338,8,9,1,9,1,9,1,9,1,9,3,9,344,8,9,5,9,346,
		8,9,10,9,12,9,349,9,9,1,9,1,9,1,9,1,9,3,9,355,8,9,3,9,357,8,9,3,9,359,
		8,9,1,9,1,9,1,9,3,9,364,8,9,3,9,366,8,9,3,9,368,8,9,1,9,1,9,3,9,372,8,
		9,1,9,1,9,1,9,1,9,3,9,378,8,9,5,9,380,8,9,10,9,12,9,383,9,9,1,9,1,9,1,
		9,1,9,3,9,389,8,9,3,9,391,8,9,3,9,393,8,9,1,9,1,9,1,9,3,9,398,8,9,3,9,
		400,8,9,1,10,1,10,1,10,3,10,405,8,10,1,11,1,11,1,11,3,11,410,8,11,1,11,
		1,11,1,11,1,11,3,11,416,8,11,5,11,418,8,11,10,11,12,11,421,9,11,1,11,1,
		11,1,11,3,11,426,8,11,1,11,1,11,1,11,1,11,3,11,432,8,11,5,11,434,8,11,
		10,11,12,11,437,9,11,1,11,1,11,1,11,1,11,3,11,443,8,11,3,11,445,8,11,3,
		11,447,8,11,1,11,1,11,1,11,3,11,452,8,11,3,11,454,8,11,3,11,456,8,11,1,
		11,1,11,3,11,460,8,11,1,11,1,11,1,11,1,11,3,11,466,8,11,5,11,468,8,11,
		10,11,12,11,471,9,11,1,11,1,11,1,11,1,11,3,11,477,8,11,3,11,479,8,11,3,
		11,481,8,11,1,11,1,11,1,11,3,11,486,8,11,3,11,488,8,11,1,12,1,12,1,13,
		1,13,3,13,494,8,13,1,14,1,14,1,14,5,14,499,8,14,10,14,12,14,502,9,14,1,
		14,3,14,505,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
		517,8,15,1,16,1,16,1,16,1,16,1,16,3,16,524,8,16,1,16,1,16,1,16,3,16,529,
		8,16,5,16,531,8,16,10,16,12,16,534,9,16,3,16,536,8,16,1,17,1,17,1,17,1,
		17,3,17,542,8,17,1,18,1,18,3,18,546,8,18,1,18,1,18,1,18,3,18,551,8,18,
		5,18,553,8,18,10,18,12,18,556,9,18,1,18,3,18,559,8,18,1,19,1,19,1,20,1,
		20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,573,8,22,1,23,1,23,1,24,
		1,24,1,25,1,25,3,25,581,8,25,1,26,1,26,1,27,1,27,1,27,1,27,3,27,589,8,
		27,3,27,591,8,27,1,28,1,28,3,28,595,8,28,1,29,1,29,1,29,1,30,1,30,5,30,
		602,8,30,10,30,12,30,605,9,30,1,30,1,30,4,30,609,8,30,11,30,12,30,610,
		3,30,613,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,622,8,30,1,31,1,
		31,1,31,3,31,627,8,31,1,32,1,32,1,32,3,32,632,8,32,1,33,1,33,1,33,5,33,
		637,8,33,10,33,12,33,640,9,33,1,33,3,33,643,8,33,1,34,1,34,1,34,5,34,648,
		8,34,10,34,12,34,651,9,34,1,35,1,35,1,35,5,35,656,8,35,10,35,12,35,659,
		9,35,1,36,1,36,1,36,1,36,5,36,665,8,36,10,36,12,36,668,9,36,1,37,1,37,
		1,37,1,37,5,37,674,8,37,10,37,12,37,677,9,37,1,38,1,38,1,38,1,38,3,38,
		683,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,695,8,
		39,1,40,1,40,1,40,1,40,3,40,701,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,5,41,712,8,41,10,41,12,41,715,9,41,1,41,1,41,1,41,3,41,720,8,
		41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,729,8,42,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,3,43,740,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,4,44,749,8,44,11,44,12,44,750,1,44,1,44,1,44,3,44,756,8,44,1,44,1,44,
		1,44,3,44,761,8,44,1,44,1,44,1,44,3,44,766,8,44,1,45,1,45,1,45,1,45,5,
		45,772,8,45,10,45,12,45,775,9,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,783,
		8,46,1,47,1,47,1,47,1,47,3,47,789,8,47,3,47,791,8,47,1,48,1,48,1,48,1,
		48,4,48,797,8,48,11,48,12,48,798,1,48,1,48,3,48,803,8,48,1,49,1,49,1,49,
		1,49,1,49,1,49,4,49,811,8,49,11,49,12,49,812,1,49,1,49,1,50,1,50,1,50,
		3,50,820,8,50,1,50,3,50,823,8,50,1,51,1,51,4,51,827,8,51,11,51,12,51,828,
		1,51,3,51,832,8,51,1,52,1,52,1,52,3,52,837,8,52,1,53,1,53,1,53,3,53,842,
		8,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,3,55,852,8,55,1,56,1,56,3,
		56,856,8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,865,8,58,10,58,12,
		58,868,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,878,8,59,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,888,8,60,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,3,61,898,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		3,62,908,8,62,1,63,1,63,1,63,3,63,913,8,63,1,64,1,64,1,64,3,64,918,8,64,
		1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,
		1,71,1,71,1,71,4,71,937,8,71,11,71,12,71,938,1,72,1,72,3,72,943,8,72,1,
		73,1,73,1,73,1,73,1,74,1,74,3,74,951,8,74,1,74,1,74,1,74,3,74,956,8,74,
		1,74,3,74,959,8,74,1,75,1,75,1,75,3,75,964,8,75,1,76,1,76,1,76,5,76,969,
		8,76,10,76,12,76,972,9,76,1,76,3,76,975,8,76,1,77,1,77,3,77,979,8,77,1,
		78,1,78,1,78,1,78,3,78,985,8,78,1,79,1,79,1,79,1,79,1,79,3,79,992,8,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1001,8,79,1,79,1,79,1,79,1,79,
		1,79,3,79,1008,8,79,1,79,1,79,3,79,1012,8,79,1,80,1,80,1,80,5,80,1017,
		8,80,10,80,12,80,1020,9,80,1,81,1,81,3,81,1024,8,81,1,81,1,81,1,81,1,82,
		1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1040,8,83,1,83,
		1,83,1,83,1,83,1,83,1,83,3,83,1048,8,83,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,3,83,1058,8,83,1,83,1,83,3,83,1062,8,83,1,84,1,84,1,84,5,84,
		1067,8,84,10,84,12,84,1070,9,84,1,85,1,85,1,85,5,85,1075,8,85,10,85,12,
		85,1078,9,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1090,
		8,87,1,87,3,87,1093,8,87,1,88,1,88,3,88,1097,8,88,1,89,1,89,3,89,1101,
		8,89,1,89,1,89,1,89,1,90,1,90,3,90,1108,8,90,1,90,1,90,1,90,1,91,1,91,
		1,91,5,91,1116,8,91,10,91,12,91,1119,9,91,1,92,1,92,1,92,5,92,1124,8,92,
		10,92,12,92,1127,9,92,1,93,1,93,1,93,3,93,1132,8,93,1,94,1,94,1,94,1,94,
		5,94,1138,8,94,10,94,12,94,1141,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,1,95,1,95,1,95,1,95,3,95,1156,8,95,1,96,1,96,1,96,1,97,1,97,
		1,97,5,97,1164,8,97,10,97,12,97,1167,9,97,1,98,1,98,1,98,5,98,1172,8,98,
		10,98,12,98,1175,9,98,1,99,1,99,1,99,5,99,1180,8,99,10,99,12,99,1183,9,
		99,1,100,1,100,1,100,5,100,1188,8,100,10,100,12,100,1191,9,100,1,101,1,
		101,1,101,5,101,1196,8,101,10,101,12,101,1199,9,101,1,102,1,102,1,102,
		5,102,1204,8,102,10,102,12,102,1207,9,102,1,103,1,103,1,103,3,103,1212,
		8,103,1,104,1,104,1,104,3,104,1217,8,104,1,105,3,105,1220,8,105,1,105,
		1,105,5,105,1224,8,105,10,105,12,105,1227,9,105,1,106,1,106,1,106,3,106,
		1232,8,106,1,106,1,106,1,106,3,106,1237,8,106,1,106,1,106,1,106,3,106,
		1242,8,106,1,106,1,106,1,106,1,106,4,106,1248,8,106,11,106,12,106,1249,
		1,106,1,106,1,106,1,106,3,106,1256,8,106,1,107,1,107,1,108,1,108,3,108,
		1262,8,108,1,108,1,108,1,108,1,108,3,108,1268,8,108,5,108,1270,8,108,10,
		108,12,108,1273,9,108,1,108,3,108,1276,8,108,3,108,1278,8,108,1,109,1,
		109,3,109,1282,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1291,
		8,109,1,110,1,110,1,110,5,110,1296,8,110,10,110,12,110,1299,9,110,1,110,
		3,110,1302,8,110,1,111,1,111,3,111,1306,8,111,1,111,1,111,3,111,1310,8,
		111,1,111,3,111,1313,8,111,3,111,1315,8,111,1,112,1,112,3,112,1319,8,112,
		1,113,1,113,3,113,1323,8,113,1,113,1,113,1,113,3,113,1328,8,113,5,113,
		1330,8,113,10,113,12,113,1333,9,113,1,113,3,113,1336,8,113,1,114,1,114,
		1,114,5,114,1341,8,114,10,114,12,114,1344,9,114,1,114,3,114,1347,8,114,
		1,115,1,115,1,115,1,115,1,115,1,115,3,115,1355,8,115,1,115,1,115,1,115,
		1,115,1,115,1,115,1,115,1,115,3,115,1365,8,115,5,115,1367,8,115,10,115,
		12,115,1370,9,115,1,115,3,115,1373,8,115,3,115,1375,8,115,1,115,1,115,
		3,115,1379,8,115,1,115,1,115,1,115,1,115,3,115,1385,8,115,5,115,1387,8,
		115,10,115,12,115,1390,9,115,1,115,3,115,1393,8,115,3,115,1395,8,115,3,
		115,1397,8,115,1,116,1,116,1,116,1,116,3,116,1403,8,116,1,116,3,116,1406,
		8,116,1,116,1,116,1,116,1,117,1,117,1,117,5,117,1414,8,117,10,117,12,117,
		1417,9,117,1,117,3,117,1420,8,117,1,118,1,118,3,118,1424,8,118,1,118,1,
		118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1434,8,118,1,119,1,119,3,
		119,1438,8,119,1,120,3,120,1441,8,120,1,120,1,120,1,120,1,120,1,120,3,
		120,1448,8,120,1,121,1,121,1,121,3,121,1453,8,121,1,122,1,122,1,123,1,
		123,3,123,1459,8,123,1,124,1,124,1,124,3,124,1464,8,124,1,125,4,125,1467,
		8,125,11,125,12,125,1468,1,125,0,0,126,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
		222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,0,7,1,0,88,
		100,1,0,54,55,1,0,69,70,1,0,71,72,3,0,56,56,73,75,86,86,2,0,71,72,76,76,
		3,0,30,30,40,40,45,45,1614,0,257,1,0,0,0,2,263,1,0,0,0,4,268,1,0,0,0,6,
		277,1,0,0,0,8,289,1,0,0,0,10,293,1,0,0,0,12,299,1,0,0,0,14,302,1,0,0,0,
		16,312,1,0,0,0,18,399,1,0,0,0,20,401,1,0,0,0,22,487,1,0,0,0,24,489,1,0,
		0,0,26,493,1,0,0,0,28,495,1,0,0,0,30,516,1,0,0,0,32,518,1,0,0,0,34,537,
		1,0,0,0,36,545,1,0,0,0,38,560,1,0,0,0,40,562,1,0,0,0,42,565,1,0,0,0,44,
		572,1,0,0,0,46,574,1,0,0,0,48,576,1,0,0,0,50,578,1,0,0,0,52,582,1,0,0,
		0,54,584,1,0,0,0,56,594,1,0,0,0,58,596,1,0,0,0,60,599,1,0,0,0,62,623,1,
		0,0,0,64,628,1,0,0,0,66,633,1,0,0,0,68,644,1,0,0,0,70,652,1,0,0,0,72,660,
		1,0,0,0,74,669,1,0,0,0,76,678,1,0,0,0,78,694,1,0,0,0,80,696,1,0,0,0,82,
		702,1,0,0,0,84,721,1,0,0,0,86,730,1,0,0,0,88,741,1,0,0,0,90,767,1,0,0,
		0,92,779,1,0,0,0,94,784,1,0,0,0,96,802,1,0,0,0,98,804,1,0,0,0,100,822,
		1,0,0,0,102,824,1,0,0,0,104,836,1,0,0,0,106,838,1,0,0,0,108,846,1,0,0,
		0,110,851,1,0,0,0,112,855,1,0,0,0,114,857,1,0,0,0,116,861,1,0,0,0,118,
		877,1,0,0,0,120,887,1,0,0,0,122,897,1,0,0,0,124,907,1,0,0,0,126,912,1,
		0,0,0,128,917,1,0,0,0,130,919,1,0,0,0,132,921,1,0,0,0,134,923,1,0,0,0,
		136,925,1,0,0,0,138,928,1,0,0,0,140,930,1,0,0,0,142,933,1,0,0,0,144,942,
		1,0,0,0,146,944,1,0,0,0,148,958,1,0,0,0,150,960,1,0,0,0,152,965,1,0,0,
		0,154,978,1,0,0,0,156,984,1,0,0,0,158,1011,1,0,0,0,160,1013,1,0,0,0,162,
		1023,1,0,0,0,164,1028,1,0,0,0,166,1061,1,0,0,0,168,1063,1,0,0,0,170,1071,
		1,0,0,0,172,1079,1,0,0,0,174,1092,1,0,0,0,176,1096,1,0,0,0,178,1098,1,
		0,0,0,180,1105,1,0,0,0,182,1112,1,0,0,0,184,1120,1,0,0,0,186,1131,1,0,
		0,0,188,1133,1,0,0,0,190,1155,1,0,0,0,192,1157,1,0,0,0,194,1160,1,0,0,
		0,196,1168,1,0,0,0,198,1176,1,0,0,0,200,1184,1,0,0,0,202,1192,1,0,0,0,
		204,1200,1,0,0,0,206,1211,1,0,0,0,208,1213,1,0,0,0,210,1219,1,0,0,0,212,
		1255,1,0,0,0,214,1257,1,0,0,0,216,1261,1,0,0,0,218,1290,1,0,0,0,220,1292,
		1,0,0,0,222,1314,1,0,0,0,224,1316,1,0,0,0,226,1322,1,0,0,0,228,1337,1,
		0,0,0,230,1396,1,0,0,0,232,1398,1,0,0,0,234,1410,1,0,0,0,236,1433,1,0,
		0,0,238,1437,1,0,0,0,240,1440,1,0,0,0,242,1449,1,0,0,0,244,1454,1,0,0,
		0,246,1456,1,0,0,0,248,1463,1,0,0,0,250,1466,1,0,0,0,252,258,5,44,0,0,
		253,258,3,28,14,0,254,255,3,78,39,0,255,256,5,44,0,0,256,258,1,0,0,0,257,
		252,1,0,0,0,257,253,1,0,0,0,257,254,1,0,0,0,258,1,1,0,0,0,259,262,5,44,
		0,0,260,262,3,26,13,0,261,259,1,0,0,0,261,260,1,0,0,0,262,265,1,0,0,0,
		263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,267,
		5,0,0,1,267,3,1,0,0,0,268,272,3,228,114,0,269,271,5,44,0,0,270,269,1,0,
		0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,
		272,1,0,0,0,275,276,5,0,0,1,276,5,1,0,0,0,277,278,5,86,0,0,278,284,3,70,
		35,0,279,281,5,57,0,0,280,282,3,234,117,0,281,280,1,0,0,0,281,282,1,0,
		0,0,282,283,1,0,0,0,283,285,5,58,0,0,284,279,1,0,0,0,284,285,1,0,0,0,285,
		286,1,0,0,0,286,287,5,44,0,0,287,7,1,0,0,0,288,290,3,6,3,0,289,288,1,0,
		0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,9,1,0,0,0,293,
		297,3,8,4,0,294,298,3,232,116,0,295,298,3,14,7,0,296,298,3,12,6,0,297,
		294,1,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,11,1,0,0,0,299,300,5,9,
		0,0,300,301,3,14,7,0,301,13,1,0,0,0,302,303,5,15,0,0,303,304,3,214,107,
		0,304,307,3,16,8,0,305,306,5,87,0,0,306,308,3,174,87,0,307,305,1,0,0,0,
		307,308,1,0,0,0,308,309,1,0,0,0,309,310,5,60,0,0,310,311,3,96,48,0,311,
		15,1,0,0,0,312,314,5,57,0,0,313,315,3,18,9,0,314,313,1,0,0,0,314,315,1,
		0,0,0,315,316,1,0,0,0,316,317,5,58,0,0,317,17,1,0,0,0,318,321,3,20,10,
		0,319,320,5,63,0,0,320,322,3,174,87,0,321,319,1,0,0,0,321,322,1,0,0,0,
		322,331,1,0,0,0,323,324,5,59,0,0,324,327,3,20,10,0,325,326,5,63,0,0,326,
		328,3,174,87,0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,323,
		1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,367,1,0,0,
		0,333,331,1,0,0,0,334,365,5,59,0,0,335,337,5,56,0,0,336,338,3,20,10,0,
		337,336,1,0,0,0,337,338,1,0,0,0,338,347,1,0,0,0,339,340,5,59,0,0,340,343,
		3,20,10,0,341,342,5,63,0,0,342,344,3,174,87,0,343,341,1,0,0,0,343,344,
		1,0,0,0,344,346,1,0,0,0,345,339,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,
		0,347,348,1,0,0,0,348,358,1,0,0,0,349,347,1,0,0,0,350,356,5,59,0,0,351,
		352,5,62,0,0,352,354,3,20,10,0,353,355,5,59,0,0,354,353,1,0,0,0,354,355,
		1,0,0,0,355,357,1,0,0,0,356,351,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,
		0,358,350,1,0,0,0,358,359,1,0,0,0,359,366,1,0,0,0,360,361,5,62,0,0,361,
		363,3,20,10,0,362,364,5,59,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,366,
		1,0,0,0,365,335,1,0,0,0,365,360,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,
		0,367,334,1,0,0,0,367,368,1,0,0,0,368,400,1,0,0,0,369,371,5,56,0,0,370,
		372,3,20,10,0,371,370,1,0,0,0,371,372,1,0,0,0,372,381,1,0,0,0,373,374,
		5,59,0,0,374,377,3,20,10,0,375,376,5,63,0,0,376,378,3,174,87,0,377,375,
		1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,373,1,0,0,0,380,383,1,0,0,
		0,381,379,1,0,0,0,381,382,1,0,0,0,382,392,1,0,0,0,383,381,1,0,0,0,384,
		390,5,59,0,0,385,386,5,62,0,0,386,388,3,20,10,0,387,389,5,59,0,0,388,387,
		1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,385,1,0,0,0,390,391,1,0,0,
		0,391,393,1,0,0,0,392,384,1,0,0,0,392,393,1,0,0,0,393,400,1,0,0,0,394,
		395,5,62,0,0,395,397,3,20,10,0,396,398,5,59,0,0,397,396,1,0,0,0,397,398,
		1,0,0,0,398,400,1,0,0,0,399,318,1,0,0,0,399,369,1,0,0,0,399,394,1,0,0,
		0,400,19,1,0,0,0,401,404,3,214,107,0,402,403,5,60,0,0,403,405,3,174,87,
		0,404,402,1,0,0,0,404,405,1,0,0,0,405,21,1,0,0,0,406,409,3,24,12,0,407,
		408,5,63,0,0,408,410,3,174,87,0,409,407,1,0,0,0,409,410,1,0,0,0,410,419,
		1,0,0,0,411,412,5,59,0,0,412,415,3,24,12,0,413,414,5,63,0,0,414,416,3,
		174,87,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,411,1,0,0,
		0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,455,1,0,0,0,421,
		419,1,0,0,0,422,453,5,59,0,0,423,425,5,56,0,0,424,426,3,24,12,0,425,424,
		1,0,0,0,425,426,1,0,0,0,426,435,1,0,0,0,427,428,5,59,0,0,428,431,3,24,
		12,0,429,430,5,63,0,0,430,432,3,174,87,0,431,429,1,0,0,0,431,432,1,0,0,
		0,432,434,1,0,0,0,433,427,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,
		436,1,0,0,0,436,446,1,0,0,0,437,435,1,0,0,0,438,444,5,59,0,0,439,440,5,
		62,0,0,440,442,3,24,12,0,441,443,5,59,0,0,442,441,1,0,0,0,442,443,1,0,
		0,0,443,445,1,0,0,0,444,439,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,
		438,1,0,0,0,446,447,1,0,0,0,447,454,1,0,0,0,448,449,5,62,0,0,449,451,3,
		24,12,0,450,452,5,59,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,
		0,453,423,1,0,0,0,453,448,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,
		422,1,0,0,0,455,456,1,0,0,0,456,488,1,0,0,0,457,459,5,56,0,0,458,460,3,
		24,12,0,459,458,1,0,0,0,459,460,1,0,0,0,460,469,1,0,0,0,461,462,5,59,0,
		0,462,465,3,24,12,0,463,464,5,63,0,0,464,466,3,174,87,0,465,463,1,0,0,
		0,465,466,1,0,0,0,466,468,1,0,0,0,467,461,1,0,0,0,468,471,1,0,0,0,469,
		467,1,0,0,0,469,470,1,0,0,0,470,480,1,0,0,0,471,469,1,0,0,0,472,478,5,
		59,0,0,473,474,5,62,0,0,474,476,3,24,12,0,475,477,5,59,0,0,476,475,1,0,
		0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,473,1,0,0,0,478,479,1,0,0,0,479,
		481,1,0,0,0,480,472,1,0,0,0,480,481,1,0,0,0,481,488,1,0,0,0,482,483,5,
		62,0,0,483,485,3,24,12,0,484,486,5,59,0,0,485,484,1,0,0,0,485,486,1,0,
		0,0,486,488,1,0,0,0,487,406,1,0,0,0,487,457,1,0,0,0,487,482,1,0,0,0,488,
		23,1,0,0,0,489,490,3,214,107,0,490,25,1,0,0,0,491,494,3,28,14,0,492,494,
		3,78,39,0,493,491,1,0,0,0,493,492,1,0,0,0,494,27,1,0,0,0,495,500,3,30,
		15,0,496,497,5,61,0,0,497,499,3,30,15,0,498,496,1,0,0,0,499,502,1,0,0,
		0,500,498,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,503,
		505,5,61,0,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,5,
		44,0,0,507,29,1,0,0,0,508,517,3,32,16,0,509,517,3,40,20,0,510,517,3,42,
		21,0,511,517,3,44,22,0,512,517,3,56,28,0,513,517,3,72,36,0,514,517,3,74,
		37,0,515,517,3,76,38,0,516,508,1,0,0,0,516,509,1,0,0,0,516,510,1,0,0,0,
		516,511,1,0,0,0,516,512,1,0,0,0,516,513,1,0,0,0,516,514,1,0,0,0,516,515,
		1,0,0,0,517,31,1,0,0,0,518,535,3,36,18,0,519,536,3,34,17,0,520,523,3,38,
		19,0,521,524,3,246,123,0,522,524,3,228,114,0,523,521,1,0,0,0,523,522,1,
		0,0,0,524,536,1,0,0,0,525,528,5,63,0,0,526,529,3,246,123,0,527,529,3,36,
		18,0,528,526,1,0,0,0,528,527,1,0,0,0,529,531,1,0,0,0,530,525,1,0,0,0,531,
		534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,536,1,0,0,0,534,532,1,
		0,0,0,535,519,1,0,0,0,535,520,1,0,0,0,535,532,1,0,0,0,536,33,1,0,0,0,537,
		538,5,60,0,0,538,541,3,174,87,0,539,540,5,63,0,0,540,542,3,174,87,0,541,
		539,1,0,0,0,541,542,1,0,0,0,542,35,1,0,0,0,543,546,3,174,87,0,544,546,
		3,192,96,0,545,543,1,0,0,0,545,544,1,0,0,0,546,554,1,0,0,0,547,550,5,59,
		0,0,548,551,3,174,87,0,549,551,3,192,96,0,550,548,1,0,0,0,550,549,1,0,
		0,0,551,553,1,0,0,0,552,547,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,
		555,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,557,559,5,59,0,0,558,557,1,
		0,0,0,558,559,1,0,0,0,559,37,1,0,0,0,560,561,7,0,0,0,561,39,1,0,0,0,562,
		563,5,16,0,0,563,564,3,226,113,0,564,41,1,0,0,0,565,566,5,35,0,0,566,43,
		1,0,0,0,567,573,3,46,23,0,568,573,3,48,24,0,569,573,3,50,25,0,570,573,
		3,54,27,0,571,573,3,52,26,0,572,567,1,0,0,0,572,568,1,0,0,0,572,569,1,
		0,0,0,572,570,1,0,0,0,572,571,1,0,0,0,573,45,1,0,0,0,574,575,5,11,0,0,
		575,47,1,0,0,0,576,577,5,14,0,0,577,49,1,0,0,0,578,580,5,37,0,0,579,581,
		3,228,114,0,580,579,1,0,0,0,580,581,1,0,0,0,581,51,1,0,0,0,582,583,3,246,
		123,0,583,53,1,0,0,0,584,590,5,36,0,0,585,588,3,174,87,0,586,587,5,23,
		0,0,587,589,3,174,87,0,588,586,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,
		590,585,1,0,0,0,590,591,1,0,0,0,591,55,1,0,0,0,592,595,3,58,29,0,593,595,
		3,60,30,0,594,592,1,0,0,0,594,593,1,0,0,0,595,57,1,0,0,0,596,597,5,26,
		0,0,597,598,3,68,34,0,598,59,1,0,0,0,599,612,5,23,0,0,600,602,7,1,0,0,
		601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,
		1,0,0,0,605,603,1,0,0,0,606,613,3,70,35,0,607,609,7,1,0,0,608,607,1,0,
		0,0,609,610,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,
		603,1,0,0,0,612,608,1,0,0,0,613,614,1,0,0,0,614,621,5,26,0,0,615,622,5,
		56,0,0,616,617,5,57,0,0,617,618,3,66,33,0,618,619,5,58,0,0,619,622,1,0,
		0,0,620,622,3,66,33,0,621,615,1,0,0,0,621,616,1,0,0,0,621,620,1,0,0,0,
		622,61,1,0,0,0,623,626,3,214,107,0,624,625,5,7,0,0,625,627,3,214,107,0,
		626,624,1,0,0,0,626,627,1,0,0,0,627,63,1,0,0,0,628,631,3,70,35,0,629,630,
		5,7,0,0,630,632,3,214,107,0,631,629,1,0,0,0,631,632,1,0,0,0,632,65,1,0,
		0,0,633,638,3,62,31,0,634,635,5,59,0,0,635,637,3,62,31,0,636,634,1,0,0,
		0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,642,1,0,0,0,640,
		638,1,0,0,0,641,643,5,59,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,67,1,
		0,0,0,644,649,3,64,32,0,645,646,5,59,0,0,646,648,3,64,32,0,647,645,1,0,
		0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,69,1,0,0,0,651,
		649,1,0,0,0,652,657,3,214,107,0,653,654,5,54,0,0,654,656,3,214,107,0,655,
		653,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,71,1,0,
		0,0,659,657,1,0,0,0,660,661,5,24,0,0,661,666,3,214,107,0,662,663,5,59,
		0,0,663,665,3,214,107,0,664,662,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,
		0,666,667,1,0,0,0,667,73,1,0,0,0,668,666,1,0,0,0,669,670,5,32,0,0,670,
		675,3,214,107,0,671,672,5,59,0,0,672,674,3,214,107,0,673,671,1,0,0,0,674,
		677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,75,1,0,0,0,677,675,1,0,
		0,0,678,679,5,8,0,0,679,682,3,174,87,0,680,681,5,59,0,0,681,683,3,174,
		87,0,682,680,1,0,0,0,682,683,1,0,0,0,683,77,1,0,0,0,684,695,3,82,41,0,
		685,695,3,84,42,0,686,695,3,86,43,0,687,695,3,88,44,0,688,695,3,90,45,
		0,689,695,3,14,7,0,690,695,3,232,116,0,691,695,3,10,5,0,692,695,3,80,40,
		0,693,695,3,98,49,0,694,684,1,0,0,0,694,685,1,0,0,0,694,686,1,0,0,0,694,
		687,1,0,0,0,694,688,1,0,0,0,694,689,1,0,0,0,694,690,1,0,0,0,694,691,1,
		0,0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,79,1,0,0,0,696,700,5,9,0,0,697,
		701,3,14,7,0,698,701,3,90,45,0,699,701,3,86,43,0,700,697,1,0,0,0,700,698,
		1,0,0,0,700,699,1,0,0,0,701,81,1,0,0,0,702,703,5,25,0,0,703,704,3,174,
		87,0,704,705,5,60,0,0,705,713,3,96,48,0,706,707,5,17,0,0,707,708,3,174,
		87,0,708,709,5,60,0,0,709,710,3,96,48,0,710,712,1,0,0,0,711,706,1,0,0,
		0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,719,1,0,0,0,715,
		713,1,0,0,0,716,717,5,18,0,0,717,718,5,60,0,0,718,720,3,96,48,0,719,716,
		1,0,0,0,719,720,1,0,0,0,720,83,1,0,0,0,721,722,5,41,0,0,722,723,3,174,
		87,0,723,724,5,60,0,0,724,728,3,96,48,0,725,726,5,18,0,0,726,727,5,60,
		0,0,727,729,3,96,48,0,728,725,1,0,0,0,728,729,1,0,0,0,729,85,1,0,0,0,730,
		731,5,22,0,0,731,732,3,226,113,0,732,733,5,27,0,0,733,734,3,228,114,0,
		734,735,5,60,0,0,735,739,3,96,48,0,736,737,5,18,0,0,737,738,5,60,0,0,738,
		740,3,96,48,0,739,736,1,0,0,0,739,740,1,0,0,0,740,87,1,0,0,0,741,742,5,
		39,0,0,742,743,5,60,0,0,743,765,3,96,48,0,744,745,3,94,47,0,745,746,5,
		60,0,0,746,747,3,96,48,0,747,749,1,0,0,0,748,744,1,0,0,0,749,750,1,0,0,
		0,750,748,1,0,0,0,750,751,1,0,0,0,751,755,1,0,0,0,752,753,5,18,0,0,753,
		754,5,60,0,0,754,756,3,96,48,0,755,752,1,0,0,0,755,756,1,0,0,0,756,760,
		1,0,0,0,757,758,5,21,0,0,758,759,5,60,0,0,759,761,3,96,48,0,760,757,1,
		0,0,0,760,761,1,0,0,0,761,766,1,0,0,0,762,763,5,21,0,0,763,764,5,60,0,
		0,764,766,3,96,48,0,765,748,1,0,0,0,765,762,1,0,0,0,766,89,1,0,0,0,767,
		768,5,42,0,0,768,773,3,92,46,0,769,770,5,59,0,0,770,772,3,92,46,0,771,
		769,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,776,1,
		0,0,0,775,773,1,0,0,0,776,777,5,60,0,0,777,778,3,96,48,0,778,91,1,0,0,
		0,779,782,3,174,87,0,780,781,5,7,0,0,781,783,3,194,97,0,782,780,1,0,0,
		0,782,783,1,0,0,0,783,93,1,0,0,0,784,790,5,19,0,0,785,788,3,174,87,0,786,
		787,5,7,0,0,787,789,3,214,107,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,
		1,0,0,0,790,785,1,0,0,0,790,791,1,0,0,0,791,95,1,0,0,0,792,803,3,28,14,
		0,793,794,5,44,0,0,794,796,5,1,0,0,795,797,3,26,13,0,796,795,1,0,0,0,797,
		798,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,801,5,
		2,0,0,801,803,1,0,0,0,802,792,1,0,0,0,802,793,1,0,0,0,803,97,1,0,0,0,804,
		805,5,30,0,0,805,806,3,100,50,0,806,807,5,60,0,0,807,808,5,44,0,0,808,
		810,5,1,0,0,809,811,3,106,53,0,810,809,1,0,0,0,811,812,1,0,0,0,812,810,
		1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,5,2,0,0,815,99,1,0,0,0,
		816,817,3,104,52,0,817,819,5,59,0,0,818,820,3,102,51,0,819,818,1,0,0,0,
		819,820,1,0,0,0,820,823,1,0,0,0,821,823,3,174,87,0,822,816,1,0,0,0,822,
		821,1,0,0,0,823,101,1,0,0,0,824,826,5,59,0,0,825,827,3,104,52,0,826,825,
		1,0,0,0,827,828,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,
		0,830,832,5,59,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,103,1,0,0,0,833,
		834,5,56,0,0,834,837,3,194,97,0,835,837,3,174,87,0,836,833,1,0,0,0,836,
		835,1,0,0,0,837,105,1,0,0,0,838,839,5,12,0,0,839,841,3,110,55,0,840,842,
		3,108,54,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,5,60,
		0,0,844,845,3,96,48,0,845,107,1,0,0,0,846,847,5,25,0,0,847,848,3,174,87,
		0,848,109,1,0,0,0,849,852,3,150,75,0,850,852,3,112,56,0,851,849,1,0,0,
		0,851,850,1,0,0,0,852,111,1,0,0,0,853,856,3,114,57,0,854,856,3,116,58,
		0,855,853,1,0,0,0,855,854,1,0,0,0,856,113,1,0,0,0,857,858,3,116,58,0,858,
		859,5,7,0,0,859,860,3,136,68,0,860,115,1,0,0,0,861,866,3,118,59,0,862,
		863,5,66,0,0,863,865,3,118,59,0,864,862,1,0,0,0,865,868,1,0,0,0,866,864,
		1,0,0,0,866,867,1,0,0,0,867,117,1,0,0,0,868,866,1,0,0,0,869,878,3,120,
		60,0,870,878,3,134,67,0,871,878,3,138,69,0,872,878,3,140,70,0,873,878,
		3,146,73,0,874,878,3,148,74,0,875,878,3,158,79,0,876,878,3,166,83,0,877,
		869,1,0,0,0,877,870,1,0,0,0,877,871,1,0,0,0,877,872,1,0,0,0,877,873,1,
		0,0,0,877,874,1,0,0,0,877,875,1,0,0,0,877,876,1,0,0,0,878,119,1,0,0,0,
		879,880,3,126,63,0,880,881,4,60,0,0,881,888,1,0,0,0,882,888,3,124,62,0,
		883,888,3,250,125,0,884,888,5,31,0,0,885,888,5,38,0,0,886,888,5,20,0,0,
		887,879,1,0,0,0,887,882,1,0,0,0,887,883,1,0,0,0,887,884,1,0,0,0,887,885,
		1,0,0,0,887,886,1,0,0,0,888,121,1,0,0,0,889,890,3,126,63,0,890,891,4,61,
		1,0,891,898,1,0,0,0,892,898,3,124,62,0,893,898,3,250,125,0,894,898,5,31,
		0,0,895,898,5,38,0,0,896,898,5,20,0,0,897,889,1,0,0,0,897,892,1,0,0,0,
		897,893,1,0,0,0,897,894,1,0,0,0,897,895,1,0,0,0,897,896,1,0,0,0,898,123,
		1,0,0,0,899,900,3,128,64,0,900,901,5,71,0,0,901,902,3,132,66,0,902,908,
		1,0,0,0,903,904,3,128,64,0,904,905,5,72,0,0,905,906,3,132,66,0,906,908,
		1,0,0,0,907,899,1,0,0,0,907,903,1,0,0,0,908,125,1,0,0,0,909,913,5,4,0,
		0,910,911,5,72,0,0,911,913,5,4,0,0,912,909,1,0,0,0,912,910,1,0,0,0,913,
		127,1,0,0,0,914,918,3,130,65,0,915,916,5,72,0,0,916,918,3,130,65,0,917,
		914,1,0,0,0,917,915,1,0,0,0,918,129,1,0,0,0,919,920,5,4,0,0,920,131,1,
		0,0,0,921,922,5,4,0,0,922,133,1,0,0,0,923,924,3,136,68,0,924,135,1,0,0,
		0,925,926,3,214,107,0,926,927,4,68,2,0,927,137,1,0,0,0,928,929,5,40,0,
		0,929,139,1,0,0,0,930,931,3,142,71,0,931,932,4,70,3,0,932,141,1,0,0,0,
		933,936,3,214,107,0,934,935,5,54,0,0,935,937,3,214,107,0,936,934,1,0,0,
		0,937,938,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,143,1,0,0,0,940,
		943,3,142,71,0,941,943,3,214,107,0,942,940,1,0,0,0,942,941,1,0,0,0,943,
		145,1,0,0,0,944,945,5,57,0,0,945,946,3,112,56,0,946,947,5,58,0,0,947,147,
		1,0,0,0,948,950,5,64,0,0,949,951,3,152,76,0,950,949,1,0,0,0,950,951,1,
		0,0,0,951,952,1,0,0,0,952,959,5,65,0,0,953,955,5,57,0,0,954,956,3,150,
		75,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,959,5,58,0,0,
		958,948,1,0,0,0,958,953,1,0,0,0,959,149,1,0,0,0,960,961,3,154,77,0,961,
		963,5,59,0,0,962,964,3,152,76,0,963,962,1,0,0,0,963,964,1,0,0,0,964,151,
		1,0,0,0,965,970,3,154,77,0,966,967,5,59,0,0,967,969,3,154,77,0,968,966,
		1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,974,1,0,0,
		0,972,970,1,0,0,0,973,975,5,59,0,0,974,973,1,0,0,0,974,975,1,0,0,0,975,
		153,1,0,0,0,976,979,3,156,78,0,977,979,3,112,56,0,978,976,1,0,0,0,978,
		977,1,0,0,0,979,155,1,0,0,0,980,981,5,56,0,0,981,985,3,136,68,0,982,983,
		5,56,0,0,983,985,3,138,69,0,984,980,1,0,0,0,984,982,1,0,0,0,985,157,1,
		0,0,0,986,987,5,77,0,0,987,1012,5,78,0,0,988,989,5,77,0,0,989,991,3,164,
		82,0,990,992,5,59,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,
		993,994,5,78,0,0,994,1012,1,0,0,0,995,996,5,77,0,0,996,997,3,160,80,0,
		997,998,5,59,0,0,998,1000,3,164,82,0,999,1001,5,59,0,0,1000,999,1,0,0,
		0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,5,78,0,0,1003,1012,1,0,
		0,0,1004,1005,5,77,0,0,1005,1007,3,160,80,0,1006,1008,5,59,0,0,1007,1006,
		1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,5,78,0,0,1010,1012,
		1,0,0,0,1011,986,1,0,0,0,1011,988,1,0,0,0,1011,995,1,0,0,0,1011,1004,1,
		0,0,0,1012,159,1,0,0,0,1013,1018,3,162,81,0,1014,1015,5,59,0,0,1015,1017,
		3,162,81,0,1016,1014,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,
		1019,1,0,0,0,1019,161,1,0,0,0,1020,1018,1,0,0,0,1021,1024,3,122,61,0,1022,
		1024,3,142,71,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,1025,1,0,0,0,
		1025,1026,5,60,0,0,1026,1027,3,112,56,0,1027,163,1,0,0,0,1028,1029,5,62,
		0,0,1029,1030,3,136,68,0,1030,165,1,0,0,0,1031,1032,3,144,72,0,1032,1033,
		5,57,0,0,1033,1034,5,58,0,0,1034,1062,1,0,0,0,1035,1036,3,144,72,0,1036,
		1037,5,57,0,0,1037,1039,3,168,84,0,1038,1040,5,59,0,0,1039,1038,1,0,0,
		0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,1042,5,58,0,0,1042,1062,1,0,
		0,0,1043,1044,3,144,72,0,1044,1045,5,57,0,0,1045,1047,3,170,85,0,1046,
		1048,5,59,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,
		1050,5,58,0,0,1050,1062,1,0,0,0,1051,1052,3,144,72,0,1052,1053,5,57,0,
		0,1053,1054,3,168,84,0,1054,1055,5,59,0,0,1055,1057,3,170,85,0,1056,1058,
		5,59,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,
		5,58,0,0,1060,1062,1,0,0,0,1061,1031,1,0,0,0,1061,1035,1,0,0,0,1061,1043,
		1,0,0,0,1061,1051,1,0,0,0,1062,167,1,0,0,0,1063,1068,3,112,56,0,1064,1065,
		5,59,0,0,1065,1067,3,112,56,0,1066,1064,1,0,0,0,1067,1070,1,0,0,0,1068,
		1066,1,0,0,0,1068,1069,1,0,0,0,1069,169,1,0,0,0,1070,1068,1,0,0,0,1071,
		1076,3,172,86,0,1072,1073,5,59,0,0,1073,1075,3,172,86,0,1074,1072,1,0,
		0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,171,1,0,
		0,0,1078,1076,1,0,0,0,1079,1080,3,214,107,0,1080,1081,5,63,0,0,1081,1082,
		3,112,56,0,1082,173,1,0,0,0,1083,1089,3,182,91,0,1084,1085,5,25,0,0,1085,
		1086,3,182,91,0,1086,1087,5,18,0,0,1087,1088,3,174,87,0,1088,1090,1,0,
		0,0,1089,1084,1,0,0,0,1089,1090,1,0,0,0,1090,1093,1,0,0,0,1091,1093,3,
		178,89,0,1092,1083,1,0,0,0,1092,1091,1,0,0,0,1093,175,1,0,0,0,1094,1097,
		3,182,91,0,1095,1097,3,180,90,0,1096,1094,1,0,0,0,1096,1095,1,0,0,0,1097,
		177,1,0,0,0,1098,1100,5,29,0,0,1099,1101,3,22,11,0,1100,1099,1,0,0,0,1100,
		1101,1,0,0,0,1101,1102,1,0,0,0,1102,1103,5,60,0,0,1103,1104,3,174,87,0,
		1104,179,1,0,0,0,1105,1107,5,29,0,0,1106,1108,3,22,11,0,1107,1106,1,0,
		0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,5,60,0,0,1110,1111,3,
		176,88,0,1111,181,1,0,0,0,1112,1117,3,184,92,0,1113,1114,5,34,0,0,1114,
		1116,3,184,92,0,1115,1113,1,0,0,0,1116,1119,1,0,0,0,1117,1115,1,0,0,0,
		1117,1118,1,0,0,0,1118,183,1,0,0,0,1119,1117,1,0,0,0,1120,1125,3,186,93,
		0,1121,1122,5,6,0,0,1122,1124,3,186,93,0,1123,1121,1,0,0,0,1124,1127,1,
		0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,185,1,0,0,0,1127,1125,1,
		0,0,0,1128,1129,5,33,0,0,1129,1132,3,186,93,0,1130,1132,3,188,94,0,1131,
		1128,1,0,0,0,1131,1130,1,0,0,0,1132,187,1,0,0,0,1133,1139,3,194,97,0,1134,
		1135,3,190,95,0,1135,1136,3,194,97,0,1136,1138,1,0,0,0,1137,1134,1,0,0,
		0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,189,1,0,0,
		0,1141,1139,1,0,0,0,1142,1156,5,79,0,0,1143,1156,5,80,0,0,1144,1156,5,
		81,0,0,1145,1156,5,82,0,0,1146,1156,5,83,0,0,1147,1156,5,84,0,0,1148,1156,
		5,85,0,0,1149,1156,5,27,0,0,1150,1151,5,33,0,0,1151,1156,5,27,0,0,1152,
		1156,5,28,0,0,1153,1154,5,28,0,0,1154,1156,5,33,0,0,1155,1142,1,0,0,0,
		1155,1143,1,0,0,0,1155,1144,1,0,0,0,1155,1145,1,0,0,0,1155,1146,1,0,0,
		0,1155,1147,1,0,0,0,1155,1148,1,0,0,0,1155,1149,1,0,0,0,1155,1150,1,0,
		0,0,1155,1152,1,0,0,0,1155,1153,1,0,0,0,1156,191,1,0,0,0,1157,1158,5,56,
		0,0,1158,1159,3,194,97,0,1159,193,1,0,0,0,1160,1165,3,196,98,0,1161,1162,
		5,66,0,0,1162,1164,3,196,98,0,1163,1161,1,0,0,0,1164,1167,1,0,0,0,1165,
		1163,1,0,0,0,1165,1166,1,0,0,0,1166,195,1,0,0,0,1167,1165,1,0,0,0,1168,
		1173,3,198,99,0,1169,1170,5,67,0,0,1170,1172,3,198,99,0,1171,1169,1,0,
		0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,197,1,0,
		0,0,1175,1173,1,0,0,0,1176,1181,3,200,100,0,1177,1178,5,68,0,0,1178,1180,
		3,200,100,0,1179,1177,1,0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,
		1182,1,0,0,0,1182,199,1,0,0,0,1183,1181,1,0,0,0,1184,1189,3,202,101,0,
		1185,1186,7,2,0,0,1186,1188,3,202,101,0,1187,1185,1,0,0,0,1188,1191,1,
		0,0,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,201,1,0,0,0,1191,1189,1,
		0,0,0,1192,1197,3,204,102,0,1193,1194,7,3,0,0,1194,1196,3,204,102,0,1195,
		1193,1,0,0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,0,1197,1198,1,0,0,0,1198,
		203,1,0,0,0,1199,1197,1,0,0,0,1200,1205,3,206,103,0,1201,1202,7,4,0,0,
		1202,1204,3,206,103,0,1203,1201,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,
		0,0,0,1205,1206,1,0,0,0,1206,205,1,0,0,0,1207,1205,1,0,0,0,1208,1209,7,
		5,0,0,1209,1212,3,206,103,0,1210,1212,3,208,104,0,1211,1208,1,0,0,0,1211,
		1210,1,0,0,0,1212,207,1,0,0,0,1213,1216,3,210,105,0,1214,1215,5,62,0,0,
		1215,1217,3,206,103,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,209,1,0,
		0,0,1218,1220,5,10,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,
		0,0,0,1221,1225,3,212,106,0,1222,1224,3,218,109,0,1223,1222,1,0,0,0,1224,
		1227,1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,211,1,0,0,0,1227,
		1225,1,0,0,0,1228,1231,5,57,0,0,1229,1232,3,246,123,0,1230,1232,3,216,
		108,0,1231,1229,1,0,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,
		1,0,0,0,1233,1256,5,58,0,0,1234,1236,5,64,0,0,1235,1237,3,216,108,0,1236,
		1235,1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1256,5,65,0,0,1239,
		1241,5,77,0,0,1240,1242,3,230,115,0,1241,1240,1,0,0,0,1241,1242,1,0,0,
		0,1242,1243,1,0,0,0,1243,1256,5,78,0,0,1244,1256,3,214,107,0,1245,1256,
		5,4,0,0,1246,1248,5,3,0,0,1247,1246,1,0,0,0,1248,1249,1,0,0,0,1249,1247,
		1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,1256,5,55,0,0,1252,1256,
		5,31,0,0,1253,1256,5,38,0,0,1254,1256,5,20,0,0,1255,1228,1,0,0,0,1255,
		1234,1,0,0,0,1255,1239,1,0,0,0,1255,1244,1,0,0,0,1255,1245,1,0,0,0,1255,
		1247,1,0,0,0,1255,1251,1,0,0,0,1255,1252,1,0,0,0,1255,1253,1,0,0,0,1255,
		1254,1,0,0,0,1256,213,1,0,0,0,1257,1258,7,6,0,0,1258,215,1,0,0,0,1259,
		1262,3,174,87,0,1260,1262,3,192,96,0,1261,1259,1,0,0,0,1261,1260,1,0,0,
		0,1262,1277,1,0,0,0,1263,1278,3,240,120,0,1264,1267,5,59,0,0,1265,1268,
		3,174,87,0,1266,1268,3,192,96,0,1267,1265,1,0,0,0,1267,1266,1,0,0,0,1268,
		1270,1,0,0,0,1269,1264,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,0,1271,
		1272,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1274,1276,5,59,0,0,1275,
		1274,1,0,0,0,1275,1276,1,0,0,0,1276,1278,1,0,0,0,1277,1263,1,0,0,0,1277,
		1271,1,0,0,0,1278,217,1,0,0,0,1279,1281,5,57,0,0,1280,1282,3,234,117,0,
		1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1291,5,58,0,
		0,1284,1285,5,64,0,0,1285,1286,3,220,110,0,1286,1287,5,65,0,0,1287,1291,
		1,0,0,0,1288,1289,5,54,0,0,1289,1291,3,214,107,0,1290,1279,1,0,0,0,1290,
		1284,1,0,0,0,1290,1288,1,0,0,0,1291,219,1,0,0,0,1292,1297,3,222,111,0,
		1293,1294,5,59,0,0,1294,1296,3,222,111,0,1295,1293,1,0,0,0,1296,1299,1,
		0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1301,1,0,0,0,1299,1297,
		1,0,0,0,1300,1302,5,59,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,221,
		1,0,0,0,1303,1315,3,174,87,0,1304,1306,3,174,87,0,1305,1304,1,0,0,0,1305,
		1306,1,0,0,0,1306,1307,1,0,0,0,1307,1309,5,60,0,0,1308,1310,3,174,87,0,
		1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,1313,3,224,
		112,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1303,
		1,0,0,0,1314,1305,1,0,0,0,1315,223,1,0,0,0,1316,1318,5,60,0,0,1317,1319,
		3,174,87,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,225,1,0,0,0,1320,1323,
		3,194,97,0,1321,1323,3,192,96,0,1322,1320,1,0,0,0,1322,1321,1,0,0,0,1323,
		1331,1,0,0,0,1324,1327,5,59,0,0,1325,1328,3,194,97,0,1326,1328,3,192,96,
		0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,1330,1,0,0,0,1329,1324,1,0,
		0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,1335,1,
		0,0,0,1333,1331,1,0,0,0,1334,1336,5,59,0,0,1335,1334,1,0,0,0,1335,1336,
		1,0,0,0,1336,227,1,0,0,0,1337,1342,3,174,87,0,1338,1339,5,59,0,0,1339,
		1341,3,174,87,0,1340,1338,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,
		1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1345,1347,5,59,0,
		0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,229,1,0,0,0,1348,1349,3,174,
		87,0,1349,1350,5,60,0,0,1350,1351,3,174,87,0,1351,1355,1,0,0,0,1352,1353,
		5,62,0,0,1353,1355,3,194,97,0,1354,1348,1,0,0,0,1354,1352,1,0,0,0,1355,
		1374,1,0,0,0,1356,1375,3,240,120,0,1357,1364,5,59,0,0,1358,1359,3,174,
		87,0,1359,1360,5,60,0,0,1360,1361,3,174,87,0,1361,1365,1,0,0,0,1362,1363,
		5,62,0,0,1363,1365,3,194,97,0,1364,1358,1,0,0,0,1364,1362,1,0,0,0,1365,
		1367,1,0,0,0,1366,1357,1,0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,0,1368,
		1369,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1371,1373,5,59,0,0,1372,
		1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1356,1,0,0,0,1374,
		1368,1,0,0,0,1375,1397,1,0,0,0,1376,1379,3,174,87,0,1377,1379,3,192,96,
		0,1378,1376,1,0,0,0,1378,1377,1,0,0,0,1379,1394,1,0,0,0,1380,1395,3,240,
		120,0,1381,1384,5,59,0,0,1382,1385,3,174,87,0,1383,1385,3,192,96,0,1384,
		1382,1,0,0,0,1384,1383,1,0,0,0,1385,1387,1,0,0,0,1386,1381,1,0,0,0,1387,
		1390,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,1392,1,0,0,0,1390,
		1388,1,0,0,0,1391,1393,5,59,0,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,
		1395,1,0,0,0,1394,1380,1,0,0,0,1394,1388,1,0,0,0,1395,1397,1,0,0,0,1396,
		1354,1,0,0,0,1396,1378,1,0,0,0,1397,231,1,0,0,0,1398,1399,5,13,0,0,1399,
		1405,3,214,107,0,1400,1402,5,57,0,0,1401,1403,3,234,117,0,1402,1401,1,
		0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,5,58,0,0,1405,1400,
		1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,5,60,0,0,1408,1409,
		3,96,48,0,1409,233,1,0,0,0,1410,1415,3,236,118,0,1411,1412,5,59,0,0,1412,
		1414,3,236,118,0,1413,1411,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,
		1415,1416,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1418,1420,5,59,0,
		0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,1420,235,1,0,0,0,1421,1423,3,174,
		87,0,1422,1424,3,240,120,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1434,
		1,0,0,0,1425,1426,3,174,87,0,1426,1427,5,63,0,0,1427,1428,3,174,87,0,1428,
		1434,1,0,0,0,1429,1430,5,62,0,0,1430,1434,3,174,87,0,1431,1432,5,56,0,
		0,1432,1434,3,174,87,0,1433,1421,1,0,0,0,1433,1425,1,0,0,0,1433,1429,1,
		0,0,0,1433,1431,1,0,0,0,1434,237,1,0,0,0,1435,1438,3,240,120,0,1436,1438,
		3,242,121,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,239,1,0,0,0,1439,
		1441,5,9,0,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,
		1443,5,22,0,0,1443,1444,3,226,113,0,1444,1445,5,27,0,0,1445,1447,3,182,
		91,0,1446,1448,3,238,119,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,241,
		1,0,0,0,1449,1450,5,25,0,0,1450,1452,3,176,88,0,1451,1453,3,238,119,0,
		1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,243,1,0,0,0,1454,1455,3,214,107,
		0,1455,245,1,0,0,0,1456,1458,5,43,0,0,1457,1459,3,248,124,0,1458,1457,
		1,0,0,0,1458,1459,1,0,0,0,1459,247,1,0,0,0,1460,1461,5,23,0,0,1461,1464,
		3,174,87,0,1462,1464,3,228,114,0,1463,1460,1,0,0,0,1463,1462,1,0,0,0,1464,
		249,1,0,0,0,1465,1467,5,3,0,0,1466,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
		1466,1,0,0,0,1468,1469,1,0,0,0,1469,251,1,0,0,0,205,257,261,263,272,281,
		284,291,297,307,314,321,327,331,337,343,347,354,356,358,363,365,367,371,
		377,381,388,390,392,397,399,404,409,415,419,425,431,435,442,444,446,451,
		453,455,459,465,469,476,478,480,485,487,493,500,504,516,523,528,532,535,
		541,545,550,554,558,572,580,588,590,594,603,610,612,621,626,631,638,642,
		649,657,666,675,682,694,700,713,719,728,739,750,755,760,765,773,782,788,
		790,798,802,812,819,822,828,831,836,841,851,855,866,877,887,897,907,912,
		917,938,942,950,955,958,963,970,974,978,984,991,1000,1007,1011,1018,1023,
		1039,1047,1057,1061,1068,1076,1089,1092,1096,1100,1107,1117,1125,1131,
		1139,1155,1165,1173,1181,1189,1197,1205,1211,1216,1219,1225,1231,1236,
		1241,1249,1255,1261,1267,1271,1275,1277,1281,1290,1297,1301,1305,1309,
		1312,1314,1318,1322,1327,1331,1335,1342,1346,1354,1364,1368,1372,1374,
		1378,1384,1388,1392,1394,1396,1402,1405,1415,1419,1423,1433,1437,1440,
		1447,1452,1458,1463,1468
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
